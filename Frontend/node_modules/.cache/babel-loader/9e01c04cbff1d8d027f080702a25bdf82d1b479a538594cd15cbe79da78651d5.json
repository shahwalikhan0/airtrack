{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(options) {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin\n    }\n  };\n}\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport class MsalBrowser extends MsalBaseUtilities {\n  constructor(options) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n    if (options.authenticationRecord) {\n      this.account = Object.assign(Object.assign({}, options.authenticationRecord), {\n        tenantId: this.tenantId\n      });\n    }\n  }\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init() {\n    // Nothing to do here.\n  }\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout() {\n    var _a;\n    (_a = this.app) === null || _a === void 0 ? void 0 : _a.logout();\n  }\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  async getToken(scopes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch(err => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message: \"Automatic authentication has been disabled. You may call the authentication() method.\"\n        });\n      }\n      this.logger.info(`Silent authentication failed, falling back to interactive method ${this.loginStyle}`);\n      return this.doGetToken(scopes);\n    });\n  }\n}","map":{"version":3,"names":["DefaultTenantId","resolveTenantId","processMultiTenantRequest","AuthenticationRequiredError","CredentialUnavailableError","MsalBaseUtilities","getAuthority","getKnownAuthorities","defaultBrowserMsalConfig","options","tenantId","authority","authorityHost","auth","clientId","knownAuthorities","redirectUri","self","location","origin","MsalBrowser","constructor","logger","loginStyle","msalConfig","disableAutomaticAuthentication","authenticationRecord","account","Object","assign","init","logout","_a","app","getToken","scopes","arguments","length","undefined","handleRedirect","getActiveAccount","login","getTokenSilent","catch","err","name","getTokenOptions","message","info","doGetToken"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/identity/src/msal/browserFlows/msalBrowserCommon.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\nimport { AccessToken } from \"@azure/core-auth\";\n\nimport { DefaultTenantId } from \"../../constants\";\nimport { resolveTenantId } from \"../../util/resolveTenantId\";\nimport { processMultiTenantRequest } from \"../../util/validateMultiTenant\";\nimport { BrowserLoginStyle } from \"../../credentials/interactiveBrowserCredentialOptions\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\nimport { MsalFlow, MsalFlowOptions } from \"../flows\";\nimport { AuthenticationRecord } from \"../types\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\n\n/**\n * Union of the constructor parameters that all MSAL flow types take.\n * Some properties might not be used by some flow types.\n */\nexport interface MsalBrowserFlowOptions extends MsalFlowOptions {\n  redirectUri?: string;\n  loginStyle: BrowserLoginStyle;\n  loginHint?: string;\n}\n\n/**\n * The common methods we use to work with the MSAL browser flows.\n * @internal\n */\nexport interface MsalBrowserFlow extends MsalFlow {\n  login(scopes?: string[]): Promise<AuthenticationRecord | undefined>;\n  handleRedirect(): Promise<AuthenticationRecord | undefined>;\n}\n\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(\n  options: MsalBrowserFlowOptions\n): msalBrowser.Configuration {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId!,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin,\n    },\n  };\n}\n\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport abstract class MsalBrowser extends MsalBaseUtilities implements MsalBrowserFlow {\n  protected loginStyle: BrowserLoginStyle;\n  protected clientId: string;\n  protected tenantId: string;\n  protected authorityHost?: string;\n  protected account: AuthenticationRecord | undefined;\n  protected msalConfig: msalBrowser.Configuration;\n  protected disableAutomaticAuthentication?: boolean;\n  protected app?: msalBrowser.PublicClientApplication;\n\n  constructor(options: MsalBrowserFlowOptions) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init(): Promise<void> {\n    // Nothing to do here.\n  }\n\n  /**\n   * Attempts to handle a redirection request the least amount of times possible.\n   */\n  public abstract handleRedirect(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout(): Promise<void> {\n    this.app?.logout();\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public abstract getActiveAccount(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public abstract login(scopes?: string | string[]): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public abstract getTokenSilent(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected abstract doGetToken(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  public async getToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {}\n  ): Promise<AccessToken> {\n    const tenantId = processMultiTenantRequest(this.tenantId, options) || this.tenantId;\n\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch((err) => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options?.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message:\n            \"Automatic authentication has been disabled. You may call the authentication() method.\",\n        });\n      }\n      this.logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`\n      );\n      return this.doGetToken(scopes);\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}