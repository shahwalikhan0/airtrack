{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent\";\nconst UserAgentHeaderName = getUserAgentHeaderName();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request, next) {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, userAgentValue);\n      }\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["getUserAgentHeaderName","getUserAgentValue","UserAgentHeaderName","userAgentPolicyName","userAgentPolicy","options","arguments","length","undefined","userAgentValue","userAgentPrefix","name","sendRequest","request","next","headers","has","set"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/policies/userAgentPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent\";\n\nconst UserAgentHeaderName = getUserAgentHeaderName();\n\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentPolicyOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options: UserAgentPolicyOptions = {}): PipelinePolicy {\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, userAgentValue);\n      }\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAIA,SAASA,sBAAsB,EAAEC,iBAAiB,QAAQ,mBAAmB;AAE7E,MAAMC,mBAAmB,GAAGF,sBAAsB,EAAE;AAEpD;;;AAGA,OAAO,MAAMG,mBAAmB,GAAG,iBAAiB;AAapD;;;;;AAKA,OAAM,SAAUC,eAAeA,CAAA,EAAqC;EAAA,IAApCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,EAAE;EAClE,MAAMG,cAAc,GAAGR,iBAAiB,CAACI,OAAO,CAACK,eAAe,CAAC;EACjE,OAAO;IACLC,IAAI,EAAER,mBAAmB;IACzB,MAAMS,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D,IAAI,CAACD,OAAO,CAACE,OAAO,CAACC,GAAG,CAACd,mBAAmB,CAAC,EAAE;QAC7CW,OAAO,CAACE,OAAO,CAACE,GAAG,CAACf,mBAAmB,EAAEO,cAAc,CAAC;;MAE1D,OAAOK,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}