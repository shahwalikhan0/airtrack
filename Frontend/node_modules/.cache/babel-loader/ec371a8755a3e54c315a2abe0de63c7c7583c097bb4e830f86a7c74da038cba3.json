{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_CHARKEY } from \"./interfaces\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer\";\nimport { getOperationRequestInfo } from \"./operationHelpers\";\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a, _b, _c, _d, _e, _f, _g;\n  const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n  const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions = {\n    xml: {\n      rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n      includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n      xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : XML_CHARKEY\n    }\n  };\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request, next) {\n      const response = await next(request);\n      return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n    }\n  };\n}\nfunction getOperationResponseMap(parsedResponse) {\n  let result;\n  const request = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n  if (operationSpec) {\n    if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  const request = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n  let result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n  const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const {\n    error,\n    shouldReturnResponse\n  } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n      } catch (deserializeError) {\n        const restError = new RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n          statusCode: parsedResponse.status,\n          request: parsedResponse.request,\n          response: parsedResponse\n        });\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", {\n        xml: {},\n        ignoreUnknownProperties: true\n      });\n    }\n  }\n  return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n  var _a;\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n  const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse\n  });\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n      }\n      const internalError = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n      if (defaultBodyMapper) {\n        error.response.parsedBody = deserializedError;\n      }\n    }\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n  return {\n    error,\n    shouldReturnResponse: false\n  };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n  var _a;\n  if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    try {\n      if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse\n      });\n      throw e;\n    }\n  }\n  return operationResponse;\n}","map":{"version":3,"names":["XML_CHARKEY","RestError","MapperTypeNames","getOperationRequestInfo","defaultJsonContentTypes","defaultXmlContentTypes","deserializationPolicyName","deserializationPolicy","options","arguments","length","undefined","jsonContentTypes","_b","_a","expectedContentTypes","json","xmlContentTypes","_d","_c","xml","parseXML","serializerOptions","updatedOptions","rootName","_e","includeRoot","_f","xmlCharKey","_g","name","sendRequest","request","next","response","deserializeResponseBody","getOperationResponseMap","parsedResponse","result","operationInfo","operationSpec","operationResponseGetter","responses","status","shouldDeserializeResponse","shouldDeserialize","parse","responseSpec","error","shouldReturnResponse","handleErrorResponse","bodyMapper","valueToDeserialize","parsedBody","isXML","type","Sequence","xmlElementName","serializer","deserialize","deserializeError","restError","bodyAsText","statusCode","httpMethod","headersMapper","parsedHeaders","headers","toJSON","ignoreUnknownProperties","isOperationSpecEmpty","expectedStatusCodes","Object","keys","isSuccessByStatus","isExpectedStatusCode","isError","errorResponseSpec","default","initialErrorMessage","streamResponseStatusCodes","has","defaultBodyMapper","defaultHeadersMapper","deserializedError","elementName","internalError","code","message","defaultError","operationResponse","opts","text","contentType","get","contentComponents","split","map","component","toLowerCase","some","indexOf","JSON","Error","body","err","msg","errCode","PARSE_ERROR","e"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-client/src/deserializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  FullOperationResponse,\n  OperationRequest,\n  OperationResponseMap,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  RestError,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer\";\nimport { getOperationRequestInfo } from \"./operationHelpers\";\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationPolicyOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes?: DeserializationContentTypes;\n\n  /**\n   * A function that is able to parse XML. Required for XML support.\n   */\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options: DeserializationPolicyOptions = {}): PipelinePolicy {\n  const jsonContentTypes = options.expectedContentTypes?.json ?? defaultJsonContentTypes;\n  const xmlContentTypes = options.expectedContentTypes?.xml ?? defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return deserializeResponseBody(\n        jsonContentTypes,\n        xmlContentTypes,\n        response,\n        updatedOptions,\n        parseXML\n      );\n    },\n  };\n}\n\nfunction getOperationResponseMap(\n  parsedResponse: PipelineResponse\n): undefined | OperationResponseMap {\n  let result: OperationResponseMap | undefined;\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (operationSpec) {\n    if (!operationInfo?.operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo?.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: PipelineResponse): boolean {\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo?.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nasync function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: PipelineResponse,\n  options: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>\n): Promise<PipelineResponse> {\n  const parsedResponse = await parse(\n    jsonContentTypes,\n    xmlContentTypes,\n    response,\n    options,\n    parseXML\n  );\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const { error, shouldReturnResponse } = handleErrorResponse(\n    parsedResponse,\n    operationSpec,\n    responseSpec,\n    options\n  );\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize: any = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize =\n          typeof valueToDeserialize === \"object\"\n            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n            : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n          responseSpec.bodyMapper,\n          valueToDeserialize,\n          \"operationRes.parsedBody\",\n          options\n        );\n      } catch (deserializeError: any) {\n        const restError = new RestError(\n          `Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n          {\n            statusCode: parsedResponse.status,\n            request: parsedResponse.request,\n            response: parsedResponse,\n          }\n        );\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n        responseSpec.headersMapper,\n        parsedResponse.headers.toJSON(),\n        \"operationRes.parsedHeaders\",\n        { xml: {}, ignoreUnknownProperties: true }\n      );\n    }\n  }\n\n  return parsedResponse;\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: FullOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponseMap | undefined,\n  options: RequiredSerializerOptions\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n\n  const initialErrorMessage = parsedResponse.request.streamResponseStatusCodes?.has(\n    parsedResponse.status\n  )\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse,\n  });\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\",\n          options\n        );\n      }\n\n      const internalError: any = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        (error.response! as FullOperationResponse).parsedBody = deserializedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      (error.response! as FullOperationResponse).parsedHeaders =\n        operationSpec.serializer.deserialize(\n          defaultHeadersMapper,\n          parsedResponse.headers.toJSON(),\n          \"operationRes.parsedHeaders\"\n        );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nasync function parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: FullOperationResponse,\n  opts: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>\n): Promise<FullOperationResponse> {\n  if (\n    !operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) &&\n    operationResponse.bodyAsText\n  ) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n\n    try {\n      if (\n        contentComponents.length === 0 ||\n        contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n      ) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err: any) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse,\n      });\n      throw e;\n    }\n  }\n\n  return operationResponse;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}