{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _colmetadataTokenParser = _interopRequireDefault(require(\"./colmetadata-token-parser\"));\nvar _doneTokenParser = require(\"./done-token-parser\");\nvar _envChangeTokenParser = _interopRequireDefault(require(\"./env-change-token-parser\"));\nvar _infoerrorTokenParser = require(\"./infoerror-token-parser\");\nvar _fedauthInfoParser = _interopRequireDefault(require(\"./fedauth-info-parser\"));\nvar _featureExtAckParser = _interopRequireDefault(require(\"./feature-ext-ack-parser\"));\nvar _loginackTokenParser = _interopRequireDefault(require(\"./loginack-token-parser\"));\nvar _orderTokenParser = _interopRequireDefault(require(\"./order-token-parser\"));\nvar _returnstatusTokenParser = _interopRequireDefault(require(\"./returnstatus-token-parser\"));\nvar _returnvalueTokenParser = _interopRequireDefault(require(\"./returnvalue-token-parser\"));\nvar _rowTokenParser = _interopRequireDefault(require(\"./row-token-parser\"));\nvar _nbcrowTokenParser = _interopRequireDefault(require(\"./nbcrow-token-parser\"));\nvar _sspiTokenParser = _interopRequireDefault(require(\"./sspi-token-parser\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst tokenParsers = {\n  [_token.TYPE.DONE]: _doneTokenParser.doneParser,\n  [_token.TYPE.DONEINPROC]: _doneTokenParser.doneInProcParser,\n  [_token.TYPE.DONEPROC]: _doneTokenParser.doneProcParser,\n  [_token.TYPE.ENVCHANGE]: _envChangeTokenParser.default,\n  [_token.TYPE.ERROR]: _infoerrorTokenParser.errorParser,\n  [_token.TYPE.FEDAUTHINFO]: _fedauthInfoParser.default,\n  [_token.TYPE.FEATUREEXTACK]: _featureExtAckParser.default,\n  [_token.TYPE.INFO]: _infoerrorTokenParser.infoParser,\n  [_token.TYPE.LOGINACK]: _loginackTokenParser.default,\n  [_token.TYPE.ORDER]: _orderTokenParser.default,\n  [_token.TYPE.RETURNSTATUS]: _returnstatusTokenParser.default,\n  [_token.TYPE.RETURNVALUE]: _returnvalueTokenParser.default,\n  [_token.TYPE.SSPI]: _sspiTokenParser.default\n};\nclass StreamBuffer {\n  constructor(iterable) {\n    this.iterator = void 0;\n    this.buffer = void 0;\n    this.position = void 0;\n    this.iterator = (iterable[Symbol.asyncIterator] || iterable[Symbol.iterator]).call(iterable);\n    this.buffer = Buffer.alloc(0);\n    this.position = 0;\n  }\n  async waitForChunk() {\n    const result = await this.iterator.next();\n    if (result.done) {\n      throw new Error('unexpected end of data');\n    }\n    if (this.position === this.buffer.length) {\n      this.buffer = result.value;\n    } else {\n      this.buffer = Buffer.concat([this.buffer.slice(this.position), result.value]);\n    }\n    this.position = 0;\n  }\n}\nclass Parser {\n  static parseTokens(iterable, debug, options) {\n    try {\n      let colMetadata = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n      return async function* () {\n        let token;\n        const onDoneParsing = t => {\n          token = t;\n        };\n        const streamBuffer = new StreamBuffer(iterable);\n        const parser = new Parser(streamBuffer, debug, options);\n        parser.colMetadata = colMetadata;\n        while (true) {\n          try {\n            await streamBuffer.waitForChunk();\n          } catch (err) {\n            if (streamBuffer.position === streamBuffer.buffer.length) {\n              return;\n            }\n            throw err;\n          }\n          if (parser.suspended) {\n            // Unsuspend and continue from where ever we left off.\n            parser.suspended = false;\n            const next = parser.next;\n            next(); // Check if a new token was parsed after unsuspension.\n\n            if (!parser.suspended && token) {\n              if (token instanceof _token.ColMetadataToken) {\n                parser.colMetadata = token.columns;\n              }\n              yield token;\n            }\n          }\n          while (!parser.suspended && parser.position + 1 <= parser.buffer.length) {\n            const type = parser.buffer.readUInt8(parser.position);\n            parser.position += 1;\n            if (type === _token.TYPE.COLMETADATA) {\n              const token = await (0, _colmetadataTokenParser.default)(parser);\n              parser.colMetadata = token.columns;\n              yield token;\n            } else if (type === _token.TYPE.ROW) {\n              yield (0, _rowTokenParser.default)(parser);\n            } else if (type === _token.TYPE.NBCROW) {\n              yield (0, _nbcrowTokenParser.default)(parser);\n            } else if (tokenParsers[type]) {\n              tokenParsers[type](parser, parser.options, onDoneParsing); // Check if a new token was parsed after unsuspension.\n\n              if (!parser.suspended && token) {\n                if (token instanceof _token.ColMetadataToken) {\n                  parser.colMetadata = token.columns;\n                }\n                yield token;\n              }\n            } else {\n              throw new Error('Unknown type: ' + type);\n            }\n          }\n        }\n      }();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  constructor(streamBuffer, debug, options) {\n    this.debug = void 0;\n    this.colMetadata = void 0;\n    this.options = void 0;\n    this.suspended = void 0;\n    this.next = void 0;\n    this.streamBuffer = void 0;\n    this.debug = debug;\n    this.colMetadata = [];\n    this.options = options;\n    this.streamBuffer = streamBuffer;\n    this.suspended = false;\n    this.next = undefined;\n  }\n  get buffer() {\n    return this.streamBuffer.buffer;\n  }\n  get position() {\n    return this.streamBuffer.position;\n  }\n  set position(value) {\n    this.streamBuffer.position = value;\n  }\n  suspend(next) {\n    this.suspended = true;\n    this.next = next;\n  }\n  awaitData(length, callback) {\n    if (this.position + length <= this.buffer.length) {\n      callback();\n    } else {\n      this.suspend(() => {\n        this.awaitData(length, callback);\n      });\n    }\n  }\n  readInt8(callback) {\n    this.awaitData(1, () => {\n      const data = this.buffer.readInt8(this.position);\n      this.position += 1;\n      callback(data);\n    });\n  }\n  readUInt8(callback) {\n    this.awaitData(1, () => {\n      const data = this.buffer.readUInt8(this.position);\n      this.position += 1;\n      callback(data);\n    });\n  }\n  readInt16LE(callback) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readInt16LE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n  readInt16BE(callback) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readInt16BE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n  readUInt16LE(callback) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readUInt16LE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n  readUInt16BE(callback) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readUInt16BE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n  readInt32LE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readInt32LE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readInt32BE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readInt32BE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readUInt32LE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readUInt32LE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readUInt32BE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readUInt32BE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readBigInt64LE(callback) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readBigInt64LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readInt64LE(callback) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readInt32LE(this.position + 4) + ((this.buffer[this.position + 4] & 0x80) === 0x80 ? 1 : -1) * this.buffer.readUInt32LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readInt64BE(callback) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readInt32BE(this.position) + ((this.buffer[this.position] & 0x80) === 0x80 ? 1 : -1) * this.buffer.readUInt32BE(this.position + 4);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readBigUInt64LE(callback) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readBigUInt64LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readUInt64LE(callback) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readUInt32LE(this.position + 4) + this.buffer.readUInt32LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readUInt64BE(callback) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readUInt32BE(this.position) + this.buffer.readUInt32BE(this.position + 4);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readFloatLE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readFloatLE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readFloatBE(callback) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readFloatBE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n  readDoubleLE(callback) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readDoubleLE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readDoubleBE(callback) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readDoubleBE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n  readUInt24LE(callback) {\n    this.awaitData(3, () => {\n      const low = this.buffer.readUInt16LE(this.position);\n      const high = this.buffer.readUInt8(this.position + 2);\n      this.position += 3;\n      callback(low | high << 16);\n    });\n  }\n  readUInt40LE(callback) {\n    this.awaitData(5, () => {\n      const low = this.buffer.readUInt32LE(this.position);\n      const high = this.buffer.readUInt8(this.position + 4);\n      this.position += 5;\n      callback(0x100000000 * high + low);\n    });\n  }\n  readUNumeric64LE(callback) {\n    this.awaitData(8, () => {\n      const low = this.buffer.readUInt32LE(this.position);\n      const high = this.buffer.readUInt32LE(this.position + 4);\n      this.position += 8;\n      callback(0x100000000 * high + low);\n    });\n  }\n  readUNumeric96LE(callback) {\n    this.awaitData(12, () => {\n      const dword1 = this.buffer.readUInt32LE(this.position);\n      const dword2 = this.buffer.readUInt32LE(this.position + 4);\n      const dword3 = this.buffer.readUInt32LE(this.position + 8);\n      this.position += 12;\n      callback(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3);\n    });\n  }\n  readUNumeric128LE(callback) {\n    this.awaitData(16, () => {\n      const dword1 = this.buffer.readUInt32LE(this.position);\n      const dword2 = this.buffer.readUInt32LE(this.position + 4);\n      const dword3 = this.buffer.readUInt32LE(this.position + 8);\n      const dword4 = this.buffer.readUInt32LE(this.position + 12);\n      this.position += 16;\n      callback(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3 + 0x100000000 * 0x100000000 * 0x100000000 * dword4);\n    });\n  } // Variable length data\n\n  readBuffer(length, callback) {\n    this.awaitData(length, () => {\n      const data = this.buffer.slice(this.position, this.position + length);\n      this.position += length;\n      callback(data);\n    });\n  } // Read a Unicode String (BVARCHAR)\n\n  readBVarChar(callback) {\n    this.readUInt8(length => {\n      this.readBuffer(length * 2, data => {\n        callback(data.toString('ucs2'));\n      });\n    });\n  } // Read a Unicode String (USVARCHAR)\n\n  readUsVarChar(callback) {\n    this.readUInt16LE(length => {\n      this.readBuffer(length * 2, data => {\n        callback(data.toString('ucs2'));\n      });\n    });\n  } // Read binary data (BVARBYTE)\n\n  readBVarByte(callback) {\n    this.readUInt8(length => {\n      this.readBuffer(length, callback);\n    });\n  } // Read binary data (USVARBYTE)\n\n  readUsVarByte(callback) {\n    this.readUInt16LE(length => {\n      this.readBuffer(length, callback);\n    });\n  }\n}\nvar _default = Parser;\nexports.default = _default;\nmodule.exports = Parser;","map":{"version":3,"names":["_token","require","_colmetadataTokenParser","_interopRequireDefault","_doneTokenParser","_envChangeTokenParser","_infoerrorTokenParser","_fedauthInfoParser","_featureExtAckParser","_loginackTokenParser","_orderTokenParser","_returnstatusTokenParser","_returnvalueTokenParser","_rowTokenParser","_nbcrowTokenParser","_sspiTokenParser","tokenParsers","TYPE","DONE","doneParser","DONEINPROC","doneInProcParser","DONEPROC","doneProcParser","ENVCHANGE","default","ERROR","errorParser","FEDAUTHINFO","FEATUREEXTACK","INFO","infoParser","LOGINACK","ORDER","RETURNSTATUS","RETURNVALUE","SSPI","StreamBuffer","constructor","iterable","iterator","buffer","position","Symbol","asyncIterator","call","Buffer","alloc","waitForChunk","result","next","done","Error","length","value","concat","slice","Parser","parseTokens","debug","options","colMetadata","arguments","undefined","token","onDoneParsing","t","streamBuffer","parser","err","suspended","ColMetadataToken","columns","type","readUInt8","COLMETADATA","ROW","NBCROW","e","Promise","reject","suspend","awaitData","callback","readInt8","data","readInt16LE","readInt16BE","readUInt16LE","readUInt16BE","readInt32LE","readInt32BE","readUInt32LE","readUInt32BE","readBigInt64LE","readInt64LE","Math","pow","readInt64BE","readBigUInt64LE","readUInt64LE","readUInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","readUInt24LE","low","high","readUInt40LE","readUNumeric64LE","readUNumeric96LE","dword1","dword2","dword3","readUNumeric128LE","dword4","readBuffer","readBVarChar","toString","readUsVarChar","readBVarByte","readUsVarByte","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/token/stream-parser.ts"],"sourcesContent":["import Debug from '../debug';\nimport { InternalConnectionOptions } from '../connection';\n\nimport { TYPE, Token, ColMetadataToken } from './token';\n\nimport colMetadataParser, { ColumnMetadata } from './colmetadata-token-parser';\nimport { doneParser, doneInProcParser, doneProcParser } from './done-token-parser';\nimport envChangeParser from './env-change-token-parser';\nimport { errorParser, infoParser } from './infoerror-token-parser';\nimport fedAuthInfoParser from './fedauth-info-parser';\nimport featureExtAckParser from './feature-ext-ack-parser';\nimport loginAckParser from './loginack-token-parser';\nimport orderParser from './order-token-parser';\nimport returnStatusParser from './returnstatus-token-parser';\nimport returnValueParser from './returnvalue-token-parser';\nimport rowParser from './row-token-parser';\nimport nbcRowParser from './nbcrow-token-parser';\nimport sspiParser from './sspi-token-parser';\n\nconst tokenParsers = {\n  [TYPE.DONE]: doneParser,\n  [TYPE.DONEINPROC]: doneInProcParser,\n  [TYPE.DONEPROC]: doneProcParser,\n  [TYPE.ENVCHANGE]: envChangeParser,\n  [TYPE.ERROR]: errorParser,\n  [TYPE.FEDAUTHINFO]: fedAuthInfoParser,\n  [TYPE.FEATUREEXTACK]: featureExtAckParser,\n  [TYPE.INFO]: infoParser,\n  [TYPE.LOGINACK]: loginAckParser,\n  [TYPE.ORDER]: orderParser,\n  [TYPE.RETURNSTATUS]: returnStatusParser,\n  [TYPE.RETURNVALUE]: returnValueParser,\n  [TYPE.SSPI]: sspiParser\n};\n\nexport type ParserOptions = Pick<InternalConnectionOptions, 'useUTC' | 'lowerCaseGuids' | 'tdsVersion' | 'useColumnNames' | 'columnNameReplacer' | 'camelCaseColumns'>;\n\nclass StreamBuffer {\n  iterator: AsyncIterator<Buffer, any, undefined> | Iterator<Buffer, any, undefined>;\n  buffer: Buffer;\n  position: number;\n\n  constructor(iterable: AsyncIterable<Buffer> | Iterable<Buffer>) {\n    this.iterator = ((iterable as AsyncIterable<Buffer>)[Symbol.asyncIterator] || (iterable as Iterable<Buffer>)[Symbol.iterator]).call(iterable);\n\n    this.buffer = Buffer.alloc(0);\n    this.position = 0;\n  }\n\n  async waitForChunk() {\n    const result = await this.iterator.next();\n    if (result.done) {\n      throw new Error('unexpected end of data');\n    }\n\n    if (this.position === this.buffer.length) {\n      this.buffer = result.value;\n    } else {\n      this.buffer = Buffer.concat([this.buffer.slice(this.position), result.value]);\n    }\n    this.position = 0;\n  }\n}\n\nclass Parser {\n  debug: Debug;\n  colMetadata: ColumnMetadata[];\n  options: ParserOptions;\n\n  suspended: boolean;\n  next: (() => void) | undefined;\n  streamBuffer: StreamBuffer;\n\n  static async *parseTokens(iterable: AsyncIterable<Buffer> | Iterable<Buffer>, debug: Debug, options: ParserOptions, colMetadata: ColumnMetadata[] = []) {\n    let token: Token | undefined;\n    const onDoneParsing = (t: Token | undefined) => { token = t; };\n\n    const streamBuffer = new StreamBuffer(iterable);\n\n    const parser = new Parser(streamBuffer, debug, options);\n    parser.colMetadata = colMetadata;\n\n    while (true) {\n      try {\n        await streamBuffer.waitForChunk();\n      } catch (err: unknown) {\n        if (streamBuffer.position === streamBuffer.buffer.length) {\n          return;\n        }\n\n        throw err;\n      }\n\n      if (parser.suspended) {\n        // Unsuspend and continue from where ever we left off.\n        parser.suspended = false;\n        const next = parser.next!;\n\n        next();\n\n        // Check if a new token was parsed after unsuspension.\n        if (!parser.suspended && token) {\n          if (token instanceof ColMetadataToken) {\n            parser.colMetadata = token.columns;\n          }\n\n          yield token;\n        }\n      }\n\n      while (!parser.suspended && parser.position + 1 <= parser.buffer.length) {\n        const type = parser.buffer.readUInt8(parser.position);\n\n        parser.position += 1;\n\n        if (type === TYPE.COLMETADATA) {\n          const token = await colMetadataParser(parser);\n          parser.colMetadata = token.columns;\n          yield token;\n        } else if (type === TYPE.ROW) {\n          yield rowParser(parser);\n        } else if (type === TYPE.NBCROW) {\n          yield nbcRowParser(parser);\n        } else if (tokenParsers[type]) {\n          tokenParsers[type](parser, parser.options, onDoneParsing);\n\n          // Check if a new token was parsed after unsuspension.\n          if (!parser.suspended && token) {\n            if (token instanceof ColMetadataToken) {\n              parser.colMetadata = token.columns;\n            }\n            yield token;\n          }\n        } else {\n          throw new Error('Unknown type: ' + type);\n        }\n      }\n    }\n  }\n\n  constructor(streamBuffer: StreamBuffer, debug: Debug, options: ParserOptions) {\n    this.debug = debug;\n    this.colMetadata = [];\n    this.options = options;\n\n    this.streamBuffer = streamBuffer;\n    this.suspended = false;\n    this.next = undefined;\n  }\n\n  get buffer() {\n    return this.streamBuffer.buffer;\n  }\n\n  get position() {\n    return this.streamBuffer.position;\n  }\n\n  set position(value) {\n    this.streamBuffer.position = value;\n  }\n\n  suspend(next: () => void) {\n    this.suspended = true;\n    this.next = next;\n  }\n\n  awaitData(length: number, callback: () => void) {\n    if (this.position + length <= this.buffer.length) {\n      callback();\n    } else {\n      this.suspend(() => {\n        this.awaitData(length, callback);\n      });\n    }\n  }\n\n  readInt8(callback: (data: number) => void) {\n    this.awaitData(1, () => {\n      const data = this.buffer.readInt8(this.position);\n      this.position += 1;\n      callback(data);\n    });\n  }\n\n  readUInt8(callback: (data: number) => void) {\n    this.awaitData(1, () => {\n      const data = this.buffer.readUInt8(this.position);\n      this.position += 1;\n      callback(data);\n    });\n  }\n\n  readInt16LE(callback: (data: number) => void) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readInt16LE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n\n  readInt16BE(callback: (data: number) => void) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readInt16BE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n\n  readUInt16LE(callback: (data: number) => void) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readUInt16LE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n\n  readUInt16BE(callback: (data: number) => void) {\n    this.awaitData(2, () => {\n      const data = this.buffer.readUInt16BE(this.position);\n      this.position += 2;\n      callback(data);\n    });\n  }\n\n  readInt32LE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readInt32LE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readInt32BE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readInt32BE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readUInt32LE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readUInt32LE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readUInt32BE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readUInt32BE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readBigInt64LE(callback: (data: bigint) => void) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readBigInt64LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readInt64LE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readInt32LE(this.position + 4) + ((this.buffer[this.position + 4] & 0x80) === 0x80 ? 1 : -1) * this.buffer.readUInt32LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readInt64BE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readInt32BE(this.position) + ((this.buffer[this.position] & 0x80) === 0x80 ? 1 : -1) * this.buffer.readUInt32BE(this.position + 4);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readBigUInt64LE(callback: (data: bigint) => void) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readBigUInt64LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readUInt64LE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readUInt32LE(this.position + 4) + this.buffer.readUInt32LE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readUInt64BE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = Math.pow(2, 32) * this.buffer.readUInt32BE(this.position) + this.buffer.readUInt32BE(this.position + 4);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readFloatLE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readFloatLE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readFloatBE(callback: (data: number) => void) {\n    this.awaitData(4, () => {\n      const data = this.buffer.readFloatBE(this.position);\n      this.position += 4;\n      callback(data);\n    });\n  }\n\n  readDoubleLE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readDoubleLE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readDoubleBE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const data = this.buffer.readDoubleBE(this.position);\n      this.position += 8;\n      callback(data);\n    });\n  }\n\n  readUInt24LE(callback: (data: number) => void) {\n    this.awaitData(3, () => {\n      const low = this.buffer.readUInt16LE(this.position);\n      const high = this.buffer.readUInt8(this.position + 2);\n\n      this.position += 3;\n\n      callback(low | (high << 16));\n    });\n  }\n\n  readUInt40LE(callback: (data: number) => void) {\n    this.awaitData(5, () => {\n      const low = this.buffer.readUInt32LE(this.position);\n      const high = this.buffer.readUInt8(this.position + 4);\n\n      this.position += 5;\n\n      callback((0x100000000 * high) + low);\n    });\n  }\n\n  readUNumeric64LE(callback: (data: number) => void) {\n    this.awaitData(8, () => {\n      const low = this.buffer.readUInt32LE(this.position);\n      const high = this.buffer.readUInt32LE(this.position + 4);\n\n      this.position += 8;\n\n      callback((0x100000000 * high) + low);\n    });\n  }\n\n  readUNumeric96LE(callback: (data: number) => void) {\n    this.awaitData(12, () => {\n      const dword1 = this.buffer.readUInt32LE(this.position);\n      const dword2 = this.buffer.readUInt32LE(this.position + 4);\n      const dword3 = this.buffer.readUInt32LE(this.position + 8);\n\n      this.position += 12;\n\n      callback(dword1 + (0x100000000 * dword2) + (0x100000000 * 0x100000000 * dword3));\n    });\n  }\n\n  readUNumeric128LE(callback: (data: number) => void) {\n    this.awaitData(16, () => {\n      const dword1 = this.buffer.readUInt32LE(this.position);\n      const dword2 = this.buffer.readUInt32LE(this.position + 4);\n      const dword3 = this.buffer.readUInt32LE(this.position + 8);\n      const dword4 = this.buffer.readUInt32LE(this.position + 12);\n\n      this.position += 16;\n\n      callback(dword1 + (0x100000000 * dword2) + (0x100000000 * 0x100000000 * dword3) + (0x100000000 * 0x100000000 * 0x100000000 * dword4));\n    });\n  }\n\n  // Variable length data\n\n  readBuffer(length: number, callback: (data: Buffer) => void) {\n    this.awaitData(length, () => {\n      const data = this.buffer.slice(this.position, this.position + length);\n      this.position += length;\n      callback(data);\n    });\n  }\n\n  // Read a Unicode String (BVARCHAR)\n  readBVarChar(callback: (data: string) => void) {\n    this.readUInt8((length) => {\n      this.readBuffer(length * 2, (data) => {\n        callback(data.toString('ucs2'));\n      });\n    });\n  }\n\n  // Read a Unicode String (USVARCHAR)\n  readUsVarChar(callback: (data: string) => void) {\n    this.readUInt16LE((length) => {\n      this.readBuffer(length * 2, (data) => {\n        callback(data.toString('ucs2'));\n      });\n    });\n  }\n\n  // Read binary data (BVARBYTE)\n  readBVarByte(callback: (data: Buffer) => void) {\n    this.readUInt8((length) => {\n      this.readBuffer(length, callback);\n    });\n  }\n\n  // Read binary data (USVARBYTE)\n  readUsVarByte(callback: (data: Buffer) => void) {\n    this.readUInt16LE((length) => {\n      this.readBuffer(length, callback);\n    });\n  }\n}\n\nexport default Parser;\nmodule.exports = Parser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}