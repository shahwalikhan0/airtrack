{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction isErrorResponse(errorResponse) {\n  return errorResponse && typeof errorResponse.error === \"string\" && typeof errorResponse.error_description === \"string\";\n}\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n}\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode, errorBody) {\n    let errorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\"\n    };\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\"\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\"\n      };\n    }\n    super(`${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`);\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse;\n    // Ensure that this type reports the correct name\n    this.name = AuthenticationErrorName;\n  }\n}\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n  constructor(errors, errorMessage) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors;\n    // Ensure that this type reports the correct name\n    this.name = AggregateAuthenticationErrorName;\n  }\n}\nfunction convertOAuthErrorResponseToErrorResponse(errorBody) {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id\n  };\n}\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n  constructor(\n  /**\n   * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n   */\n  options) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n}","map":{"version":3,"names":["isErrorResponse","errorResponse","error","error_description","CredentialUnavailableErrorName","CredentialUnavailableError","Error","constructor","message","name","AuthenticationErrorName","AuthenticationError","statusCode","errorBody","errorDescription","convertOAuthErrorResponseToErrorResponse","oauthErrorResponse","JSON","parse","e","AggregateAuthenticationErrorName","AggregateAuthenticationError","errors","errorMessage","errorDetail","join","correlationId","correlation_id","errorCodes","error_codes","timestamp","traceId","trace_id","AuthenticationRequiredError","options","scopes","getTokenOptions"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/identity/src/errors.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * See the official documentation for more details:\n *\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code#error-response-1\n *\n * NOTE: This documentation is for v1 OAuth support but the same error\n * response details still apply to v2.\n */\nexport interface ErrorResponse {\n  /**\n   * The string identifier for the error.\n   */\n  error: string;\n\n  /**\n   * The error's description.\n   */\n  errorDescription: string;\n\n  /**\n   * An array of codes pertaining to the error(s) that occurred.\n   */\n  errorCodes?: number[];\n\n  /**\n   * The timestamp at which the error occurred.\n   */\n  timestamp?: string;\n\n  /**\n   * The trace identifier for this error occurrence.\n   */\n  traceId?: string;\n\n  /**\n   * The correlation ID to be used for tracking the source of the error.\n   */\n  correlationId?: string;\n}\n\n/**\n * Used for internal deserialization of OAuth responses. Public model is ErrorResponse\n * @internal\n */\nexport interface OAuthErrorResponse {\n  error: string;\n  error_description: string;\n  error_codes?: number[];\n  timestamp?: string;\n  trace_id?: string;\n  correlation_id?: string;\n}\n\nfunction isErrorResponse(errorResponse: any): errorResponse is OAuthErrorResponse {\n  return (\n    errorResponse &&\n    typeof errorResponse.error === \"string\" &&\n    typeof errorResponse.error_description === \"string\"\n  );\n}\n\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n  /**\n   * The HTTP status code returned from the authentication request.\n   */\n  public readonly statusCode: number;\n\n  /**\n   * The error response details.\n   */\n  public readonly errorResponse: ErrorResponse;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode: number, errorBody: object | string | undefined | null) {\n    let errorResponse: ErrorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\",\n    };\n\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse: OAuthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e: any) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\",\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\",\n      };\n    }\n\n    super(\n      `${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`\n    );\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse;\n\n    // Ensure that this type reports the correct name\n    this.name = AuthenticationErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n  /**\n   * The array of error objects that were thrown while trying to authenticate\n   * with the credentials in a {@link ChainedTokenCredential}.\n   */\n  public errors: any[];\n\n  constructor(errors: any[], errorMessage?: string) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors;\n\n    // Ensure that this type reports the correct name\n    this.name = AggregateAuthenticationErrorName;\n  }\n}\n\nfunction convertOAuthErrorResponseToErrorResponse(errorBody: OAuthErrorResponse): ErrorResponse {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id,\n  };\n}\n\n/**\n * Optional parameters to the {@link AuthenticationRequiredError}\n */\nexport interface AuthenticationRequiredErrorOptions {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  getTokenOptions?: GetTokenOptions;\n  /**\n   * The message of the error.\n   */\n  message?: string;\n}\n\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  public scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  public getTokenOptions?: GetTokenOptions;\n\n  constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options: AuthenticationRequiredErrorOptions\n  ) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}