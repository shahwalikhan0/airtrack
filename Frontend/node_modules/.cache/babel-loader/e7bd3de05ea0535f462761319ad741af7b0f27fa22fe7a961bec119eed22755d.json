{"ast":null,"code":"'use strict';\n\nvar shared = require('./shared');\nvar globalConnection = null;\nvar globalConnectionHandlers = {};\n\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */\n\nfunction connect(config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config);\n    for (var event in globalConnectionHandlers) {\n      for (var i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i]);\n      }\n    }\n    var ogClose = globalConnection.close;\n    var globalClose = function globalClose(callback) {\n      var _this = this;\n      // remove event handlers from the global connection\n      for (var _event in globalConnectionHandlers) {\n        for (var _i = 0, _l = globalConnectionHandlers[_event].length; _i < _l; _i++) {\n          this.removeListener(_event, globalConnectionHandlers[_event][_i]);\n        }\n      }\n\n      // attach error handler to prevent process crash in case of error\n      this.on('error', function (err) {\n        if (globalConnectionHandlers.error) {\n          for (var _i2 = 0, _l2 = globalConnectionHandlers.error.length; _i2 < _l2; _i2++) {\n            globalConnectionHandlers.error[_i2].call(_this, err);\n          }\n        }\n      });\n      globalConnection = null;\n      return ogClose.call(this, callback);\n    };\n    globalConnection.close = globalClose.bind(globalConnection);\n  }\n  if (typeof callback === 'function') {\n    return globalConnection.connect(function (err, connection) {\n      if (err) {\n        globalConnection = null;\n      }\n      callback(err, connection);\n    });\n  }\n  return globalConnection.connect().catch(function (err) {\n    globalConnection = null;\n    return shared.Promise.reject(err);\n  });\n}\n\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */\n\nfunction close(callback) {\n  if (globalConnection) {\n    var gc = globalConnection;\n    globalConnection = null;\n    return gc.close(callback);\n  }\n  if (typeof callback === 'function') {\n    setImmediate(callback);\n    return null;\n  }\n  return new shared.Promise(function (resolve) {\n    resolve(globalConnection);\n  });\n}\n\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction on(event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = [];\n  globalConnectionHandlers[event].push(handler);\n  if (globalConnection) globalConnection.on(event, handler);\n  return globalConnection;\n}\n\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction removeListener(event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection;\n  var index = globalConnectionHandlers[event].indexOf(handler);\n  if (index === -1) return globalConnection;\n  globalConnectionHandlers[event].splice(index, 1);\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined;\n  if (globalConnection) globalConnection.removeListener(event, handler);\n  return globalConnection;\n}\n\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction query() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().query(arguments[0], arguments[1]);\n  }\n  var values = Array.prototype.slice.call(arguments);\n  var strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'query');\n}\n\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction batch() {\n  if (typeof arguments[0] === 'string') {\n    return new shared.driver.Request().batch(arguments[0], arguments[1]);\n  }\n  var values = Array.prototype.slice.call(arguments);\n  var strings = values.shift();\n  return new shared.driver.Request()._template(strings, values, 'batch');\n}\nmodule.exports = {\n  batch: batch,\n  close: close,\n  connect: connect,\n  off: removeListener,\n  on: on,\n  query: query,\n  removeListener: removeListener\n};\nObject.defineProperty(module.exports, 'pool', {\n  get: function get() {\n    return globalConnection;\n  },\n  set: function set() {}\n});","map":{"version":3,"names":["shared","require","globalConnection","globalConnectionHandlers","connect","config","callback","driver","ConnectionPool","event","i","l","length","on","ogClose","close","globalClose","_this","removeListener","err","error","call","bind","connection","catch","Promise","reject","gc","setImmediate","resolve","handler","push","index","indexOf","splice","undefined","query","arguments","Request","values","Array","prototype","slice","strings","shift","_template","batch","module","exports","off","Object","defineProperty","get","set"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/global-connection.js"],"sourcesContent":["'use strict'\n\nconst shared = require('./shared')\n\nlet globalConnection = null\nconst globalConnectionHandlers = {}\n\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */\n\nfunction connect (config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config)\n\n    for (const event in globalConnectionHandlers) {\n      for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i])\n      }\n    }\n\n    const ogClose = globalConnection.close\n\n    const globalClose = function (callback) {\n      // remove event handlers from the global connection\n      for (const event in globalConnectionHandlers) {\n        for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n          this.removeListener(event, globalConnectionHandlers[event][i])\n        }\n      }\n\n      // attach error handler to prevent process crash in case of error\n      this.on('error', err => {\n        if (globalConnectionHandlers.error) {\n          for (let i = 0, l = globalConnectionHandlers.error.length; i < l; i++) {\n            globalConnectionHandlers.error[i].call(this, err)\n          }\n        }\n      })\n\n      globalConnection = null\n      return ogClose.call(this, callback)\n    }\n\n    globalConnection.close = globalClose.bind(globalConnection)\n  }\n  if (typeof callback === 'function') {\n    return globalConnection.connect((err, connection) => {\n      if (err) {\n        globalConnection = null\n      }\n      callback(err, connection)\n    })\n  }\n  return globalConnection.connect().catch((err) => {\n    globalConnection = null\n    return shared.Promise.reject(err)\n  })\n}\n\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */\n\nfunction close (callback) {\n  if (globalConnection) {\n    const gc = globalConnection\n    globalConnection = null\n    return gc.close(callback)\n  }\n\n  if (typeof callback === 'function') {\n    setImmediate(callback)\n    return null\n  }\n\n  return new shared.Promise((resolve) => {\n    resolve(globalConnection)\n  })\n}\n\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction on (event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = []\n  globalConnectionHandlers[event].push(handler)\n\n  if (globalConnection) globalConnection.on(event, handler)\n  return globalConnection\n}\n\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction removeListener (event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection\n  const index = globalConnectionHandlers[event].indexOf(handler)\n  if (index === -1) return globalConnection\n  globalConnectionHandlers[event].splice(index, 1)\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined\n\n  if (globalConnection) globalConnection.removeListener(event, handler)\n  return globalConnection\n}\n\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction query () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().query(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'query')\n}\n\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction batch () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().batch(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'batch')\n}\n\nmodule.exports = {\n  batch,\n  close,\n  connect,\n  off: removeListener,\n  on,\n  query,\n  removeListener\n}\n\nObject.defineProperty(module.exports, 'pool', {\n  get: () => {\n    return globalConnection\n  },\n  set: () => {}\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}