{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential {\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(options) {\n    if (!(options === null || options === void 0 ? void 0 : options.clientId)) {\n      const error = new Error(\"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\");\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    const browserOptions = options;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(`Invalid loginStyle: ${browserOptions.loginStyle}. Should be any of the following: ${loginStyles.join(\", \")}.`);\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n    const msalOptions = Object.assign(Object.assign({}, options), {\n      logger,\n      loginStyle: loginStyle,\n      redirectUri: typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri\n    });\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options === null || options === void 0 ? void 0 : options.disableAutomaticAuthentication;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return tracingClient.withSpan(`${this.constructor.name}.getToken`, options, async newOptions => {\n      const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n      return this.msalFlow.getToken(arrayScopes, Object.assign(Object.assign({}, newOptions), {\n        disableAutomaticAuthentication: this.disableAutomaticAuthentication\n      }));\n    });\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(scopes) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return tracingClient.withSpan(`${this.constructor.name}.authenticate`, options, async newOptions => {\n      const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n      await this.msalFlow.getToken(arrayScopes, newOptions);\n      return this.msalFlow.getActiveAccount();\n    });\n  }\n}","map":{"version":3,"names":["credentialLogger","formatError","tracingClient","MSALAuthCode","logger","InteractiveBrowserCredential","constructor","options","clientId","error","Error","info","browserOptions","loginStyle","loginStyles","indexOf","join","msalOptions","Object","assign","redirectUri","msalFlow","disableAutomaticAuthentication","getToken","scopes","arguments","length","undefined","withSpan","name","newOptions","arrayScopes","Array","isArray","authenticate","getActiveAccount"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/identity/src/credentials/interactiveBrowserCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\n\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\nimport { MsalFlow } from \"../msal/flows\";\nimport { AuthenticationRecord } from \"../msal/types\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { MsalBrowserFlowOptions } from \"../msal/browserFlows/msalBrowserCommon\";\nimport {\n  InteractiveBrowserCredentialInBrowserOptions,\n  InteractiveBrowserCredentialNodeOptions,\n} from \"./interactiveBrowserCredentialOptions\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private msalFlow: MsalFlow;\n  private disableAutomaticAuthentication?: boolean;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the AAD Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    options: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions\n  ) {\n    if (!options?.clientId) {\n      const error = new Error(\n        \"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\"\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const browserOptions = options as InteractiveBrowserCredentialInBrowserOptions;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(\n        `Invalid loginStyle: ${\n          browserOptions.loginStyle\n        }. Should be any of the following: ${loginStyles.join(\", \")}.`\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions: MsalBrowserFlowOptions = {\n      ...options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri:\n        typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri,\n    };\n\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        return this.msalFlow.getToken(arrayScopes, {\n          ...newOptions,\n          disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n        });\n      }\n    );\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AuthenticationRecord | undefined> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.authenticate`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        await this.msalFlow.getToken(arrayScopes, newOptions);\n        return this.msalFlow.getActiveAccount();\n      }\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}