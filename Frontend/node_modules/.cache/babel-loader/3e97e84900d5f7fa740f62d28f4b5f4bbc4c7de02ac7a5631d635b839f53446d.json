{"ast":null,"code":"'use strict';\n\nconst ConnectionPool = require('./connection-pool');\nconst PreparedStatement = require('./prepared-statement');\nconst Request = require('./request');\nconst Transaction = require('./transaction');\nconst {\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError\n} = require('../error');\nconst shared = require('../shared');\nconst Table = require('../table');\nconst ISOLATION_LEVEL = require('../isolationlevel');\nconst {\n  TYPES\n} = require('../datatypes');\nconst {\n  connect,\n  close,\n  on,\n  off,\n  removeListener,\n  query,\n  batch\n} = require('../global-connection');\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535,\n    // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n};\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise;\n  },\n  set: value => {\n    shared.Promise = value;\n  }\n});\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n});\nfor (const key in TYPES) {\n  const value = TYPES[key];\n  module.exports.exports[key] = value;\n  module.exports.exports[key.toUpperCase()] = value;\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */","map":{"version":3,"names":["ConnectionPool","require","PreparedStatement","Request","Transaction","ConnectionError","TransactionError","RequestError","PreparedStatementError","MSSQLError","shared","Table","ISOLATION_LEVEL","TYPES","connect","close","on","off","removeListener","query","batch","module","exports","driver","MAX","map","getTypeByValue","Object","defineProperty","enumerable","get","Promise","set","value","valueHandler","writable","configurable","key","toUpperCase"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/index.js"],"sourcesContent":["'use strict'\n\nconst ConnectionPool = require('./connection-pool')\nconst PreparedStatement = require('./prepared-statement')\nconst Request = require('./request')\nconst Transaction = require('./transaction')\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = require('../error')\nconst shared = require('../shared')\nconst Table = require('../table')\nconst ISOLATION_LEVEL = require('../isolationlevel')\nconst { TYPES } = require('../datatypes')\nconst { connect, close, on, off, removeListener, query, batch } = require('../global-connection')\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535, // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise\n  },\n  set: (value) => {\n    shared.Promise = value\n  }\n})\n\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n})\n\nfor (const key in TYPES) {\n  const value = TYPES[key]\n  module.exports.exports[key] = value\n  module.exports.exports[key.toUpperCase()] = value\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACzD,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;AACpC,MAAMG,WAAW,GAAGH,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAM;EAAEI,eAAe;EAAEC,gBAAgB;EAAEC,YAAY;EAAEC,sBAAsB;EAAEC;AAAW,CAAC,GAAGR,OAAO,CAAC,UAAU,CAAC;AACnH,MAAMS,MAAM,GAAGT,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMU,KAAK,GAAGV,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMW,eAAe,GAAGX,OAAO,CAAC,mBAAmB,CAAC;AACpD,MAAM;EAAEY;AAAM,CAAC,GAAGZ,OAAO,CAAC,cAAc,CAAC;AACzC,MAAM;EAAEa,OAAO;EAAEC,KAAK;EAAEC,EAAE;EAAEC,GAAG;EAAEC,cAAc;EAAEC,KAAK;EAAEC;AAAM,CAAC,GAAGnB,OAAO,CAAC,sBAAsB,CAAC;AAEjGoB,MAAM,CAACC,OAAO,GAAG;EACftB,cAAc;EACdI,WAAW;EACXD,OAAO;EACPD,iBAAiB;EACjBG,eAAe;EACfC,gBAAgB;EAChBC,YAAY;EACZC,sBAAsB;EACtBC,UAAU;EACVc,MAAM,EAAEb,MAAM,CAACa,MAAM;EACrBD,OAAO,EAAE;IACPjB,eAAe;IACfC,gBAAgB;IAChBC,YAAY;IACZC,sBAAsB;IACtBC,UAAU;IACVE,KAAK;IACLC,eAAe;IACfC,KAAK;IACLW,GAAG,EAAE,KAAK;IAAE;IACZC,GAAG,EAAEf,MAAM,CAACe,GAAG;IACfC,cAAc,EAAEhB,MAAM,CAACgB,cAAc;IACrCZ,OAAO;IACPC,KAAK;IACLC,EAAE;IACFE,cAAc;IACdD,GAAG;IACHE,KAAK;IACLC;EACF;AACF,CAAC;AAEDO,MAAM,CAACC,cAAc,CAACP,MAAM,CAACC,OAAO,EAAE,SAAS,EAAE;EAC/CO,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAEA,CAAA,KAAM;IACT,OAAOpB,MAAM,CAACqB,OAAO;EACvB,CAAC;EACDC,GAAG,EAAGC,KAAK,IAAK;IACdvB,MAAM,CAACqB,OAAO,GAAGE,KAAK;EACxB;AACF,CAAC,CAAC;AAEFN,MAAM,CAACC,cAAc,CAACP,MAAM,CAACC,OAAO,EAAE,cAAc,EAAE;EACpDO,UAAU,EAAE,IAAI;EAChBI,KAAK,EAAEvB,MAAM,CAACwB,YAAY;EAC1BC,QAAQ,EAAE,KAAK;EACfC,YAAY,EAAE;AAChB,CAAC,CAAC;AAEF,KAAK,MAAMC,GAAG,IAAIxB,KAAK,EAAE;EACvB,MAAMoB,KAAK,GAAGpB,KAAK,CAACwB,GAAG,CAAC;EACxBhB,MAAM,CAACC,OAAO,CAACA,OAAO,CAACe,GAAG,CAAC,GAAGJ,KAAK;EACnCZ,MAAM,CAACC,OAAO,CAACA,OAAO,CAACe,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGL,KAAK;AACnD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}