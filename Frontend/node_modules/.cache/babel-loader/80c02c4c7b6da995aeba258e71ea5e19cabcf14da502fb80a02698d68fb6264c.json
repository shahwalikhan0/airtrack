{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TYPE = exports.Packet = exports.OFFSET = exports.HEADER_LENGTH = void 0;\nexports.isPacketComplete = isPacketComplete;\nexports.packetLength = packetLength;\nvar _sprintfJs = require(\"sprintf-js\");\nconst HEADER_LENGTH = 8;\nexports.HEADER_LENGTH = HEADER_LENGTH;\nconst TYPE = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\nexports.TYPE = TYPE;\nconst typeByValue = {};\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\nconst STATUS = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\nconst OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\nexports.OFFSET = OFFSET;\nconst DEFAULT_SPID = 0;\nconst DEFAULT_PACKETID = 1;\nconst DEFAULT_WINDOW = 0;\nconst NL = '\\n';\nclass Packet {\n  constructor(typeOrBuffer) {\n    this.buffer = void 0;\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n  resetConnection(reset) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n  last(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n    return this.isLast();\n  }\n  ignore(last) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n  packetId(packetId) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n  addData(data) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n    for (const name in STATUS) {\n      const value = STATUS[name];\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n    return statuses.join(' ').trim();\n  }\n  headerToString() {\n    let indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const text = (0, _sprintfJs.sprintf)('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n  dataToString() {\n    let indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n    let dataDump = '';\n    let chars = '';\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += (0, _sprintfJs.sprintf)('%04X  ', offset);\n      }\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n        if ((offset + 1) % CHARS_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n      if (data[offset] != null) {\n        dataDump += (0, _sprintfJs.sprintf)('%02X', data[offset]);\n      }\n      if ((offset + 1) % BYTES_PER_GROUP === 0 && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n    return dataDump;\n  }\n  toString() {\n    let indent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n  payloadString() {\n    return '';\n  }\n}\nexports.Packet = Packet;\nfunction isPacketComplete(potentialPacketBuffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\nfunction packetLength(potentialPacketBuffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}","map":{"version":3,"names":["_sprintfJs","require","HEADER_LENGTH","TYPE","SQL_BATCH","RPC_REQUEST","TABULAR_RESULT","ATTENTION","BULK_LOAD","TRANSACTION_MANAGER","LOGIN7","NTLMAUTH_PKT","PRELOGIN","FEDAUTH_TOKEN","typeByValue","name","STATUS","NORMAL","EOM","IGNORE","RESETCONNECTION","RESETCONNECTIONSKIPTRAN","OFFSET","Type","Status","Length","SPID","PacketID","Window","DEFAULT_SPID","DEFAULT_PACKETID","DEFAULT_WINDOW","NL","Packet","constructor","typeOrBuffer","buffer","Buffer","type","alloc","writeUInt8","writeUInt16BE","setLength","length","readUInt16BE","resetConnection","reset","status","readUInt8","last","arguments","isLast","ignore","packetId","addData","data","concat","slice","statusAsString","statuses","value","push","undefined","join","trim","headerToString","indent","text","sprintf","dataToString","BYTES_PER_GROUP","CHARS_PER_GROUP","BYTES_PER_LINE","dataDump","chars","offset","String","fromCharCode","toString","payloadString","isPacketComplete","potentialPacketBuffer","packetLength"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/packet.ts"],"sourcesContent":["import { sprintf } from 'sprintf-js';\n\nexport const HEADER_LENGTH = 8;\n\nexport const TYPE: { [key: string]: number } = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\n\nconst typeByValue: { [key: number]: string } = {};\n\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\n\nconst STATUS: { [key: string]: number } = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\n\nexport const OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\n\nconst DEFAULT_SPID = 0;\n\nconst DEFAULT_PACKETID = 1;\n\nconst DEFAULT_WINDOW = 0;\n\nconst NL = '\\n';\n\nexport class Packet {\n  buffer: Buffer;\n\n  constructor(typeOrBuffer: Buffer | number) {\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n\n  resetConnection(reset: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  last(last?: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n    return this.isLast();\n  }\n\n  ignore(last: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n\n  packetId(packetId?: number) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n\n  addData(data: Buffer) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n\n    for (const name in STATUS) {\n      const value = STATUS[name];\n\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n\n    return statuses.join(' ').trim();\n  }\n\n  headerToString(indent = '') {\n    const text = sprintf('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n\n  dataToString(indent = '') {\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n\n    let dataDump = '';\n    let chars = '';\n\n\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += sprintf('%04X  ', offset);\n      }\n\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n        if (((offset + 1) % CHARS_PER_GROUP === 0) && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n\n      if (data[offset] != null) {\n        dataDump += sprintf('%02X', data[offset]);\n      }\n\n      if (((offset + 1) % BYTES_PER_GROUP === 0) && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n\n    return dataDump;\n  }\n\n  toString(indent = '') {\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n\n  payloadString() {\n    return '';\n  }\n}\n\nexport function isPacketComplete(potentialPacketBuffer: Buffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\n\nexport function packetLength(potentialPacketBuffer: Buffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}