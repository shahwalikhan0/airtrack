{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _errors = require(\"./errors\");\nvar _types = require(\"./always-encrypted/types\");\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(event, listener) {\n    return super.on(event, listener);\n  }\n  /**\n   * @private\n   */\n\n  emit(event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return super.emit(event, ...args);\n  }\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n\n  constructor(sqlTextOrProcedure, callback, options) {\n    super();\n    this.sqlTextOrProcedure = void 0;\n    this.parameters = void 0;\n    this.parametersByName = void 0;\n    this.preparing = void 0;\n    this.canceled = void 0;\n    this.paused = void 0;\n    this.userCallback = void 0;\n    this.handle = void 0;\n    this.error = void 0;\n    this.connection = void 0;\n    this.timeout = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.callback = void 0;\n    this.shouldHonorAE = void 0;\n    this.statementColumnEncryptionSetting = void 0;\n    this.cryptoMetadataLoaded = void 0;\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = options && options.statementColumnEncryptionSetting || _types.SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n    this.callback = function (err, rowCount, rows) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n\n  addParameter(name, type, value, options) {\n    const {\n      output = false,\n      length,\n      precision,\n      scale\n    } = options ?? {};\n    const parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n\n  addOutputParameter(name, type, value, options) {\n    this.addParameter(name, type, value, {\n      ...options,\n      output: true\n    });\n  }\n  /**\n   * @private\n   */\n\n  makeParamsParameter(parameters) {\n    let paramsParameter = '';\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n    return paramsParameter;\n  }\n  /**\n   * @private\n   */\n\n  validateParameters(collation) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error) {\n        throw new _errors.RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    this.emit('pause');\n    this.paused = true;\n  }\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.emit('resume');\n  }\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n    this.canceled = true;\n    this.emit('cancel');\n  }\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n}\nvar _default = Request;\nexports.default = _default;\nmodule.exports = Request;","map":{"version":3,"names":["_events","require","_errors","_types","Request","EventEmitter","on","event","listener","emit","_len","arguments","length","args","Array","_key","constructor","sqlTextOrProcedure","callback","options","parameters","parametersByName","preparing","canceled","paused","userCallback","handle","error","connection","timeout","rows","rst","rowCount","shouldHonorAE","statementColumnEncryptionSetting","cryptoMetadataLoaded","undefined","SQLServerStatementColumnEncryptionSetting","UseConnectionSetting","err","addParameter","name","type","value","output","precision","scale","parameter","push","addOutputParameter","makeParamsParameter","paramsParameter","i","len","declaration","validateParameters","collation","validate","RequestError","message","pause","resume","cancel","setTimeout","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/request.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { Parameter, DataType } from './data-type';\nimport { RequestError } from './errors';\n\nimport Connection from './connection';\nimport { Metadata } from './metadata-parser';\nimport { SQLServerStatementColumnEncryptionSetting } from './always-encrypted/types';\nimport { ColumnMetadata } from './token/colmetadata-token-parser';\nimport { Collation } from './collation';\n\n/**\n * The callback is called when the request has completed, either successfully or with an error.\n * If an error occurs during execution of the statement(s), then `err` will describe the error.\n *\n * As only one request at a time may be executed on a connection, another request should not\n * be initiated until this callback is called.\n *\n * This callback is called before `requestCompleted` is emitted.\n */\ntype CompletionCallback =\n  /**\n   * @param error\n   *   If an error occured, an error object.\n   *\n   * @param rowCount\n   *   The number of rows emitted as result of executing the SQL statement.\n   *\n   * @param rows\n   *   Rows as a result of executing the SQL statement.\n   *   Will only be available if [[ConnectionOptions.rowCollectionOnRequestCompletion]] is `true`.\n   */\n  // TODO: Figure out how to type the `rows` parameter here.\n  (error: Error | null | undefined, rowCount?: number, rows?: any) => void;\n\nexport interface ParameterOptions {\n  output?: boolean;\n  length?: number;\n  precision?: number;\n  scale?: number;\n}\n\ninterface RequestOptions {\n  statementColumnEncryptionSetting?: SQLServerStatementColumnEncryptionSetting;\n}\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends EventEmitter {\n  /**\n   * @private\n   */\n  sqlTextOrProcedure: string | undefined;\n  /**\n   * @private\n   */\n  parameters: Parameter[];\n  /**\n   * @private\n   */\n  parametersByName: { [key: string]: Parameter };\n  /**\n   * @private\n   */\n  preparing: boolean;\n  /**\n   * @private\n   */\n  canceled: boolean;\n  /**\n   * @private\n   */\n  paused: boolean;\n  /**\n   * @private\n   */\n  userCallback: CompletionCallback;\n  /**\n   * @private\n   */\n  handle: number | undefined;\n  /**\n   * @private\n   */\n  error: Error | undefined;\n  /**\n   * @private\n   */\n  connection: Connection | undefined;\n  /**\n   * @private\n   */\n  timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  rows?: Array<any>;\n  /**\n   * @private\n   */\n  rst?: Array<any>;\n  /**\n   * @private\n   */\n  rowCount?: number;\n\n  /**\n   * @private\n   */\n  callback: CompletionCallback;\n\n\n  shouldHonorAE?: boolean;\n  statementColumnEncryptionSetting: SQLServerStatementColumnEncryptionSetting;\n  cryptoMetadataLoaded: boolean;\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emited multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n  on(\n    event: 'columnMetadata',\n    listener:\n    (columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }) => void\n  ): this\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n  on(event: 'prepared', listener: () => void): this\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n  on(\n    event: 'row',\n    listener:\n      /**\n       * An array or object (depends on [[ConnectionOptions.useColumnNames]]), where the columns can be accessed by index/name.\n       * Each column has two properties, `metadata` and `value`：\n       *\n       * * `metadata`\n       *\n       *    The same data that is exposed in the `columnMetadata` event.\n       *\n       * * `value`\n       *\n       *    The column's value. It will be `null` for a `NULL`.\n       *    If there are multiple columns with the same name, then this will be an array of the values.\n       */\n      (columns: any) => void\n  ): this\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emited for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n  on(\n    event: 'done',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneInProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be avaiable if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]) => void\n  ): this\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n  on(\n    event: 'returnValue',\n    listener:\n      /**\n       * @param parameterName\n       *   The parameter name. (Does not start with '@'.)\n       *\n       * @param value\n       *   The parameter's output value.\n       *\n       * @param metadata\n       *   The same data that is exposed in the `columnMetaData` event.\n       */\n      (parameterName: string, value: unknown, metadata: Metadata) => void\n  ): this\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(\n    event: 'order',\n    listener:\n      /**\n       * @param orderColumns\n       *   An array of column numbers in the result set by which data is ordered.\n       */\n      (orderColumns: number[]) => void\n  ): this\n\n  on(event: 'requestCompleted', listener: () => void): this\n\n  on(event: 'cancel', listener: () => void): this\n\n  on(event: 'pause', listener: () => void): this\n\n  on(event: 'resume', listener: () => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'columnMetadata', columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }): boolean\n  /**\n   * @private\n   */\n  emit(event: 'prepared'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', err: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'row', columns: any): boolean\n  /**\n   * @private\n   */\n  emit(event: 'done', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneInProc', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneProc', rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'returnValue', parameterName: string, value: unknown, metadata: Metadata): boolean\n  /**\n   * @private\n   */\n  emit(event: 'requestCompleted'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'cancel'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'pause'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resume'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'order', orderColumns: number[]): boolean\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n  constructor(sqlTextOrProcedure: string | undefined, callback: CompletionCallback, options?: RequestOptions) {\n    super();\n\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = (options && options.statementColumnEncryptionSetting) || SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n    this.callback = function(err: Error | undefined | null, rowCount?: number, rows?: any) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n  addParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    const { output = false, length, precision, scale } = options ?? {};\n\n    const parameter: Parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  addOutputParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    this.addParameter(name, type, value, { ...options, output: true });\n  }\n\n  /**\n   * @private\n   */\n  makeParamsParameter(parameters: Parameter[]) {\n    let paramsParameter = '';\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n    return paramsParameter;\n  }\n\n  /**\n   * @private\n   */\n  validateParameters(collation: Collation | undefined) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error: any) {\n        throw new RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    this.emit('pause');\n    this.paused = true;\n  }\n\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.emit('resume');\n  }\n\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n}\n\nexport default Request;\nmodule.exports = Request;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}