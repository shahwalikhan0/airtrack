{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _valueParser = _interopRequireDefault(require(\"../value-parser\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// s2.2.7.13 (introduced in TDS 7.3.B)\nfunction nullHandler(_parser, _columnMetadata, _options, callback) {\n  callback(null);\n}\nasync function nbcRowParser(parser) {\n  const colMetadata = parser.colMetadata;\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\n  const columns = [];\n  const bitmap = [];\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\n    await parser.streamBuffer.waitForChunk();\n  }\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n  parser.position += bitmapByteLength;\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    const byte = bytes[i];\n    bitmap.push(byte & 0b1 ? true : false);\n    bitmap.push(byte & 0b10 ? true : false);\n    bitmap.push(byte & 0b100 ? true : false);\n    bitmap.push(byte & 0b1000 ? true : false);\n    bitmap.push(byte & 0b10000 ? true : false);\n    bitmap.push(byte & 0b100000 ? true : false);\n    bitmap.push(byte & 0b1000000 ? true : false);\n    bitmap.push(byte & 0b10000000 ? true : false);\n  }\n  for (let i = 0; i < colMetadata.length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    (bitmap[i] ? nullHandler : _valueParser.default)(parser, currColMetadata, parser.options, v => {\n      value = v;\n    });\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n  if (parser.options.useColumnNames) {\n    const columnsMap = {};\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.NBCRowToken(columnsMap);\n  } else {\n    return new _token.NBCRowToken(columns);\n  }\n}\nvar _default = nbcRowParser;\nexports.default = _default;\nmodule.exports = nbcRowParser;","map":{"version":3,"names":["_token","require","_valueParser","_interopRequireDefault","nullHandler","_parser","_columnMetadata","_options","callback","nbcRowParser","parser","colMetadata","bitmapByteLength","Math","ceil","length","columns","bitmap","buffer","position","streamBuffer","waitForChunk","bytes","slice","i","len","byte","push","currColMetadata","value","default","options","v","suspended","next","metadata","useColumnNames","columnsMap","forEach","column","colName","NBCRowToken","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/token/nbcrow-token-parser.ts"],"sourcesContent":["// s2.2.7.13 (introduced in TDS 7.3.B)\n\nimport Parser, { ParserOptions } from './stream-parser';\nimport { ColumnMetadata } from './colmetadata-token-parser';\n\nimport { NBCRowToken } from './token';\n\nimport valueParse from '../value-parser';\n\nfunction nullHandler(_parser: Parser, _columnMetadata: ColumnMetadata, _options: ParserOptions, callback: (value: unknown) => void) {\n  callback(null);\n}\n\ninterface Column {\n  value: unknown;\n  metadata: ColumnMetadata;\n}\n\nasync function nbcRowParser(parser: Parser): Promise<NBCRowToken> {\n  const colMetadata = parser.colMetadata;\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\n  const columns: Column[] = [];\n  const bitmap: boolean[] = [];\n\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\n    await parser.streamBuffer.waitForChunk();\n  }\n\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n  parser.position += bitmapByteLength;\n\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    const byte = bytes[i];\n\n    bitmap.push(byte & 0b1 ? true : false);\n    bitmap.push(byte & 0b10 ? true : false);\n    bitmap.push(byte & 0b100 ? true : false);\n    bitmap.push(byte & 0b1000 ? true : false);\n    bitmap.push(byte & 0b10000 ? true : false);\n    bitmap.push(byte & 0b100000 ? true : false);\n    bitmap.push(byte & 0b1000000 ? true : false);\n    bitmap.push(byte & 0b10000000 ? true : false);\n  }\n\n  for (let i = 0; i < colMetadata.length; i++) {\n    const currColMetadata = colMetadata[i];\n    let value;\n    (bitmap[i] ? nullHandler : valueParse)(parser, currColMetadata, parser.options, (v) => {\n      value = v;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n\n      parser.suspended = false;\n      const next = parser.next!;\n\n      next();\n    }\n    columns.push({\n      value,\n      metadata: currColMetadata\n    });\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap: { [key: string]: Column } = {};\n\n    columns.forEach((column) => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n\n    return new NBCRowToken(columnsMap);\n  } else {\n    return new NBCRowToken(columns);\n  }\n}\n\nexport default nbcRowParser;\nmodule.exports = nbcRowParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}