{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _metadataParser = _interopRequireDefault(require(\"../metadata-parser\"));\nvar _token = require(\"./token\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readTableName(parser, options, metadata, callback) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8(numberOfTableNameParts => {\n        const tableName = [];\n        let i = 0;\n        function next(done) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n          parser.readUsVarChar(part => {\n            tableName.push(part);\n            i++;\n            next(done);\n          });\n        }\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\nfunction readColumnName(parser, options, index, metadata, callback) {\n  parser.readBVarChar(colName => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function (s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\nfunction readColumn(parser, options, index, callback) {\n  (0, _metadataParser.default)(parser, options, metadata => {\n    readTableName(parser, options, metadata, tableName => {\n      readColumnName(parser, options, index, metadata, colName => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\nasync function colMetadataParser(parser) {\n  while (parser.buffer.length - parser.position < 2) {\n    await parser.streamBuffer.waitForChunk();\n  }\n  const columnCount = parser.buffer.readUInt16LE(parser.position);\n  parser.position += 2;\n  const columns = [];\n  for (let i = 0; i < columnCount; i++) {\n    let column;\n    readColumn(parser, parser.options, i, c => {\n      column = c;\n    });\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n      parser.suspended = false;\n      const next = parser.next;\n      next();\n    }\n    columns.push(column);\n  }\n  return new _token.ColMetadataToken(columns);\n}\nvar _default = colMetadataParser;\nexports.default = _default;\nmodule.exports = colMetadataParser;","map":{"version":3,"names":["_metadataParser","_interopRequireDefault","require","_token","readTableName","parser","options","metadata","callback","type","hasTableName","tdsVersion","readUInt8","numberOfTableNameParts","tableName","i","next","done","readUsVarChar","part","push","undefined","readColumnName","index","readBVarChar","colName","columnNameReplacer","camelCaseColumns","replace","s","toLowerCase","readColumn","default","userType","flags","collation","precision","scale","udtInfo","dataLength","schema","colMetadataParser","buffer","length","position","streamBuffer","waitForChunk","columnCount","readUInt16LE","columns","column","c","suspended","ColMetadataToken","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/token/colmetadata-token-parser.ts"],"sourcesContent":["import metadataParse, { Metadata } from '../metadata-parser';\n\nimport Parser, { ParserOptions } from './stream-parser';\nimport { ColMetadataToken } from './token';\n\nexport interface ColumnMetadata extends Metadata {\n  /**\n   * The column's nameã€‚\n   */\n  colName: string;\n\n  tableName?: string | string[] | undefined;\n}\n\nfunction readTableName(parser: Parser, options: ParserOptions, metadata: Metadata, callback: (tableName?: string | string[]) => void) {\n  if (metadata.type.hasTableName) {\n    if (options.tdsVersion >= '7_2') {\n      parser.readUInt8((numberOfTableNameParts) => {\n        const tableName: string[] = [];\n\n        let i = 0;\n        function next(done: () => void) {\n          if (numberOfTableNameParts === i) {\n            return done();\n          }\n\n          parser.readUsVarChar((part) => {\n            tableName.push(part);\n\n            i++;\n\n            next(done);\n          });\n        }\n\n        next(() => {\n          callback(tableName);\n        });\n      });\n    } else {\n      parser.readUsVarChar(callback);\n    }\n  } else {\n    callback(undefined);\n  }\n}\n\nfunction readColumnName(parser: Parser, options: ParserOptions, index: number, metadata: Metadata, callback: (colName: string) => void) {\n  parser.readBVarChar((colName) => {\n    if (options.columnNameReplacer) {\n      callback(options.columnNameReplacer(colName, index, metadata));\n    } else if (options.camelCaseColumns) {\n      callback(colName.replace(/^[A-Z]/, function(s) {\n        return s.toLowerCase();\n      }));\n    } else {\n      callback(colName);\n    }\n  });\n}\n\nfunction readColumn(parser: Parser, options: ParserOptions, index: number, callback: (column: ColumnMetadata) => void) {\n  metadataParse(parser, options, (metadata) => {\n    readTableName(parser, options, metadata, (tableName) => {\n      readColumnName(parser, options, index, metadata, (colName) => {\n        callback({\n          userType: metadata.userType,\n          flags: metadata.flags,\n          type: metadata.type,\n          collation: metadata.collation,\n          precision: metadata.precision,\n          scale: metadata.scale,\n          udtInfo: metadata.udtInfo,\n          dataLength: metadata.dataLength,\n          schema: metadata.schema,\n          colName: colName,\n          tableName: tableName\n        });\n      });\n    });\n  });\n}\n\nasync function colMetadataParser(parser: Parser): Promise<ColMetadataToken> {\n  while (parser.buffer.length - parser.position < 2) {\n    await parser.streamBuffer.waitForChunk();\n  }\n\n  const columnCount = parser.buffer.readUInt16LE(parser.position);\n  parser.position += 2;\n\n  const columns: ColumnMetadata[] = [];\n  for (let i = 0; i < columnCount; i++) {\n    let column: ColumnMetadata;\n\n    readColumn(parser, parser.options, i, (c) => {\n      column = c;\n    });\n\n    while (parser.suspended) {\n      await parser.streamBuffer.waitForChunk();\n\n      parser.suspended = false;\n      const next = parser.next!;\n\n      next();\n    }\n\n    columns.push(column!);\n  }\n\n  return new ColMetadataToken(columns);\n}\n\nexport default colMetadataParser;\nmodule.exports = colMetadataParser;\n"],"mappings":";;;;;;AAAA,IAAAA,eAAA,GAAAC,sBAAA,CAAAC,OAAA;AAGA,IAAAC,MAAA,GAAAD,OAAA;;;;;;AAWA,SAASE,aAATA,CAAuBC,MAAvB,EAAuCC,OAAvC,EAA+DC,QAA/D,EAAmFC,QAAnF,EAAsI;EACpI,IAAID,QAAQ,CAACE,IAAT,CAAcC,YAAlB,EAAgC;IAC9B,IAAIJ,OAAO,CAACK,UAAR,IAAsB,KAA1B,EAAiC;MAC/BN,MAAM,CAACO,SAAP,CAAkBC,sBAAD,IAA4B;QAC3C,MAAMC,SAAmB,GAAG,EAA5B;QAEA,IAAIC,CAAC,GAAG,CAAR;QACA,SAASC,IAATA,CAAcC,IAAd,EAAgC;UAC9B,IAAIJ,sBAAsB,KAAKE,CAA/B,EAAkC;YAChC,OAAOE,IAAI,EAAX;UACD;UAEDZ,MAAM,CAACa,aAAP,CAAsBC,IAAD,IAAU;YAC7BL,SAAS,CAACM,IAAV,CAAeD,IAAf;YAEAJ,CAAC;YAEDC,IAAI,CAACC,IAAD,CAAJ;UACD,CAND;QAOD;QAEDD,IAAI,CAAC,MAAM;UACTR,QAAQ,CAACM,SAAD,CAAR;QACD,CAFG,CAAJ;MAGD,CArBD;IAsBD,CAvBD,MAuBO;MACLT,MAAM,CAACa,aAAP,CAAqBV,QAArB;IACD;EACF,CA3BD,MA2BO;IACLA,QAAQ,CAACa,SAAD,CAAR;EACD;AACF;AAED,SAASC,cAATA,CAAwBjB,MAAxB,EAAwCC,OAAxC,EAAgEiB,KAAhE,EAA+EhB,QAA/E,EAAmGC,QAAnG,EAAwI;EACtIH,MAAM,CAACmB,YAAP,CAAqBC,OAAD,IAAa;IAC/B,IAAInB,OAAO,CAACoB,kBAAZ,EAAgC;MAC9BlB,QAAQ,CAACF,OAAO,CAACoB,kBAAR,CAA2BD,OAA3B,EAAoCF,KAApC,EAA2ChB,QAA3C,CAAD,CAAR;IACD,CAFD,MAEO,IAAID,OAAO,CAACqB,gBAAZ,EAA8B;MACnCnB,QAAQ,CAACiB,OAAO,CAACG,OAAR,CAAgB,QAAhB,EAA0B,UAASC,CAAT,EAAY;QAC7C,OAAOA,CAAC,CAACC,WAAF,EAAP;MACD,CAFQ,CAAD,CAAR;IAGD,CAJM,MAIA;MACLtB,QAAQ,CAACiB,OAAD,CAAR;IACD;EACF,CAVD;AAWD;AAED,SAASM,UAATA,CAAoB1B,MAApB,EAAoCC,OAApC,EAA4DiB,KAA5D,EAA2Ef,QAA3E,EAAuH;EACrH,IAAAR,eAAA,CAAAgC,OAAA,EAAc3B,MAAd,EAAsBC,OAAtB,EAAgCC,QAAD,IAAc;IAC3CH,aAAa,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA6BO,SAAD,IAAe;MACtDQ,cAAc,CAACjB,MAAD,EAASC,OAAT,EAAkBiB,KAAlB,EAAyBhB,QAAzB,EAAoCkB,OAAD,IAAa;QAC5DjB,QAAQ,CAAC;UACPyB,QAAQ,EAAE1B,QAAQ,CAAC0B,QADZ;UAEPC,KAAK,EAAE3B,QAAQ,CAAC2B,KAFT;UAGPzB,IAAI,EAAEF,QAAQ,CAACE,IAHR;UAIP0B,SAAS,EAAE5B,QAAQ,CAAC4B,SAJb;UAKPC,SAAS,EAAE7B,QAAQ,CAAC6B,SALb;UAMPC,KAAK,EAAE9B,QAAQ,CAAC8B,KANT;UAOPC,OAAO,EAAE/B,QAAQ,CAAC+B,OAPX;UAQPC,UAAU,EAAEhC,QAAQ,CAACgC,UARd;UASPC,MAAM,EAAEjC,QAAQ,CAACiC,MATV;UAUPf,OAAO,EAAEA,OAVF;UAWPX,SAAS,EAAEA;QAXJ,CAAD,CAAR;MAaD,CAda,CAAd;IAeD,CAhBY,CAAb;EAiBD,CAlBD;AAmBD;AAED,eAAe2B,iBAAfA,CAAiCpC,MAAjC,EAA4E;EAC1E,OAAOA,MAAM,CAACqC,MAAP,CAAcC,MAAd,GAAuBtC,MAAM,CAACuC,QAA9B,GAAyC,CAAhD,EAAmD;IACjD,MAAMvC,MAAM,CAACwC,YAAP,CAAoBC,YAApB,EAAN;EACD;EAED,MAAMC,WAAW,GAAG1C,MAAM,CAACqC,MAAP,CAAcM,YAAd,CAA2B3C,MAAM,CAACuC,QAAlC,CAApB;EACAvC,MAAM,CAACuC,QAAP,IAAmB,CAAnB;EAEA,MAAMK,OAAyB,GAAG,EAAlC;EACA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgC,WAApB,EAAiChC,CAAC,EAAlC,EAAsC;IACpC,IAAImC,MAAJ;IAEAnB,UAAU,CAAC1B,MAAD,EAASA,MAAM,CAACC,OAAhB,EAAyBS,CAAzB,EAA6BoC,CAAD,IAAO;MAC3CD,MAAM,GAAGC,CAAT;IACD,CAFS,CAAV;IAIA,OAAO9C,MAAM,CAAC+C,SAAd,EAAyB;MACvB,MAAM/C,MAAM,CAACwC,YAAP,CAAoBC,YAApB,EAAN;MAEAzC,MAAM,CAAC+C,SAAP,GAAmB,KAAnB;MACA,MAAMpC,IAAI,GAAGX,MAAM,CAACW,IAApB;MAEAA,IAAI;IACL;IAEDiC,OAAO,CAAC7B,IAAR,CAAa8B,MAAb;EACD;EAED,OAAO,IAAI/C,MAAA,CAAAkD,gBAAJ,CAAqBJ,OAArB,CAAP;AACD;eAEcR,iB;;AACfa,MAAM,CAACC,OAAP,GAAiBd,iBAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}