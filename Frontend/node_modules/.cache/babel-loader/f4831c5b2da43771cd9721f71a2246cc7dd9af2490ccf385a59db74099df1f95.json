{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _events = require(\"events\");\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"./tracking-buffer/writable-tracking-buffer\"));\nvar _stream = require(\"stream\");\nvar _token = require(\"./token/token\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n/**\n * @private\n */\n\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n/**\n * @private\n */\n\nconst rowTokenBuffer = Buffer.from([_token.TYPE.ROW]);\nconst textPointerAndTimestampBuffer = Buffer.from([\n// TextPointer length\n0x10,\n// TextPointer\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n// Timestamp\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst textPointerNullBuffer = Buffer.from([0x00]); // A transform that converts rows to packets.\n\nclass RowTransform extends _stream.Transform {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad) {\n    super({\n      writableObjectMode: true\n    });\n    this.columnMetadataWritten = void 0;\n    this.bulkLoad = void 0;\n    this.mainOptions = void 0;\n    this.columns = void 0;\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n    this.columnMetadataWritten = false;\n  }\n  /**\n   * @private\n   */\n\n  _transform(row, _encoding, callback) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n    this.push(rowTokenBuffer);\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error) {\n          return callback(error);\n        }\n      }\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n        this.push(textPointerAndTimestampBuffer);\n      }\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n    process.nextTick(callback);\n  }\n  /**\n   * @private\n   */\n\n  _flush(callback) {\n    this.push(this.bulkLoad.createDoneToken());\n    process.nextTick(callback);\n  }\n}\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\n\nclass BulkLoad extends _events.EventEmitter {\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n\n  /**\n   * @private\n   */\n  constructor(table, collation, connectionOptions, _ref, callback) {\n    let {\n      checkConstraints = false,\n      fireTriggers = false,\n      keepNulls = false,\n      lockTable = false,\n      order = {}\n    } = _ref;\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n    super();\n    this.error = void 0;\n    this.canceled = void 0;\n    this.executionStarted = void 0;\n    this.streamingMode = void 0;\n    this.table = void 0;\n    this.timeout = void 0;\n    this.options = void 0;\n    this.callback = void 0;\n    this.columns = void 0;\n    this.columnsByName = void 0;\n    this.firstRowWritten = void 0;\n    this.rowToPacketTransform = void 0;\n    this.bulkOptions = void 0;\n    this.connection = void 0;\n    this.rows = void 0;\n    this.rst = void 0;\n    this.rowCount = void 0;\n    this.collation = void 0;\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n    this.collation = collation;\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = {\n      checkConstraints,\n      fireTriggers,\n      keepNulls,\n      lockTable,\n      order\n    };\n  }\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n\n  addColumn(name, type, _ref2) {\n    let {\n      output = false,\n      length,\n      precision,\n      scale,\n      objName = name,\n      nullable = true\n    } = _ref2;\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n    const column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n    this.columns.push(column);\n    this.columnsByName[name] = column;\n  }\n  /**\n   * @private\n   */\n\n  getOptionsSql() {\n    const addOptions = [];\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   * @private\n   */\n\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ', ';\n      }\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n    }\n    sql += ')';\n    sql += this.getOptionsSql();\n    return sql;\n  }\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n      sql += '[' + c.name + '] ' + c.type.declaration(c);\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n    sql += '\\n)';\n    return sql;\n  }\n  /**\n   * @private\n   */\n\n  getColMetaData() {\n    const tBuf = new _writableTrackingBuffer.default(100, null, true); // TokenType\n\n    tBuf.writeUInt8(_token.TYPE.COLMETADATA); // Count\n\n    tBuf.writeUInt16LE(this.columns.length);\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j]; // UserType\n\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      } // Flags\n\n      let flags = FLAGS.updateableReadWrite;\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n      tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options)); // TableName\n\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      } // ColName\n\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n    return tBuf.data;\n  }\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n\n  setTimeout(timeout) {\n    this.timeout = timeout;\n  }\n  /**\n   * @private\n   */\n\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new _writableTrackingBuffer.default(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(_token.TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n\n    return tBuf.data;\n  }\n  /**\n   * @private\n   */\n\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n    this.canceled = true;\n    this.emit('cancel');\n  }\n}\nvar _default = BulkLoad;\nexports.default = _default;\nmodule.exports = BulkLoad;","map":{"version":3,"names":["_events","require","_writableTrackingBuffer","_interopRequireDefault","_stream","_token","FLAGS","nullable","caseSen","updateableReadWrite","updateableUnknown","identity","computed","fixedLenCLRType","sparseColumnSet","hidden","key","nullableUnknown","DONE_STATUS","FINAL","MORE","ERROR","INXACT","COUNT","ATTN","SRVERROR","rowTokenBuffer","Buffer","from","TYPE","ROW","textPointerAndTimestampBuffer","textPointerNullBuffer","RowTransform","Transform","constructor","bulkLoad","writableObjectMode","columnMetadataWritten","mainOptions","columns","options","_transform","row","_encoding","callback","push","getColMetaData","i","length","c","value","Array","isArray","objName","firstRowWritten","type","validate","collation","error","parameter","scale","precision","name","generateParameterLength","chunk","generateParameterData","process","nextTick","_flush","createDoneToken","BulkLoad","EventEmitter","table","connectionOptions","_ref","checkConstraints","fireTriggers","keepNulls","lockTable","order","TypeError","column","direction","Object","entries","canceled","executionStarted","streamingMode","timeout","columnsByName","rowToPacketTransform","bulkOptions","connection","rows","rst","rowCount","undefined","addColumn","_ref2","output","Error","id","resolveLength","resolvePrecision","resolveScale","getOptionsSql","addOptions","orderColumns","join","getBulkInsertSql","sql","len","declaration","getTableCreationSql","tBuf","default","writeUInt8","COLMETADATA","writeUInt16LE","j","tdsVersion","writeUInt32LE","flags","writeBuffer","generateTypeInfo","hasTableName","writeUsVarchar","writeBVarchar","data","setTimeout","DONE","status","cancel","emit","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/bulk-load.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport Connection, { InternalConnectionOptions } from './connection';\n\nimport { Transform } from 'stream';\nimport { TYPE as TOKEN_TYPE } from './token/token';\n\nimport { DataType, Parameter } from './data-type';\nimport { Collation } from './collation';\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5, // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8, // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10, // introduced in TDS 7.3.B\n  hidden: 1 << 13, // introduced in TDS 7.2\n  key: 1 << 14, // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n\n/**\n * @private\n */\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\n/**\n * @private\n */\ninterface InternalOptions {\n  checkConstraints: boolean;\n  fireTriggers: boolean;\n  keepNulls: boolean;\n  lockTable: boolean;\n  order: { [columnName: string]: 'ASC' | 'DESC' };\n}\n\nexport interface Options {\n  /**\n   * Honors constraints during bulk load, using T-SQL\n   * [CHECK_CONSTRAINTS](https://technet.microsoft.com/en-us/library/ms186247(v=sql.105).aspx).\n   * (default: `false`)\n   */\n  checkConstraints?: InternalOptions['checkConstraints'] | undefined;\n\n  /**\n   * Honors insert triggers during bulk load, using the T-SQL [FIRE_TRIGGERS](https://technet.microsoft.com/en-us/library/ms187640(v=sql.105).aspx). (default: `false`)\n   */\n  fireTriggers?: InternalOptions['fireTriggers'] | undefined;\n\n  /**\n   * Honors null value passed, ignores the default values set on table, using T-SQL [KEEP_NULLS](https://msdn.microsoft.com/en-us/library/ms187887(v=sql.120).aspx). (default: `false`)\n   */\n  keepNulls?: InternalOptions['keepNulls'] | undefined;\n\n  /**\n   * Places a bulk update(BU) lock on table while performing bulk load, using T-SQL [TABLOCK](https://technet.microsoft.com/en-us/library/ms180876(v=sql.105).aspx). (default: `false`)\n   */\n  lockTable?: InternalOptions['lockTable'] | undefined;\n\n  /**\n   * Specifies the ordering of the data to possibly increase bulk insert performance, using T-SQL [ORDER](https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177468(v=sql.105)). (default: `{}`)\n   */\n  order?: InternalOptions['order'] | undefined;\n}\n\n\nexport type Callback =\n  /**\n   * A function which will be called after the [[BulkLoad]] finishes executing.\n   *\n   * @param rowCount the number of rows inserted\n   */\n  (err: Error | undefined | null, rowCount?: number) => void;\n\ninterface Column extends Parameter {\n  objName: string;\n  collation: Collation | undefined;\n}\n\ninterface ColumnOptions {\n  output?: boolean;\n\n  /**\n   * For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   */\n  length?: number;\n\n  /**\n   * For Numeric, Decimal.\n   */\n  precision?: number;\n\n  /**\n   * For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n   */\n  scale?: number;\n\n  /**\n   * If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   */\n  objName?: string;\n\n  /**\n   * Indicates whether the column accepts NULL values.\n   */\n  nullable?: boolean;\n}\n\nconst rowTokenBuffer = Buffer.from([ TOKEN_TYPE.ROW ]);\nconst textPointerAndTimestampBuffer = Buffer.from([\n  // TextPointer length\n  0x10,\n\n  // TextPointer\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\n  // Timestamp\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n]);\nconst textPointerNullBuffer = Buffer.from([0x00]);\n\n// A transform that converts rows to packets.\nclass RowTransform extends Transform {\n  /**\n   * @private\n   */\n  columnMetadataWritten: boolean;\n  /**\n   * @private\n   */\n  bulkLoad: BulkLoad;\n  /**\n   * @private\n   */\n  mainOptions: BulkLoad['options'];\n  /**\n   * @private\n   */\n  columns: BulkLoad['columns'];\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad: BulkLoad) {\n    super({ writableObjectMode: true });\n\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n\n    this.columnMetadataWritten = false;\n  }\n\n  /**\n   * @private\n   */\n  _transform(row: Array<unknown> | { [colName: string]: unknown }, _encoding: string, callback: (error?: Error) => void) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    this.push(rowTokenBuffer);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error: any) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n\n        this.push(textPointerAndTimestampBuffer);\n      }\n\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n\n  /**\n   * @private\n   */\n  _flush(callback: () => void) {\n    this.push(this.bulkLoad.createDoneToken());\n\n    process.nextTick(callback);\n  }\n}\n\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\nclass BulkLoad extends EventEmitter {\n  /**\n   * @private\n   */\n  error: Error | undefined;\n  /**\n   * @private\n   */\n  canceled: boolean;\n  /**\n   * @private\n   */\n  executionStarted: boolean;\n  /**\n   * @private\n   */\n  streamingMode: boolean;\n  /**\n   * @private\n   */\n  table: string;\n  /**\n   * @private\n   */\n  timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  options: InternalConnectionOptions;\n  /**\n   * @private\n   */\n  callback: Callback;\n\n  /**\n   * @private\n   */\n  columns: Array<Column>;\n  /**\n   * @private\n   */\n  columnsByName: { [name: string]: Column };\n\n  /**\n   * @private\n   */\n  firstRowWritten: boolean;\n  /**\n   * @private\n   */\n  rowToPacketTransform: RowTransform;\n\n  /**\n   * @private\n   */\n  bulkOptions: InternalOptions;\n\n  /**\n   * @private\n   */\n  connection: Connection | undefined;\n  /**\n   * @private\n   */\n  rows: Array<any> | undefined;\n  /**\n   * @private\n   */\n  rst: Array<any> | undefined;\n  /**\n   * @private\n   */\n  rowCount: number | undefined;\n\n  collation: Collation | undefined;\n\n  /**\n   * @private\n   */\n  constructor(table: string, collation: Collation | undefined, connectionOptions: InternalConnectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {},\n  }: Options, callback: Callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    super();\n\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n\n    this.collation = collation;\n\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = { checkConstraints, fireTriggers, keepNulls, lockTable, order };\n  }\n\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n  addColumn(name: string, type: DataType, { output = false, length, precision, scale, objName = name, nullable = true }: ColumnOptions) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column: Column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n\n    this.columnsByName[name] = column;\n  }\n\n  /**\n   * @private\n   */\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @private\n   */\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ', ';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n    }\n    sql += ')';\n\n    sql += this.getOptionsSql();\n    return sql;\n  }\n\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n    sql += '\\n)';\n    return sql;\n  }\n\n  /**\n   * @private\n   */\n  getColMetaData() {\n    const tBuf = new WritableTrackingBuffer(100, null, true);\n    // TokenType\n    tBuf.writeUInt8(TOKEN_TYPE.COLMETADATA);\n    // Count\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j];\n      // UserType\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      }\n\n      // Flags\n      let flags = FLAGS.updateableReadWrite;\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n      tBuf.writeUInt16LE(flags);\n\n      // TYPE_INFO\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options));\n\n      // TableName\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      }\n\n      // ColName\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n\n  /**\n   * @private\n   */\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new WritableTrackingBuffer(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(TOKEN_TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n}\n\nexport default BulkLoad;\nmodule.exports = BulkLoad;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}