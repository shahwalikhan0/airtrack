{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _core = require(\"@js-joda/core\");\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DateTimeOffset = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  declaration: function (parameter) {\n    return 'datetimeoffset(' + this.resolveScale(parameter) + ')';\n  },\n  resolveScale: function (parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale]);\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n    switch (parameter.scale) {\n      case 0:\n      case 1:\n      case 2:\n        return Buffer.from([0x08]);\n      case 3:\n      case 4:\n        return Buffer.from([0x09]);\n      case 5:\n      case 6:\n      case 7:\n        return Buffer.from([0x0A]);\n      default:\n        throw new Error('invalid scale');\n    }\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    const value = parameter.value;\n    let scale = parameter.scale;\n    const buffer = new _writableTrackingBuffer.default(16);\n    scale = scale;\n    let timestamp;\n    timestamp = ((value.getUTCHours() * 60 + value.getUTCMinutes()) * 60 + value.getUTCSeconds()) * 1000 + value.getMilliseconds();\n    timestamp = timestamp * Math.pow(10, scale - 3);\n    timestamp += (value.nanosecondDelta != null ? value.nanosecondDelta : 0) * Math.pow(10, scale);\n    timestamp = Math.round(timestamp);\n    switch (scale) {\n      case 0:\n      case 1:\n      case 2:\n        buffer.writeUInt24LE(timestamp);\n        break;\n      case 3:\n      case 4:\n        buffer.writeUInt32LE(timestamp);\n        break;\n      case 5:\n      case 6:\n      case 7:\n        buffer.writeUInt40LE(timestamp);\n    }\n    const date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    const days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    buffer.writeUInt24LE(days);\n    const offset = -value.getTimezoneOffset();\n    buffer.writeInt16LE(offset);\n    yield buffer.data;\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n    return value;\n  }\n};\nvar _default = DateTimeOffset;\nexports.default = _default;\nmodule.exports = DateTimeOffset;","map":{"version":3,"names":["_core","require","_writableTrackingBuffer","_interopRequireDefault","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DateTimeOffset","id","type","name","declaration","parameter","resolveScale","scale","value","generateTypeInfo","generateParameterLength","options","Error","generateParameterData","buffer","default","timestamp","getUTCHours","getUTCMinutes","getUTCSeconds","getMilliseconds","Math","pow","nanosecondDelta","round","writeUInt24LE","writeUInt32LE","writeUInt40LE","date","of","getUTCFullYear","getUTCMonth","getUTCDate","days","until","ChronoUnit","DAYS","offset","getTimezoneOffset","writeInt16LE","data","validate","Date","parse","isNaN","TypeError","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-types/datetimeoffset.ts"],"sourcesContent":["import { DataType } from '../data-type';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst EPOCH_DATE = LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst DateTimeOffset: DataType & { resolveScale: NonNullable<DataType['resolveScale']> } = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  declaration: function(parameter) {\n    return 'datetimeoffset(' + (this.resolveScale(parameter)) + ')';\n  },\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    switch (parameter.scale) {\n      case 0:\n      case 1:\n      case 2:\n        return Buffer.from([0x08]);\n\n      case 3:\n      case 4:\n        return Buffer.from([0x09]);\n\n      case 5:\n      case 6:\n      case 7:\n        return Buffer.from([0x0A]);\n\n      default:\n        throw new Error('invalid scale');\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value;\n    let scale = parameter.scale;\n\n    const buffer = new WritableTrackingBuffer(16);\n    scale = scale!;\n\n    let timestamp;\n    timestamp = ((value.getUTCHours() * 60 + value.getUTCMinutes()) * 60 + value.getUTCSeconds()) * 1000 + value.getMilliseconds();\n    timestamp = timestamp * Math.pow(10, scale - 3);\n    timestamp += (value.nanosecondDelta != null ? value.nanosecondDelta : 0) * Math.pow(10, scale);\n    timestamp = Math.round(timestamp);\n\n    switch (scale) {\n      case 0:\n      case 1:\n      case 2:\n        buffer.writeUInt24LE(timestamp);\n        break;\n      case 3:\n      case 4:\n        buffer.writeUInt32LE(timestamp);\n        break;\n      case 5:\n      case 6:\n      case 7:\n        buffer.writeUInt40LE(timestamp);\n    }\n\n    const date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    const days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n    buffer.writeUInt24LE(days);\n\n    const offset = -value.getTimezoneOffset();\n    buffer.writeInt16LE(offset);\n    yield buffer.data;\n  },\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default DateTimeOffset;\nmodule.exports = DateTimeOffset;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}