{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"./helpers\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken() {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch (_a) {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n      return finalToken;\n    }\n  }\n  let token = await tryGetAccessToken();\n  while (token === null) {\n    await delay(retryIntervalInMs);\n    token = await tryGetAccessToken();\n  }\n  return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(credential, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  let tenantId;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(scopes, getTokenOptions) {\n    var _a;\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs,\n      // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        tenantId = getTokenOptions.tenantId;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        tenantId = undefined;\n        throw reason;\n      });\n    }\n    return refreshWorker;\n  }\n  return async (scopes, tokenOptions) => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh = tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n    return token;\n  };\n}","map":{"version":3,"names":["delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","refreshTimeout","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","tokenCyclerOptions","refreshWorker","tenantId","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","scopes","getTokenOptions","getToken","then","_token","catch","reason","undefined","tokenOptions","Boolean","claims"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/util/tokenCycler.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now()\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh =\n      tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}