{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy() {\n  let requestIdHeaderName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"x-ms-client-request-id\";\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request, next) {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    }\n  };\n}","map":{"version":3,"names":["setClientRequestIdPolicyName","setClientRequestIdPolicy","requestIdHeaderName","arguments","length","undefined","name","sendRequest","request","next","headers","has","set","requestId"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/policies/setClientRequestIdPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): PipelinePolicy {\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAKA;;;AAGA,OAAO,MAAMA,4BAA4B,GAAG,0BAA0B;AAEtE;;;;;;AAMA,OAAM,SAAUC,wBAAwBA,CAAA,EACQ;EAAA,IAA9CC,mBAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,wBAAwB;EAE9C,OAAO;IACLG,IAAI,EAAEN,4BAA4B;IAClC,MAAMO,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D,IAAI,CAACD,OAAO,CAACE,OAAO,CAACC,GAAG,CAACT,mBAAmB,CAAC,EAAE;QAC7CM,OAAO,CAACE,OAAO,CAACE,GAAG,CAACV,mBAAmB,EAAEM,OAAO,CAACK,SAAS,CAAC;;MAE7D,OAAOJ,IAAI,CAACD,OAAO,CAAC;IACtB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}