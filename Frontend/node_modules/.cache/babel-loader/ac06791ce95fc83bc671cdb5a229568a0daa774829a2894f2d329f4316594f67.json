{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e) {\n    return undefined;\n  }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response) {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\nexport function throttlingRetryStrategy() {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry(_ref) {\n      let {\n        response\n      } = _ref;\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return {\n          skipStrategy: true\n        };\n      }\n      return {\n        retryAfterInMs\n      };\n    }\n  };\n}","map":{"version":3,"names":["parseHeaderValueAsNumber","RetryAfterHeader","AllRetryAfterHeaders","getRetryAfterInMs","response","includes","status","undefined","header","retryAfterValue","multiplyingFactor","retryAfterHeader","headers","get","date","Date","parse","diff","now","Number","isFinite","Math","max","e","isThrottlingRetryResponse","throttlingRetryStrategy","name","retry","_ref","retryAfterInMs","skipStrategy"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/retryStrategies/throttlingRetryStrategy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineResponse } from \"..\";\nimport { parseHeaderValueAsNumber } from \"../util/helpers\";\nimport { RetryStrategy } from \"./retryStrategy\";\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response?: PipelineResponse): number | undefined {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e: any) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs,\n      };\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,wBAAwB,QAAQ,iBAAiB;AAG1D;;;;AAIA,MAAMC,gBAAgB,GAAG,aAAa;AACtC;;;;;;;AAOA,MAAMC,oBAAoB,GAAa,CAAC,gBAAgB,EAAE,qBAAqB,EAAED,gBAAgB,CAAC;AAElG;;;;;;;;;AASA,SAASE,iBAAiBA,CAACC,QAA2B;EACpD,IAAI,EAAEA,QAAQ,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACD,QAAQ,CAACE,MAAM,CAAC,CAAC,EAAE,OAAOC,SAAS;EACzE,IAAI;IACF;IACA,KAAK,MAAMC,MAAM,IAAIN,oBAAoB,EAAE;MACzC,MAAMO,eAAe,GAAGT,wBAAwB,CAACI,QAAQ,EAAEI,MAAM,CAAC;MAClE,IAAIC,eAAe,KAAK,CAAC,IAAIA,eAAe,EAAE;QAC5C;QACA;QACA,MAAMC,iBAAiB,GAAGF,MAAM,KAAKP,gBAAgB,GAAG,IAAI,GAAG,CAAC;QAChE,OAAOQ,eAAe,GAAGC,iBAAiB,CAAC,CAAC;;;IAIhD;IACA,MAAMC,gBAAgB,GAAGP,QAAQ,CAACQ,OAAO,CAACC,GAAG,CAACZ,gBAAgB,CAAC;IAC/D,IAAI,CAACU,gBAAgB,EAAE;IAEvB,MAAMG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,gBAAgB,CAAC;IACzC,MAAMM,IAAI,GAAGH,IAAI,GAAGC,IAAI,CAACG,GAAG,EAAE;IAC9B;IACA,OAAOC,MAAM,CAACC,QAAQ,CAACH,IAAI,CAAC,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,IAAI,CAAC,GAAGV,SAAS;GAC7D,CAAC,OAAOgB,CAAM,EAAE;IACf,OAAOhB,SAAS;;AAEpB;AAEA;;;;AAIA,OAAM,SAAUiB,yBAAyBA,CAACpB,QAA2B;EACnE,OAAOe,MAAM,CAACC,QAAQ,CAACjB,iBAAiB,CAACC,QAAQ,CAAC,CAAC;AACrD;AAEA,OAAM,SAAUqB,uBAAuBA,CAAA;EACrC,OAAO;IACLC,IAAI,EAAE,yBAAyB;IAC/BC,KAAKA,CAAAC,IAAA,EAAa;MAAA,IAAZ;QAAExB;MAAQ,CAAE,GAAAwB,IAAA;MAChB,MAAMC,cAAc,GAAG1B,iBAAiB,CAACC,QAAQ,CAAC;MAClD,IAAI,CAACe,MAAM,CAACC,QAAQ,CAACS,cAAc,CAAC,EAAE;QACpC,OAAO;UAAEC,YAAY,EAAE;QAAI,CAAE;;MAE/B,OAAO;QACLD;OACD;IACH;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}