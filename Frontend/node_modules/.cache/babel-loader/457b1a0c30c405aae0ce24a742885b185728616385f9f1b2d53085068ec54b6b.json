{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { credentialLogger, formatError } from \"../util/logging\";\nconst BrowserNotSupportedError = new Error(\"AuthorizationCodeCredential is not supported in the browser. InteractiveBrowserCredential is more appropriate for this use case.\");\nconst logger = credentialLogger(\"AuthorizationCodeCredential\");\nexport class AuthorizationCodeCredential {\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n  getToken() {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}","map":{"version":3,"names":["credentialLogger","formatError","BrowserNotSupportedError","Error","logger","AuthorizationCodeCredential","constructor","info","getToken"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/identity/src/credentials/authorizationCodeCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\n\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AuthorizationCodeCredential is not supported in the browser. InteractiveBrowserCredential is more appropriate for this use case.\"\n);\nconst logger = credentialLogger(\"AuthorizationCodeCredential\");\n\nexport class AuthorizationCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    clientSecret: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: TokenCredentialOptions\n  );\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: TokenCredentialOptions\n  );\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n"],"mappings":"AAAA;AACA;AAKA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,iBAAiB;AAE/D,MAAMC,wBAAwB,GAAG,IAAIC,KAAK,CACxC,kIAAkI,CACnI;AACD,MAAMC,MAAM,GAAGJ,gBAAgB,CAAC,6BAA6B,CAAC;AAE9D,OAAM,MAAOK,2BAA2B;EAmBtCC,YAAA;IACEF,MAAM,CAACG,IAAI,CAACN,WAAW,CAAC,EAAE,EAAEC,wBAAwB,CAAC,CAAC;IACtD,MAAMA,wBAAwB;EAChC;EAEOM,QAAQA,CAAA;IACbJ,MAAM,CAACI,QAAQ,CAACD,IAAI,CAACN,WAAW,CAAC,EAAE,EAAEC,wBAAwB,CAAC,CAAC;IAC/D,MAAMA,wBAAwB;EAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}