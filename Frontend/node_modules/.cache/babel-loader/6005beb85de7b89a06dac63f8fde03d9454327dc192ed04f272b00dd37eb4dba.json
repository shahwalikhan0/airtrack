{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { XML_ATTRKEY, XML_CHARKEY } from \"./interfaces\";\nimport { getOperationArgumentValueFromParameter, getOperationRequestInfo } from \"./operationHelpers\";\nimport { MapperTypeNames } from \"./serializer\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers\";\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const stringifyXML = options.stringifyXML;\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request, next) {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n      const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    }\n  };\n}\n/**\n * @internal\n */\nexport function serializeHeaders(request, operationArguments, operationSpec) {\n  var _a, _b;\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if (headerValue !== null && headerValue !== undefined || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, getPathStringFromParameter(headerParameter));\n        const headerCollectionPrefix = headerParameter.mapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter), headerValue);\n        }\n      }\n    }\n  }\n  const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n/**\n * @internal\n */\nexport function serializeRequestBody(request, operationArguments, operationSpec) {\n  let stringifyXML = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {\n    throw new Error(\"XML serialization unsupported!\");\n  };\n  var _a, _b, _c, _d, _e;\n  const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n  const updatedOptions = {\n    xml: {\n      rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n      includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n      xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : XML_CHARKEY\n    }\n  };\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(operationArguments, operationSpec.requestBody);\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n    try {\n      if (request.body !== undefined && request.body !== null || nullable && request.body === null || required) {\n        const requestBodyParameterPathString = getPathStringFromParameter(operationSpec.requestBody);\n        request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n        const isStream = typeName === MapperTypeNames.Stream;\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), {\n              rootName: xmlName || serializedName,\n              xmlCharKey\n            });\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey\n            });\n          }\n        } else if (typeName === MapperTypeNames.String && (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error) {\n      throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(operationArguments, formDataParameter);\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName = formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, getPathStringFromParameter(formDataParameter), updatedOptions);\n      }\n    }\n  }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = {\n      [xmlnsKey]: xmlNamespace\n    };\n    return result;\n  }\n  return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return {\n      [elementName]: obj\n    };\n  }\n  const result = {\n    [elementName]: obj\n  };\n  result[XML_ATTRKEY] = {\n    [xmlNamespaceKey]: xmlNamespace\n  };\n  return result;\n}","map":{"version":3,"names":["XML_ATTRKEY","XML_CHARKEY","getOperationArgumentValueFromParameter","getOperationRequestInfo","MapperTypeNames","getPathStringFromParameter","serializationPolicyName","serializationPolicy","options","arguments","length","undefined","stringifyXML","name","sendRequest","request","next","operationInfo","operationSpec","operationArguments","serializeHeaders","serializeRequestBody","headerParameters","headerParameter","headerValue","mapper","required","serializer","serialize","headerCollectionPrefix","key","Object","keys","headers","set","serializedName","customHeaders","_b","_a","requestOptions","customHeaderName","Error","serializerOptions","updatedOptions","xml","rootName","includeRoot","_c","xmlCharKey","_d","requestBody","body","bodyMapper","xmlName","xmlElementName","xmlNamespace","xmlNamespacePrefix","nullable","typeName","type","requestBodyParameterPathString","isStream","Stream","isXML","xmlnsKey","value","getXmlValueWithNamespace","Sequence","prepareXMLRootList","String","_e","contentType","match","mediaType","JSON","stringify","error","message","formDataParameters","formData","formDataParameter","formDataParameterValue","formDataParameterPropertyName","serializedValue","includes","result","obj","elementName","xmlNamespaceKey","Array","isArray"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-client/src/serializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DictionaryMapper,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces\";\nimport { PipelinePolicy, PipelineResponse, SendRequest } from \"@azure/core-rest-pipeline\";\nimport {\n  getOperationArgumentValueFromParameter,\n  getOperationRequestInfo,\n} from \"./operationHelpers\";\nimport { MapperTypeNames } from \"./serializer\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers\";\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n\n/**\n * Options to configure API request serialization.\n */\nexport interface SerializationPolicyOptions {\n  /**\n   * A function that is able to write XML. Required for XML support.\n   */\n  stringifyXML?: (obj: any, opts?: XmlOptions) => string;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options: SerializationPolicyOptions = {}): PipelinePolicy {\n  const stringifyXML = options.stringifyXML;\n\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request: OperationRequest, next: SendRequest): Promise<PipelineResponse> {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo?.operationSpec;\n      const operationArguments = operationInfo?.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function serializeHeaders(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec\n): void {\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(\n          headerParameter.mapper,\n          headerValue,\n          getPathStringFromParameter(headerParameter)\n        );\n        const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n          .headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(\n            headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter),\n            headerValue\n          );\n        }\n      }\n    }\n  }\n  const customHeaders = operationArguments.options?.requestOptions?.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function serializeRequestBody(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n  stringifyXML: (obj: any, opts?: XmlOptions) => string = function () {\n    throw new Error(\"XML serialization unsupported!\");\n  }\n): void {\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(\n      operationArguments,\n      operationSpec.requestBody\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable,\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n\n    try {\n      if (\n        (request.body !== undefined && request.body !== null) ||\n        (nullable && request.body === null) ||\n        required\n      ) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody\n        );\n        request.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          request.body,\n          requestBodyParameterPathString,\n          updatedOptions\n        );\n\n        const isStream = typeName === MapperTypeNames.Stream;\n\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(\n            xmlNamespace,\n            xmlnsKey,\n            typeName,\n            request.body,\n            updatedOptions\n          );\n\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(\n              prepareXMLRootList(\n                value,\n                xmlElementName || xmlName || serializedName!,\n                xmlnsKey,\n                xmlNamespace\n              ),\n              { rootName: xmlName || serializedName, xmlCharKey }\n            );\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey,\n            });\n          }\n        } else if (\n          typeName === MapperTypeNames.String &&\n          (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")\n        ) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error: any) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \"\n        )}.`\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(\n        operationArguments,\n        formDataParameter\n      );\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter),\n          updatedOptions\n        );\n      }\n    }\n  }\n}\n\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(\n  xmlNamespace: string | undefined,\n  xmlnsKey: string,\n  typeName: string,\n  serializedValue: any,\n  options: RequiredSerializerOptions\n): any {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result: any = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n    return result;\n  }\n\n  return serializedValue;\n}\n\nfunction prepareXMLRootList(\n  obj: any,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string\n): { [key: string]: any[] } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}