{"ast":null,"code":"'use strict';\n\nconst tds = require('tedious');\nconst debug = require('debug')('mssql:tedi');\nconst BaseConnectionPool = require('../base/connection-pool');\nconst {\n  IDS\n} = require('../utils');\nconst shared = require('../shared');\nconst ConnectionError = require('../error/connection-error');\nclass ConnectionPool extends BaseConnectionPool {\n  _poolCreate() {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = v => {\n        resolve(v);\n        resolve = reject = () => {};\n      };\n      const rejectOnce = e => {\n        reject(e);\n        resolve = reject = () => {};\n      };\n      const cfg = {\n        server: this.config.server,\n        options: Object.assign({\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\n          trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\n        }, this.config.options),\n        authentication: Object.assign({\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\n          options: {\n            userName: this.config.user,\n            password: this.config.password,\n            domain: this.config.domain\n          }\n        }, this.config.authentication)\n      };\n      cfg.options.database = cfg.options.database || this.config.database;\n      cfg.options.port = cfg.options.port || this.config.port;\n      cfg.options.connectTimeout = cfg.options.connectTimeout ?? this.config.connectionTimeout ?? this.config.timeout ?? 15000;\n      cfg.options.requestTimeout = cfg.options.requestTimeout ?? this.config.requestTimeout ?? this.config.timeout ?? 15000;\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4';\n      cfg.options.rowCollectionOnDone = cfg.options.rowCollectionOnDone || false;\n      cfg.options.rowCollectionOnRequestCompletion = cfg.options.rowCollectionOnRequestCompletion || false;\n      cfg.options.useColumnNames = cfg.options.useColumnNames || false;\n      cfg.options.appName = cfg.options.appName || 'node-mssql';\n\n      // tedious always connect via tcp when port is specified\n      if (cfg.options.instanceName) delete cfg.options.port;\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000;\n      if (cfg.options.requestTimeout === Infinity || cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0;\n      if (!cfg.options.debug && this.config.debug) {\n        cfg.options.debug = {\n          packet: true,\n          token: true,\n          data: true,\n          payload: true\n        };\n      }\n      let tedious;\n      try {\n        tedious = new tds.Connection(cfg);\n      } catch (err) {\n        rejectOnce(err);\n        return;\n      }\n      tedious.connect(err => {\n        if (err) {\n          err = new ConnectionError(err);\n          return rejectOnce(err);\n        }\n        debug('connection(%d): established', IDS.get(tedious));\n        this.collation = tedious.databaseCollation;\n        resolveOnce(tedious);\n      });\n      IDS.add(tedious, 'Connection');\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious));\n      debug('connection(%d): establishing', IDS.get(tedious));\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection');\n        rejectOnce(err);\n      });\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true;\n        } else {\n          this.emit('error', err);\n        }\n        rejectOnce(err);\n      });\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious));\n      }\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious);\n      }\n    });\n  }\n  _poolValidate(tedious) {\n    if (tedious && !tedious.closed && !tedious.hasError) {\n      return !this.config.validateConnection || new shared.Promise(resolve => {\n        const req = new tds.Request('SELECT 1;', err => {\n          resolve(!err);\n        });\n        tedious.execSql(req);\n      });\n    }\n    return false;\n  }\n  _poolDestroy(tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve();\n        return;\n      }\n      debug('connection(%d): destroying', IDS.get(tedious));\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious));\n        resolve();\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious));\n          resolve();\n        });\n        tedious.close();\n      }\n    });\n  }\n}\nmodule.exports = ConnectionPool;","map":{"version":3,"names":["tds","require","debug","BaseConnectionPool","IDS","shared","ConnectionError","ConnectionPool","_poolCreate","Promise","resolve","reject","resolveOnce","v","rejectOnce","e","cfg","server","config","options","Object","assign","encrypt","trustServerCertificate","authentication","type","domain","undefined","userName","user","password","database","port","connectTimeout","connectionTimeout","timeout","requestTimeout","tdsVersion","rowCollectionOnDone","rowCollectionOnRequestCompletion","useColumnNames","appName","instanceName","isNaN","Infinity","packet","token","data","payload","tedious","Connection","err","connect","get","collation","databaseCollation","add","on","code","hasError","emit","bind","beforeConnect","_poolValidate","closed","validateConnection","req","Request","execSql","_poolDestroy","once","close","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/tedious/connection-pool.js"],"sourcesContent":["'use strict'\n\nconst tds = require('tedious')\nconst debug = require('debug')('mssql:tedi')\nconst BaseConnectionPool = require('../base/connection-pool')\nconst { IDS } = require('../utils')\nconst shared = require('../shared')\nconst ConnectionError = require('../error/connection-error')\n\nclass ConnectionPool extends BaseConnectionPool {\n  _poolCreate () {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = (v) => {\n        resolve(v)\n        resolve = reject = () => {}\n      }\n      const rejectOnce = (e) => {\n        reject(e)\n        resolve = reject = () => {}\n      }\n      const cfg = {\n        server: this.config.server,\n        options: Object.assign({\n          encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\n          trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\n        }, this.config.options),\n        authentication: Object.assign({\n          type: this.config.domain !== undefined ? 'ntlm' : 'default',\n          options: {\n            userName: this.config.user,\n            password: this.config.password,\n            domain: this.config.domain\n          }\n        }, this.config.authentication)\n      }\n\n      cfg.options.database = cfg.options.database || this.config.database\n      cfg.options.port = cfg.options.port || this.config.port\n      cfg.options.connectTimeout = cfg.options.connectTimeout ?? this.config.connectionTimeout ?? this.config.timeout ?? 15000\n      cfg.options.requestTimeout = cfg.options.requestTimeout ?? this.config.requestTimeout ?? this.config.timeout ?? 15000\n      cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\n      cfg.options.rowCollectionOnDone = cfg.options.rowCollectionOnDone || false\n      cfg.options.rowCollectionOnRequestCompletion = cfg.options.rowCollectionOnRequestCompletion || false\n      cfg.options.useColumnNames = cfg.options.useColumnNames || false\n      cfg.options.appName = cfg.options.appName || 'node-mssql'\n\n      // tedious always connect via tcp when port is specified\n      if (cfg.options.instanceName) delete cfg.options.port\n\n      if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\n      if (cfg.options.requestTimeout === Infinity || cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\n\n      if (!cfg.options.debug && this.config.debug) {\n        cfg.options.debug = {\n          packet: true,\n          token: true,\n          data: true,\n          payload: true\n        }\n      }\n      let tedious\n      try {\n        tedious = new tds.Connection(cfg)\n      } catch (err) {\n        rejectOnce(err)\n        return\n      }\n      tedious.connect(err => {\n        if (err) {\n          err = new ConnectionError(err)\n          return rejectOnce(err)\n        }\n\n        debug('connection(%d): established', IDS.get(tedious))\n        this.collation = tedious.databaseCollation\n        resolveOnce(tedious)\n      })\n      IDS.add(tedious, 'Connection')\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\n      debug('connection(%d): establishing', IDS.get(tedious))\n\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection')\n        rejectOnce(err)\n      })\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true\n        } else {\n          this.emit('error', err)\n        }\n        rejectOnce(err)\n      })\n\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\n      }\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious)\n      }\n    })\n  }\n\n  _poolValidate (tedious) {\n    if (tedious && !tedious.closed && !tedious.hasError) {\n      return !this.config.validateConnection || new shared.Promise((resolve) => {\n        const req = new tds.Request('SELECT 1;', (err) => {\n          resolve(!err)\n        })\n        tedious.execSql(req)\n      })\n    }\n    return false\n  }\n\n  _poolDestroy (tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve()\n        return\n      }\n      debug('connection(%d): destroying', IDS.get(tedious))\n\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious))\n        resolve()\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious))\n          resolve()\n        })\n\n        tedious.close()\n      }\n    })\n  }\n}\n\nmodule.exports = ConnectionPool\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}