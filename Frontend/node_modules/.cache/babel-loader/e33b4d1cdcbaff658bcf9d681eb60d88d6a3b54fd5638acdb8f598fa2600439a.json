{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\nconst debug = require('debug')('mssql:base');\nconst {\n  parseSqlConnectionString\n} = require('@tediousjs/connection-string');\nconst tarn = require('tarn');\nconst {\n  IDS\n} = require('../utils');\nconst ConnectionError = require('../error/connection-error');\nconst shared = require('../shared');\nconst clone = require('rfdc/default');\nconst {\n  MSSQLError\n} = require('../error');\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor(config, callback) {\n    super();\n    IDS.add(this, 'ConnectionPool');\n    debug('pool(%d): created', IDS.get(this));\n    this._connectStack = [];\n    this._closeStack = [];\n    this._connected = false;\n    this._connecting = false;\n    this._healthy = false;\n    if (typeof config === 'string') {\n      try {\n        this.config = this.constructor.parseConnectionString(config);\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex);\n        }\n        throw ex;\n      }\n    } else {\n      this.config = clone(config);\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433;\n    this.config.options = this.config.options || {};\n    this.config.stream = this.config.stream || false;\n    this.config.parseJSON = this.config.parseJSON || false;\n    this.config.arrayRowMode = this.config.arrayRowMode || false;\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true;\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\n      this.config.server = RegExp.$1;\n      this.config.options.instanceName = RegExp.$2;\n    }\n    if (typeof this.config.options.useColumnNames !== 'undefined' && this.config.options.useColumnNames !== true) {\n      const ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead');\n      if (typeof callback === 'function') {\n        return setImmediate(callback, ex);\n      }\n      throw ex;\n    }\n    if (typeof callback === 'function') {\n      this.connect(callback);\n    }\n  }\n  get connected() {\n    return this._connected;\n  }\n  get connecting() {\n    return this._connecting;\n  }\n  get healthy() {\n    return this._healthy;\n  }\n  static parseConnectionString(connectionString) {\n    return this._parseConnectionString(connectionString);\n  }\n  static _parseConnectionString(connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true);\n    return Object.entries(parsed).reduce((config, _ref) => {\n      let [key, value] = _ref;\n      switch (key) {\n        case 'application name':\n          break;\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          });\n          break;\n        case 'asynchronous processing':\n          break;\n        case 'attachdbfilename':\n          break;\n        case 'authentication':\n          break;\n        case 'column encryption setting':\n          break;\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          });\n          break;\n        case 'connection lifetime':\n          break;\n        case 'connectretrycount':\n          break;\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          });\n          break;\n        case 'context connection':\n          break;\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          });\n          break;\n        case 'data source':\n          {\n            let server = value;\n            let instanceName;\n            let port = 1433;\n            if (/^np:/i.test(server)) {\n              throw new Error('Connection via Named Pipes is not supported.');\n            }\n            if (/^tcp:/i.test(server)) {\n              server = server.substr(4);\n            }\n            if (/^(.*)\\\\(.*)$/.exec(server)) {\n              server = RegExp.$1;\n              instanceName = RegExp.$2;\n            }\n            if (/^(.*),(.*)$/.exec(server)) {\n              server = RegExp.$1.trim();\n              port = parseInt(RegExp.$2.trim(), 10);\n            }\n            if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n              server = 'localhost';\n            }\n            Object.assign(config, {\n              port,\n              server\n            });\n            Object.assign(config.options, {\n              instanceName\n            });\n            break;\n          }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          });\n          break;\n        case 'enlist':\n          break;\n        case 'failover partner':\n          break;\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          });\n          break;\n        case 'integrated security':\n          break;\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          });\n          break;\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          });\n          break;\n        case 'multipleactiveresultsets':\n          break;\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          });\n          break;\n        case 'network library':\n          break;\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          });\n          break;\n        case 'password':\n          Object.assign(config, {\n            password: value\n          });\n          break;\n        case 'persist security info':\n          break;\n        case 'poolblockingperiod':\n          break;\n        case 'pooling':\n          break;\n        case 'replication':\n          break;\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          });\n          break;\n        case 'transparentnetworkipresolution':\n          break;\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          });\n          break;\n        case 'type system version':\n          break;\n        case 'user id':\n          {\n            let user = value;\n            let domain;\n            if (/^(.*)\\\\(.*)$/.exec(user)) {\n              domain = RegExp.$1;\n              user = RegExp.$2;\n            }\n            Object.assign(config, {\n              domain,\n              user\n            });\n            break;\n          }\n        case 'user instance':\n          break;\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          });\n          break;\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          });\n          break;\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          });\n          break;\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          });\n          break;\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          });\n          break;\n      }\n      return config;\n    }, {\n      options: {},\n      pool: {}\n    });\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire(requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\n      this.emit('error', err);\n      throw err;\n    });\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback);\n      return this;\n    }\n    return acquirePromise;\n  }\n  _acquire() {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'));\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'));\n    }\n    return this.pool.acquire();\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release(connection) {\n    debug('connection(%d): released', IDS.get(connection));\n    if (this.pool) {\n      this.pool.release(connection);\n    }\n    return this;\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect(callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback);\n      return this;\n    }\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err);\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect(callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this));\n      return setImmediate(callback, null, this);\n    }\n    this._connectStack.push(callback);\n    if (this._connecting) {\n      return;\n    }\n    this._connecting = true;\n    debug('pool(%d): connecting', IDS.get(this));\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then(connection => {\n      debug('pool(%d): connected', IDS.get(this));\n      this._healthy = true;\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(Object.assign({\n          create: () => this._poolCreate().then(connection => {\n            this._healthy = true;\n            return connection;\n          }).catch(err => {\n            if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n              this._healthy = false;\n            }\n            throw err;\n          }),\n          validate: this._poolValidate.bind(this),\n          destroy: this._poolDestroy.bind(this),\n          max: 10,\n          min: 0,\n          idleTimeoutMillis: 30000,\n          propagateCreateError: true\n        }, this.config.pool));\n        this._connecting = false;\n        this._connected = true;\n      });\n    }).then(() => {\n      this._connectStack.forEach(cb => {\n        setImmediate(cb, null, this);\n      });\n    }).catch(err => {\n      this._connecting = false;\n      this._connectStack.forEach(cb => {\n        setImmediate(cb, err);\n      });\n    }).then(() => {\n      this._connectStack = [];\n    });\n  }\n  get size() {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates();\n  }\n  get available() {\n    return this.pool.numFree();\n  }\n  get pending() {\n    return this.pool.numPendingAcquires();\n  }\n  get borrowed() {\n    return this.pool.numUsed();\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close(callback) {\n    if (typeof callback === 'function') {\n      this._close(callback);\n      return this;\n    }\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err);\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close(callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this));\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'));\n    }\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this));\n      return setImmediate(callback, null);\n    }\n    this._closeStack.push(callback);\n    if (this.pool.destroyed) return;\n    this._connecting = this._connected = this._healthy = false;\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this));\n      this.pool = null;\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null);\n      });\n    }).catch(err => {\n      this.pool = null;\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err);\n      });\n    }).then(() => {\n      this._closeStack = [];\n    });\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request() {\n    return new shared.driver.Request(this);\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction() {\n    return new shared.driver.Transaction(this);\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query() {\n    if (typeof arguments[0] === 'string') {\n      return new shared.driver.Request(this).query(arguments[0], arguments[1]);\n    }\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request(this)._template(strings, values, 'query');\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch() {\n    if (typeof arguments[0] === 'string') {\n      return new shared.driver.Request(this).batch(arguments[0], arguments[1]);\n    }\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return new shared.driver.Request(this)._template(strings, values, 'batch');\n  }\n}\nmodule.exports = ConnectionPool;","map":{"version":3,"names":["EventEmitter","require","debug","parseSqlConnectionString","tarn","IDS","ConnectionError","shared","clone","MSSQLError","ConnectionPool","constructor","config","callback","add","get","_connectStack","_closeStack","_connected","_connecting","_healthy","parseConnectionString","ex","setImmediate","port","options","stream","parseJSON","arrayRowMode","validateConnection","exec","server","RegExp","$1","instanceName","$2","useColumnNames","connect","connected","connecting","healthy","connectionString","_parseConnectionString","parsed","Object","entries","reduce","_ref","key","value","assign","readOnlyIntent","connectionTimeout","connectionRetryInterval","language","test","Error","substr","trim","parseInt","toLowerCase","encrypt","database","pool","max","min","multiSubnetFailover","packetSize","password","enableImplicitTransactions","trustServerCertificate","user","domain","workstationId","requestTimeout","useUTC","acquire","requester","acquirePromise","Promise","resolve","_acquire","promise","catch","err","emit","then","connection","reject","destroyed","release","_connect","push","_poolCreate","_poolDestroy","Pool","create","numUsed","numFree","validate","_poolValidate","bind","destroy","idleTimeoutMillis","propagateCreateError","forEach","cb","size","numPendingCreates","available","pending","numPendingAcquires","borrowed","close","_close","request","driver","Request","transaction","Transaction","query","arguments","values","Array","prototype","slice","call","strings","shift","_template","batch","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/connection-pool.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst debug = require('debug')('mssql:base')\nconst { parseSqlConnectionString } = require('@tediousjs/connection-string')\nconst tarn = require('tarn')\nconst { IDS } = require('../utils')\nconst ConnectionError = require('../error/connection-error')\nconst shared = require('../shared')\nconst clone = require('rfdc/default')\nconst { MSSQLError } = require('../error')\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor (config, callback) {\n    super()\n\n    IDS.add(this, 'ConnectionPool')\n    debug('pool(%d): created', IDS.get(this))\n\n    this._connectStack = []\n    this._closeStack = []\n\n    this._connected = false\n    this._connecting = false\n    this._healthy = false\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.constructor.parseConnectionString(config)\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex)\n        }\n        throw ex\n      }\n    } else {\n      this.config = clone(config)\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433\n    this.config.options = this.config.options || {}\n    this.config.stream = this.config.stream || false\n    this.config.parseJSON = this.config.parseJSON || false\n    this.config.arrayRowMode = this.config.arrayRowMode || false\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\n\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\n      this.config.server = RegExp.$1\n      this.config.options.instanceName = RegExp.$2\n    }\n\n    if (typeof this.config.options.useColumnNames !== 'undefined' && this.config.options.useColumnNames !== true) {\n      const ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead')\n      if (typeof callback === 'function') {\n        return setImmediate(callback, ex)\n      }\n      throw ex\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback)\n    }\n  }\n\n  get connected () {\n    return this._connected\n  }\n\n  get connecting () {\n    return this._connecting\n  }\n\n  get healthy () {\n    return this._healthy\n  }\n\n  static parseConnectionString (connectionString) {\n    return this._parseConnectionString(connectionString)\n  }\n\n  static _parseConnectionString (connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true)\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          })\n          break\n        case 'asynchronous processing':\n          break\n        case 'attachdbfilename':\n          break\n        case 'authentication':\n          break\n        case 'column encryption setting':\n          break\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          })\n          break\n        case 'connection lifetime':\n          break\n        case 'connectretrycount':\n          break\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          })\n          break\n        case 'context connection':\n          break\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          })\n          break\n        case 'data source':\n        {\n          let server = value\n          let instanceName\n          let port = 1433\n          if (/^np:/i.test(server)) {\n            throw new Error('Connection via Named Pipes is not supported.')\n          }\n          if (/^tcp:/i.test(server)) {\n            server = server.substr(4)\n          }\n          if (/^(.*)\\\\(.*)$/.exec(server)) {\n            server = RegExp.$1\n            instanceName = RegExp.$2\n          }\n          if (/^(.*),(.*)$/.exec(server)) {\n            server = RegExp.$1.trim()\n            port = parseInt(RegExp.$2.trim(), 10)\n          }\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n            server = 'localhost'\n          }\n          Object.assign(config, {\n            port,\n            server\n          })\n          Object.assign(config.options, {\n            instanceName\n          })\n          break\n        }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          })\n          break\n        case 'enlist':\n          break\n        case 'failover partner':\n          break\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          })\n          break\n        case 'integrated security':\n          break\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          })\n          break\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          })\n          break\n        case 'multipleactiveresultsets':\n          break\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          })\n          break\n        case 'network library':\n          break\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          })\n          break\n        case 'password':\n          Object.assign(config, {\n            password: value\n          })\n          break\n        case 'persist security info':\n          break\n        case 'poolblockingperiod':\n          break\n        case 'pooling':\n          break\n        case 'replication':\n          break\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          })\n          break\n        case 'transparentnetworkipresolution':\n          break\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          })\n          break\n        case 'type system version':\n          break\n        case 'user id': {\n          let user = value\n          let domain\n          if (/^(.*)\\\\(.*)$/.exec(user)) {\n            domain = RegExp.$1\n            user = RegExp.$2\n          }\n          Object.assign(config, {\n            domain,\n            user\n          })\n          break\n        }\n        case 'user instance':\n          break\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          })\n          break\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          })\n          break\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          })\n          break\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          })\n          break\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          })\n          break\n      }\n      return config\n    }, { options: {}, pool: {} })\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire (requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\n      this.emit('error', err)\n      throw err\n    })\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\n      return this\n    }\n\n    return acquirePromise\n  }\n\n  _acquire () {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\n    }\n\n    return this.pool.acquire()\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release (connection) {\n    debug('connection(%d): released', IDS.get(connection))\n\n    if (this.pool) {\n      this.pool.release(connection)\n    }\n    return this\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect (callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect (callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\n      return setImmediate(callback, null, this)\n    }\n\n    this._connectStack.push(callback)\n\n    if (this._connecting) {\n      return\n    }\n\n    this._connecting = true\n    debug('pool(%d): connecting', IDS.get(this))\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then((connection) => {\n      debug('pool(%d): connected', IDS.get(this))\n      this._healthy = true\n\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(\n          Object.assign({\n            create: () => this._poolCreate()\n              .then(connection => {\n                this._healthy = true\n                return connection\n              })\n              .catch(err => {\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                  this._healthy = false\n                }\n                throw err\n              }),\n            validate: this._poolValidate.bind(this),\n            destroy: this._poolDestroy.bind(this),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, this.config.pool)\n        )\n\n        this._connecting = false\n        this._connected = true\n      })\n    }).then(() => {\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, null, this)\n      })\n    }).catch(err => {\n      this._connecting = false\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._connectStack = []\n    })\n  }\n\n  get size () {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\n  }\n\n  get available () {\n    return this.pool.numFree()\n  }\n\n  get pending () {\n    return this.pool.numPendingAcquires()\n  }\n\n  get borrowed () {\n    return this.pool.numUsed()\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close (callback) {\n    if (typeof callback === 'function') {\n      this._close(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close (callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this))\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\n      return setImmediate(callback, null)\n    }\n\n    this._closeStack.push(callback)\n\n    if (this.pool.destroyed) return\n\n    this._connecting = this._connected = this._healthy = false\n\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null)\n      })\n    }).catch(err => {\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._closeStack = []\n    })\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction () {\n    return new shared.driver.Transaction(this)\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'query')\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\n  }\n}\n\nmodule.exports = ConnectionPool\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}