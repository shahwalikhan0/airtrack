{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    maxRetries = 20\n  } = options;\n  return {\n    name: redirectPolicyName,\n    async sendRequest(request, next) {\n      const response = await next(request);\n      return handleRedirect(next, response, maxRetries);\n    }\n  };\n}\nasync function handleRedirect(next, response, maxRetries) {\n  let currentRetries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  const {\n    request,\n    status,\n    headers\n  } = response;\n  const locationHeader = headers.get(\"location\");\n  if (locationHeader && (status === 300 || status === 301 && allowedRedirect.includes(request.method) || status === 302 && allowedRedirect.includes(request.method) || status === 303 && request.method === \"POST\" || status === 307) && currentRetries < maxRetries) {\n    const url = new URL(locationHeader, request.url);\n    request.url = url.toString();\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      request.headers.delete(\"Content-Length\");\n      delete request.body;\n    }\n    request.headers.delete(\"Authorization\");\n    const res = await next(request);\n    return handleRedirect(next, res, maxRetries, currentRetries + 1);\n  }\n  return response;\n}","map":{"version":3,"names":["redirectPolicyName","allowedRedirect","redirectPolicy","options","arguments","length","undefined","maxRetries","name","sendRequest","request","next","response","handleRedirect","currentRetries","status","headers","locationHeader","get","includes","method","url","URL","toString","delete","body","res"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/policies/redirectPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectPolicyOptions {\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options: RedirectPolicyOptions = {}): PipelinePolicy {\n  const { maxRetries = 20 } = options;\n  return {\n    name: redirectPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return handleRedirect(next, response, maxRetries);\n    },\n  };\n}\n\nasync function handleRedirect(\n  next: SendRequest,\n  response: PipelineResponse,\n  maxRetries: number,\n  currentRetries: number = 0\n): Promise<PipelineResponse> {\n  const { request, status, headers } = response;\n  const locationHeader = headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    currentRetries < maxRetries\n  ) {\n    const url = new URL(locationHeader, request.url);\n    request.url = url.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      request.headers.delete(\"Content-Length\");\n      delete request.body;\n    }\n\n    request.headers.delete(\"Authorization\");\n\n    const res = await next(request);\n    return handleRedirect(next, res, maxRetries, currentRetries + 1);\n  }\n\n  return response;\n}\n"],"mappings":"AAAA;AACA;AAKA;;;AAGA,OAAO,MAAMA,kBAAkB,GAAG,gBAAgB;AAElD;;;AAGA,MAAMC,eAAe,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;AAavC;;;;;;AAMA,OAAM,SAAUC,cAAcA,CAAA,EAAoC;EAAA,IAAnCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiC,EAAE;EAChE,MAAM;IAAEG,UAAU,GAAG;EAAE,CAAE,GAAGJ,OAAO;EACnC,OAAO;IACLK,IAAI,EAAER,kBAAkB;IACxB,MAAMS,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D,MAAMC,QAAQ,GAAG,MAAMD,IAAI,CAACD,OAAO,CAAC;MACpC,OAAOG,cAAc,CAACF,IAAI,EAAEC,QAAQ,EAAEL,UAAU,CAAC;IACnD;GACD;AACH;AAEA,eAAeM,cAAcA,CAC3BF,IAAiB,EACjBC,QAA0B,EAC1BL,UAAkB,EACQ;EAAA,IAA1BO,cAAA,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAyB,CAAC;EAE1B,MAAM;IAAEM,OAAO;IAAEK,MAAM;IAAEC;EAAO,CAAE,GAAGJ,QAAQ;EAC7C,MAAMK,cAAc,GAAGD,OAAO,CAACE,GAAG,CAAC,UAAU,CAAC;EAC9C,IACED,cAAc,KACbF,MAAM,KAAK,GAAG,IACZA,MAAM,KAAK,GAAG,IAAId,eAAe,CAACkB,QAAQ,CAACT,OAAO,CAACU,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAId,eAAe,CAACkB,QAAQ,CAACT,OAAO,CAACU,MAAM,CAAE,IAC3DL,MAAM,KAAK,GAAG,IAAIL,OAAO,CAACU,MAAM,KAAK,MAAO,IAC7CL,MAAM,KAAK,GAAG,CAAC,IACjBD,cAAc,GAAGP,UAAU,EAC3B;IACA,MAAMc,GAAG,GAAG,IAAIC,GAAG,CAACL,cAAc,EAAEP,OAAO,CAACW,GAAG,CAAC;IAChDX,OAAO,CAACW,GAAG,GAAGA,GAAG,CAACE,QAAQ,EAAE;IAE5B;IACA;IACA,IAAIR,MAAM,KAAK,GAAG,EAAE;MAClBL,OAAO,CAACU,MAAM,GAAG,KAAK;MACtBV,OAAO,CAACM,OAAO,CAACQ,MAAM,CAAC,gBAAgB,CAAC;MACxC,OAAOd,OAAO,CAACe,IAAI;;IAGrBf,OAAO,CAACM,OAAO,CAACQ,MAAM,CAAC,eAAe,CAAC;IAEvC,MAAME,GAAG,GAAG,MAAMf,IAAI,CAACD,OAAO,CAAC;IAC/B,OAAOG,cAAc,CAACF,IAAI,EAAEe,GAAG,EAAEnB,UAAU,EAAEO,cAAc,GAAG,CAAC,CAAC;;EAGlE,OAAOF,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}