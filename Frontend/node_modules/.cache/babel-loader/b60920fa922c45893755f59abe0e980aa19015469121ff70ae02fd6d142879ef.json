{"ast":null,"code":"'use strict';\n\nconst debug = require('debug')('mssql:base');\nconst {\n  EventEmitter\n} = require('events');\nconst {\n  Readable\n} = require('stream');\nconst {\n  IDS,\n  objectHasProperty\n} = require('../utils');\nconst globalConnection = require('../global-connection');\nconst {\n  RequestError,\n  ConnectionError\n} = require('../error');\nconst {\n  TYPES\n} = require('../datatypes');\nconst shared = require('../shared');\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\n\nclass Request extends EventEmitter {\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  constructor(parent) {\n    super();\n    IDS.add(this, 'Request');\n    debug('request(%d): created', IDS.get(this));\n    this.canceled = false;\n    this._paused = false;\n    this.parent = parent || globalConnection.pool;\n    this.parameters = {};\n    this.stream = null;\n    this.arrayRowMode = null;\n  }\n  get paused() {\n    return this._paused;\n  }\n\n  /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */\n  template() {\n    const values = Array.prototype.slice.call(arguments);\n    const strings = values.shift();\n    return this._template(strings, values);\n  }\n\n  /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */\n\n  _template(strings, values, method) {\n    const command = [strings[0]];\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index];\n      // if value is an array, prepare each items as it's own comma separated parameter\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex]);\n          command.push(`@param${index + 1}_${parameterIndex}`);\n          if (parameterIndex < value.length - 1) {\n            command.push(', ');\n          }\n        }\n        command.push(strings[index + 1]);\n      } else {\n        this.input(`param${index + 1}`, value);\n        command.push(`@param${index + 1}`, strings[index + 1]);\n      }\n    }\n    if (method) {\n      return this[method](command.join(''));\n    } else {\n      return command.join('');\n    }\n  }\n\n  /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  input(name, type, value) {\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS');\n    } else if (arguments.length === 2) {\n      value = type;\n      type = shared.getTypeByValue(value);\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n    if (value === undefined) value = null; // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n    if (type instanceof Function) type = type();\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    };\n    return this;\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput(name, type, value) {\n    delete this.parameters[name];\n    return this.input(name, type, value);\n  }\n\n  /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  output(name, type, value) {\n    if (!type) {\n      type = TYPES.NVarChar;\n    }\n    if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT');\n    }\n    if (type === TYPES.Text || type === TYPES.NText || type === TYPES.Image) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED');\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n    if (value === undefined) value = null; // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n    if (type instanceof Function) type = type();\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM');\n    }\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    };\n    return this;\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  replaceOutput(name, type, value) {\n    delete this.parameters[name];\n    return this.output(name, type, value);\n  }\n\n  /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch(batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n        if (err) return callback(err);\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        });\n      });\n      return this;\n    }\n\n    // Check is method was called as tagged template\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments);\n      const strings = values.shift();\n      batch = this._template(strings, values);\n    }\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n        if (err) return reject(err);\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        });\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */\n\n  _batch(batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n    this.canceled = false;\n    setImmediate(callback);\n  }\n\n  /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  bulk(table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else if (typeof options === 'undefined') {\n      options = {};\n    }\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          return this.emit('done', {\n            rowsAffected\n          });\n        }\n        if (err) return callback(err);\n        callback(null, {\n          rowsAffected\n        });\n      });\n      return this;\n    }\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err);\n        resolve({\n          rowsAffected\n        });\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */\n\n  _bulk(table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n    this.canceled = false;\n    setImmediate(callback);\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */\n  toReadableStream() {\n    let streamOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.stream = true;\n    this.pause();\n    const readableStream = new Readable({\n      ...streamOptions,\n      objectMode: true,\n      read: ( /* size */\n      ) => {\n        this.resume();\n      }\n    });\n    this.on('row', row => {\n      if (!readableStream.push(row)) {\n        this.pause();\n      }\n    });\n    this.on('error', error => {\n      readableStream.emit('error', error);\n    });\n    this.on('done', () => {\n      readableStream.push(null);\n    });\n    return readableStream;\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */\n  pipe(writableStream) {\n    const readableStream = this.toReadableStream();\n    return readableStream.pipe(writableStream);\n  }\n\n  /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query(command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n        if (err) return callback(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        callback(null, result);\n      });\n      return this;\n    }\n\n    // Check is method was called as tagged template\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments);\n      const strings = values.shift();\n      command = this._template(strings, values);\n    }\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected\n          });\n        }\n        if (err) return reject(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */\n\n  _query(command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n    this.canceled = false;\n    setImmediate(callback);\n  }\n\n  /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute(command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n    this.rowsAffected = 0;\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          });\n        }\n        if (err) return callback(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        callback(null, result);\n      });\n      return this;\n    }\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err);\n          err = null;\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          });\n        }\n        if (err) return reject(err);\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        };\n        if (this.arrayRowMode) result.columns = columns;\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */\n\n  _execute(procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n    }\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n    }\n    this.canceled = false;\n    setImmediate(callback);\n  }\n\n  /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */\n\n  cancel() {\n    this._cancel();\n    return true;\n  }\n\n  /**\n   * @private\n   */\n\n  _cancel() {\n    this.canceled = true;\n  }\n  pause() {\n    if (this.stream) {\n      this._pause();\n      return true;\n    }\n    return false;\n  }\n  _pause() {\n    this._paused = true;\n  }\n  resume() {\n    if (this.stream) {\n      this._resume();\n      return true;\n    }\n    return false;\n  }\n  _resume() {\n    this._paused = false;\n  }\n  _setCurrentRequest(request) {\n    this._currentRequest = request;\n    if (this._paused) {\n      this.pause();\n    }\n    return this;\n  }\n}\nmodule.exports = Request;","map":{"version":3,"names":["debug","require","EventEmitter","Readable","IDS","objectHasProperty","globalConnection","RequestError","ConnectionError","TYPES","shared","Request","constructor","parent","add","get","canceled","_paused","pool","parameters","stream","arrayRowMode","paused","template","values","Array","prototype","slice","call","arguments","strings","shift","_template","method","command","index","length","value","isArray","parameterIndex","input","push","join","name","type","test","getTypeByValue","valueOf","Date","undefined","isNaN","Function","io","scale","precision","tvpType","replaceInput","output","NVarChar","Text","NText","Image","replaceOutput","batch","callback","config","rowsAffected","_batch","err","recordsets","emit","recordset","Promise","resolve","reject","setImmediate","connected","bulk","table","options","_bulk","toReadableStream","streamOptions","pause","readableStream","objectMode","read","resume","on","row","error","pipe","writableStream","query","_query","columns","result","execute","_execute","returnValue","procedure","cancel","_cancel","_pause","_resume","_setCurrentRequest","request","_currentRequest","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/request.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:base')\nconst { EventEmitter } = require('events')\nconst { Readable } = require('stream')\nconst { IDS, objectHasProperty } = require('../utils')\nconst globalConnection = require('../global-connection')\nconst { RequestError, ConnectionError } = require('../error')\nconst { TYPES } = require('../datatypes')\nconst shared = require('../shared')\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\n\nclass Request extends EventEmitter {\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Request')\n    debug('request(%d): created', IDS.get(this))\n\n    this.canceled = false\n    this._paused = false\n    this.parent = parent || globalConnection.pool\n    this.parameters = {}\n    this.stream = null\n    this.arrayRowMode = null\n  }\n\n  get paused () {\n    return this._paused\n  }\n\n  /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */\n  template () {\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n    return this._template(strings, values)\n  }\n\n  /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */\n\n  _template (strings, values, method) {\n    const command = [strings[0]]\n\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index]\n      // if value is an array, prepare each items as it's own comma separated parameter\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\n          command.push(`@param${index + 1}_${parameterIndex}`)\n          if (parameterIndex < value.length - 1) {\n            command.push(', ')\n          }\n        }\n        command.push(strings[index + 1])\n      } else {\n        this.input(`param${index + 1}`, value)\n        command.push(`@param${index + 1}`, strings[index + 1])\n      }\n    }\n\n    if (method) {\n      return this[method](command.join(''))\n    } else {\n      return command.join('')\n    }\n  }\n\n  /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  input (name, type, value) {\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\n    } else if (arguments.length === 2) {\n      value = type\n      type = shared.getTypeByValue(value)\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  output (name, type, value) {\n    if (!type) { type = TYPES.NVarChar }\n\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  replaceOutput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.output(name, type, value)\n  }\n\n  /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch (batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      batch = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */\n\n  _batch (batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  bulk (table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    } else if (typeof options === 'undefined') {\n      options = {}\n    }\n\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          return this.emit('done', {\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err)\n        resolve({\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */\n\n  _bulk (table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */\n  toReadableStream (streamOptions = {}) {\n    this.stream = true\n    this.pause()\n    const readableStream = new Readable({\n      ...streamOptions,\n      objectMode: true,\n      read: (/* size */) => {\n        this.resume()\n      }\n    })\n    this.on('row', (row) => {\n      if (!readableStream.push(row)) {\n        this.pause()\n      }\n    })\n    this.on('error', (error) => {\n      readableStream.emit('error', error)\n    })\n    this.on('done', () => {\n      readableStream.push(null)\n    })\n    return readableStream\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */\n  pipe (writableStream) {\n    const readableStream = this.toReadableStream()\n    return readableStream.pipe(writableStream)\n  }\n\n  /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      command = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */\n\n  _query (command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */\n\n  _execute (procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */\n\n  cancel () {\n    this._cancel()\n    return true\n  }\n\n  /**\n   * @private\n   */\n\n  _cancel () {\n    this.canceled = true\n  }\n\n  pause () {\n    if (this.stream) {\n      this._pause()\n      return true\n    }\n    return false\n  }\n\n  _pause () {\n    this._paused = true\n  }\n\n  resume () {\n    if (this.stream) {\n      this._resume()\n      return true\n    }\n    return false\n  }\n\n  _resume () {\n    this._paused = false\n  }\n\n  _setCurrentRequest (request) {\n    this._currentRequest = request\n    if (this._paused) {\n      this.pause()\n    }\n    return this\n  }\n}\n\nmodule.exports = Request\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}