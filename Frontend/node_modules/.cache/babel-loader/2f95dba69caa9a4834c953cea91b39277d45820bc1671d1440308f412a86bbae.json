{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnexpectedTokenError = exports.TokenHandler = exports.RequestTokenHandler = exports.Login7TokenHandler = exports.InitialSqlTokenHandler = exports.AttentionTokenHandler = void 0;\nvar _request = _interopRequireDefault(require(\"../request\"));\nvar _errors = require(\"../errors\");\nvar _esAggregateError = _interopRequireDefault(require(\"es-aggregate-error\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass UnexpectedTokenError extends Error {\n  constructor(handler, token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\nexports.UnexpectedTokenError = UnexpectedTokenError;\nclass TokenHandler {\n  onInfoMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onErrorMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSSPI(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLanguageChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCharsetChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSqlCollationChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRoutingChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onPacketSizeChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onResetConnection(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onBeginTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCommitTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRollbackTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFedAuthInfo(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFeatureExtAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLoginAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onColMetadata(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onOrder(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRow(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnStatus(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnValue(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneInProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDone(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseMirroringPartner(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\n\nexports.TokenHandler = TokenHandler;\nclass InitialSqlTokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onOrder(token) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onRow(token) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onReturnStatus(token) {// Do nothing\n  }\n  onReturnValue(token) {// Do nothing\n  }\n  onDoneProc(token) {// Do nothing\n  }\n  onDoneInProc(token) {// Do nothing\n  }\n  onDone(token) {// Do nothing\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\n\nexports.InitialSqlTokenHandler = InitialSqlTokenHandler;\nclass Login7TokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = void 0;\n    this.fedAuthInfoToken = void 0;\n    this.routingData = void 0;\n    this.loginAckReceived = false;\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    const error = new _errors.ConnectionError(token.message, 'ELOGIN');\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n    this.connection.loginError = error;\n  }\n  onSSPI(token) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onFedAuthInfo(token) {\n    this.fedAuthInfoToken = token;\n  }\n  onFeatureExtAck(token) {\n    const {\n      authentication\n    } = this.connection.config;\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new _errors.ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new _errors.ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new _errors.ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new _errors.ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n  onLoginAck(token) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    } // use negotiated version\n\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n    this.loginAckReceived = true;\n  }\n  onRoutingChange(token) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [server] = token.newValue.server.split('\\\\');\n    this.routingData = {\n      server,\n      port: token.newValue.port\n    };\n  }\n  onDoneInProc(token) {// Do nothing\n  }\n  onDone(token) {// Do nothing\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onDatabaseMirroringPartner(token) {// Do nothing\n  }\n}\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\n\nexports.Login7TokenHandler = Login7TokenHandler;\nclass RequestTokenHandler extends TokenHandler {\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.errors = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    if (!this.request.canceled) {\n      const error = new _errors.RequestError(token.message, 'EREQUEST');\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof _request.default && this.errors.length > 1) {\n        this.request.error = new _esAggregateError.default(this.errors);\n      }\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1; // An outermost transaction was rolled back. Reset the transaction counter\n\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns = Object.create(null);\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n  onOrder(token) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n  onRow(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows.push(token.columns);\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst.push(token.columns);\n      }\n      this.request.emit('row', token.columns);\n    }\n  }\n  onReturnStatus(token) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n  onReturnValue(token) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n  onDoneProc(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n      this.connection.procReturnStatusValue = undefined;\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDoneInProc(token) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDone(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\n\nexports.RequestTokenHandler = RequestTokenHandler;\nclass AttentionTokenHandler extends TokenHandler {\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  constructor(connection, request) {\n    super();\n    this.connection = void 0;\n    this.request = void 0;\n    this.attentionReceived = void 0;\n    this.connection = connection;\n    this.request = request;\n    this.attentionReceived = false;\n  }\n  onDone(token) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\nexports.AttentionTokenHandler = AttentionTokenHandler;","map":{"version":3,"names":["_request","_interopRequireDefault","require","_errors","_esAggregateError","UnexpectedTokenError","Error","constructor","handler","token","name","TokenHandler","onInfoMessage","onErrorMessage","onSSPI","onDatabaseChange","onLanguageChange","onCharsetChange","onSqlCollationChange","onRoutingChange","onPacketSizeChange","onResetConnection","onBeginTransaction","onCommitTransaction","onRollbackTransaction","onFedAuthInfo","onFeatureExtAck","onLoginAck","onColMetadata","onOrder","onRow","onReturnStatus","onReturnValue","onDoneProc","onDoneInProc","onDone","onDatabaseMirroringPartner","InitialSqlTokenHandler","connection","emit","newValue","databaseCollation","messageIo","packetSize","transactionDescriptors","push","inTransaction","length","close","Login7TokenHandler","fedAuthInfoToken","routingData","loginAckReceived","error","ConnectionError","message","isLoginErrorTransient","transientErrorLookup","isTransientError","number","curTransientRetryCount","config","options","maxRetriesOnTransientErrors","isTransient","loginError","ntlmpacket","ntlmpacketBuffer","authentication","type","fedAuth","undefined","utf8Support","tdsVersion","interface","server","split","port","RequestTokenHandler","request","errors","canceled","RequestError","state","class","serverName","procName","lineNumber","default","useColumnNames","columns","Object","create","j","len","col","colName","orderColumns","rowCollectionOnRequestCompletion","rows","rowCollectionOnDone","rst","procReturnStatusValue","value","paramName","metadata","sqlError","rowCount","more","AttentionTokenHandler","attentionReceived","attention"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/token/handler.ts"],"sourcesContent":["import Connection from '../connection';\nimport Request from '../request';\nimport { ConnectionError, RequestError } from '../errors';\nimport { ColumnMetadata } from './colmetadata-token-parser';\nimport {\n  BeginTransactionEnvChangeToken,\n  CharsetEnvChangeToken,\n  CollationChangeToken,\n  ColMetadataToken,\n  CommitTransactionEnvChangeToken,\n  DatabaseEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  DoneInProcToken,\n  DoneProcToken,\n  DoneToken,\n  ErrorMessageToken,\n  FeatureExtAckToken,\n  FedAuthInfoToken,\n  InfoMessageToken,\n  LanguageEnvChangeToken,\n  LoginAckToken,\n  NBCRowToken,\n  OrderToken,\n  PacketSizeEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  ReturnStatusToken,\n  ReturnValueToken,\n  RollbackTransactionEnvChangeToken,\n  RoutingEnvChangeToken,\n  RowToken,\n  SSPIToken,\n  Token\n} from './token';\nimport BulkLoad from '../bulk-load';\n\nimport AggregateError from 'es-aggregate-error';\n\nexport class UnexpectedTokenError extends Error {\n  constructor(handler: TokenHandler, token: Token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\n\nexport class TokenHandler {\n  onInfoMessage(token: InfoMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSSPI(token: SSPIToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onOrder(token: OrderToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDone(token: DoneToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\nexport class InitialSqlTokenHandler extends TokenHandler {\n  connection: Connection;\n\n  constructor(connection: Connection) {\n    super();\n\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onOrder(token: OrderToken) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    // Do nothing\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    // Do nothing\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    // Do nothing\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\nexport class Login7TokenHandler extends TokenHandler {\n  connection: Connection;\n\n  fedAuthInfoToken: FedAuthInfoToken | undefined;\n  routingData: { server: string, port: number } | undefined;\n\n  loginAckReceived = false;\n\n  constructor(connection: Connection) {\n    super();\n\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    const error = new ConnectionError(token.message, 'ELOGIN');\n\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n\n    this.connection.loginError = error;\n  }\n\n  onSSPI(token: SSPIToken) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    this.fedAuthInfoToken = token;\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    const { authentication } = this.connection.config;\n\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    }\n\n    // use negotiated version\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n\n    this.loginAckReceived = true;\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [ server ] = token.newValue.server.split('\\\\');\n\n    this.routingData = {\n      server, port: token.newValue.port\n    };\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    // Do nothing\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\nexport class RequestTokenHandler extends TokenHandler {\n  connection: Connection;\n  request: Request | BulkLoad;\n  errors: RequestError[];\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    if (!this.request.canceled) {\n      const error = new RequestError(token.message, 'EREQUEST');\n\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof Request && this.errors.length > 1) {\n        this.request.error = new AggregateError(this.errors);\n      }\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns: { [key: string]: ColumnMetadata } = Object.create(null);\n\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n\n  onOrder(token: OrderToken) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows!.push(token.columns);\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst!.push(token.columns);\n      }\n\n      this.request.emit('row', token.columns);\n    }\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n\n      this.connection.procReturnStatusValue = undefined;\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDone(token: DoneToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\nexport class AttentionTokenHandler extends TokenHandler {\n  connection: Connection;\n  request: Request | BulkLoad;\n\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  attentionReceived: boolean;\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n\n    this.attentionReceived = false;\n  }\n\n  onDone(token: DoneToken) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}