{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _writableTrackingBuffer = _interopRequireDefault(require(\"../tracking-buffer/writable-tracking-buffer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst TVP_ROW_TOKEN = Buffer.from([0x01]);\nconst TVP_END_TOKEN = Buffer.from([0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst TVP = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    return value.name + ' readonly';\n  },\n  generateTypeInfo(parameter) {\n    var _parameter$value, _parameter$value2;\n    const databaseName = '';\n    const schema = ((_parameter$value = parameter.value) === null || _parameter$value === void 0 ? void 0 : _parameter$value.schema) ?? '';\n    const typeName = ((_parameter$value2 = parameter.value) === null || _parameter$value2 === void 0 ? void 0 : _parameter$value2.name) ?? '';\n    const bufferLength = 1 + 1 + Buffer.byteLength(databaseName, 'ucs2') + 1 + Buffer.byteLength(schema, 'ucs2') + 1 + Buffer.byteLength(typeName, 'ucs2');\n    const buffer = new _writableTrackingBuffer.default(bufferLength, 'ucs2');\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar(databaseName);\n    buffer.writeBVarchar(schema);\n    buffer.writeBVarchar(typeName);\n    return buffer.data;\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n    const {\n      columns\n    } = parameter.value;\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(columns.length, 0);\n    return buffer;\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      yield TVP_END_TOKEN;\n      yield TVP_END_TOKEN;\n      return;\n    }\n    const {\n      columns,\n      rows\n    } = parameter.value;\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n      const buff = Buffer.alloc(6); // UserType\n\n      buff.writeUInt32LE(0x00000000, 0); // Flags\n\n      buff.writeUInt16LE(0x0000, 4);\n      yield buff; // TYPE_INFO\n\n      yield column.type.generateTypeInfo(column); // ColName\n\n      yield Buffer.from([0x00]);\n    }\n    yield TVP_END_TOKEN;\n    for (let i = 0, length = rows.length; i < length; i++) {\n      yield TVP_ROW_TOKEN;\n      const row = rows[i];\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const column = columns[k];\n        const value = row[k];\n        const param = {\n          value: column.type.validate(value, parameter.collation),\n          length: column.length,\n          scale: column.scale,\n          precision: column.precision\n        }; // TvpColumnData\n\n        yield column.type.generateParameterLength(param, options);\n        yield* column.type.generateParameterData(param, options);\n      }\n    }\n    yield TVP_END_TOKEN;\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value !== 'object') {\n      throw new TypeError('Invalid table.');\n    }\n    if (!Array.isArray(value.columns)) {\n      throw new TypeError('Invalid table.');\n    }\n    if (!Array.isArray(value.rows)) {\n      throw new TypeError('Invalid table.');\n    }\n    return value;\n  }\n};\nvar _default = TVP;\nexports.default = _default;\nmodule.exports = TVP;","map":{"version":3,"names":["_writableTrackingBuffer","_interopRequireDefault","require","TVP_ROW_TOKEN","Buffer","from","TVP_END_TOKEN","NULL_LENGTH","TVP","id","type","name","declaration","parameter","value","generateTypeInfo","_parameter$value","_parameter$value2","databaseName","schema","typeName","bufferLength","byteLength","buffer","default","writeUInt8","writeBVarchar","data","generateParameterLength","options","columns","alloc","writeUInt16LE","length","generateParameterData","rows","i","len","column","buff","writeUInt32LE","row","k","len2","param","validate","collation","scale","precision","TypeError","Array","isArray","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-types/tvp.ts"],"sourcesContent":["import { DataType } from '../data-type';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst TVP_ROW_TOKEN = Buffer.from([0x01]);\nconst TVP_END_TOKEN = Buffer.from([0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst TVP: DataType = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n\n  declaration: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    return value.name + ' readonly';\n  },\n\n  generateTypeInfo(parameter) {\n    const databaseName = '';\n    const schema = parameter.value?.schema ?? '';\n    const typeName = parameter.value?.name ?? '';\n\n    const bufferLength = 1 +\n      1 + Buffer.byteLength(databaseName, 'ucs2') +\n      1 + Buffer.byteLength(schema, 'ucs2') +\n      1 + Buffer.byteLength(typeName, 'ucs2');\n\n    const buffer = new WritableTrackingBuffer(bufferLength, 'ucs2');\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar(databaseName);\n    buffer.writeBVarchar(schema);\n    buffer.writeBVarchar(typeName);\n\n    return buffer.data;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const { columns } = parameter.value;\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(columns.length, 0);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      yield TVP_END_TOKEN;\n      yield TVP_END_TOKEN;\n      return;\n    }\n\n    const { columns, rows } = parameter.value;\n\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n\n      const buff = Buffer.alloc(6);\n      // UserType\n      buff.writeUInt32LE(0x00000000, 0);\n\n      // Flags\n      buff.writeUInt16LE(0x0000, 4);\n      yield buff;\n\n      // TYPE_INFO\n      yield column.type.generateTypeInfo(column);\n\n      // ColName\n      yield Buffer.from([0x00]);\n    }\n\n    yield TVP_END_TOKEN;\n\n    for (let i = 0, length = rows.length; i < length; i++) {\n      yield TVP_ROW_TOKEN;\n\n      const row = rows[i];\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const column = columns[k];\n        const value = row[k];\n\n        const param = {\n          value: column.type.validate(value, parameter.collation),\n          length: column.length,\n          scale: column.scale,\n          precision: column.precision\n        };\n\n        // TvpColumnData\n        yield column.type.generateParameterLength(param, options);\n        yield * column.type.generateParameterData(param, options);\n      }\n    }\n\n    yield TVP_END_TOKEN;\n  },\n\n  validate: function(value): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      throw new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      throw new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      throw new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\n\nexport default TVP;\nmodule.exports = TVP;\n"],"mappings":";;;;;;AACA,IAAAA,uBAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;AAEA,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAtB;AACA,MAAMC,aAAa,GAAGF,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAtB;AAEA,MAAME,WAAW,GAAGH,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,CAAZ,CAApB;AAEA,MAAMG,GAAa,GAAG;EACpBC,EAAE,EAAE,IADgB;EAEpBC,IAAI,EAAE,SAFc;EAGpBC,IAAI,EAAE,KAHc;EAKpBC,WAAW,EAAE,SAAAA,CAASC,SAAT,EAAoB;IAC/B,MAAMC,KAAK,GAAGD,SAAS,CAACC,KAAxB,CAD+B,CACO;;IACtC,OAAOA,KAAK,CAACH,IAAN,GAAa,WAApB;EACD,CARmB;EAUpBI,gBAAgBA,CAACF,SAAD,EAAY;IAAA,IAAAG,gBAAA,EAAAC,iBAAA;IAC1B,MAAMC,YAAY,GAAG,EAArB;IACA,MAAMC,MAAM,GAAG,EAAAH,gBAAA,GAAAH,SAAS,CAACC,KAAV,cAAAE,gBAAA,uBAAAA,gBAAA,CAAiBG,MAAjB,KAA2B,EAA1C;IACA,MAAMC,QAAQ,GAAG,EAAAH,iBAAA,GAAAJ,SAAS,CAACC,KAAV,cAAAG,iBAAA,uBAAAA,iBAAA,CAAiBN,IAAjB,KAAyB,EAA1C;IAEA,MAAMU,YAAY,GAAG,IACnB,CADmB,GACfjB,MAAM,CAACkB,UAAP,CAAkBJ,YAAlB,EAAgC,MAAhC,CADe,GAEnB,CAFmB,GAEfd,MAAM,CAACkB,UAAP,CAAkBH,MAAlB,EAA0B,MAA1B,CAFe,GAGnB,CAHmB,GAGff,MAAM,CAACkB,UAAP,CAAkBF,QAAlB,EAA4B,MAA5B,CAHN;IAKA,MAAMG,MAAM,GAAG,IAAIvB,uBAAA,CAAAwB,OAAJ,CAA2BH,YAA3B,EAAyC,MAAzC,CAAf;IACAE,MAAM,CAACE,UAAP,CAAkB,KAAKhB,EAAvB;IACAc,MAAM,CAACG,aAAP,CAAqBR,YAArB;IACAK,MAAM,CAACG,aAAP,CAAqBP,MAArB;IACAI,MAAM,CAACG,aAAP,CAAqBN,QAArB;IAEA,OAAOG,MAAM,CAACI,IAAd;EACD,CA3BmB;EA6BpBC,uBAAuBA,CAACf,SAAD,EAAYgB,OAAZ,EAAqB;IAC1C,IAAIhB,SAAS,CAACC,KAAV,IAAmB,IAAvB,EAA6B;MAC3B,OAAOP,WAAP;IACD;IAED,MAAM;MAAEuB;IAAF,IAAcjB,SAAS,CAACC,KAA9B;IACA,MAAMS,MAAM,GAAGnB,MAAM,CAAC2B,KAAP,CAAa,CAAb,CAAf;IACAR,MAAM,CAACS,aAAP,CAAqBF,OAAO,CAACG,MAA7B,EAAqC,CAArC;IACA,OAAOV,MAAP;EACD,CAtCmB;EAwCpB,CAACW,qBAADA,CAAuBrB,SAAvB,EAAkCgB,OAAlC,EAA2C;IACzC,IAAIhB,SAAS,CAACC,KAAV,IAAmB,IAAvB,EAA6B;MAC3B,MAAMR,aAAN;MACA,MAAMA,aAAN;MACA;IACD;IAED,MAAM;MAAEwB,OAAF;MAAWK;IAAX,IAAoBtB,SAAS,CAACC,KAApC;IAEA,KAAK,IAAIsB,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGP,OAAO,CAACG,MAA9B,EAAsCG,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,EAAhD,EAAoD;MAClD,MAAME,MAAM,GAAGR,OAAO,CAACM,CAAD,CAAtB;MAEA,MAAMG,IAAI,GAAGnC,MAAM,CAAC2B,KAAP,CAAa,CAAb,CAAb,CAHkD,CAIlD;;MACAQ,IAAI,CAACC,aAAL,CAAmB,UAAnB,EAA+B,CAA/B,EALkD,CAOlD;;MACAD,IAAI,CAACP,aAAL,CAAmB,MAAnB,EAA2B,CAA3B;MACA,MAAMO,IAAN,CATkD,CAWlD;;MACA,MAAMD,MAAM,CAAC5B,IAAP,CAAYK,gBAAZ,CAA6BuB,MAA7B,CAAN,CAZkD,CAclD;;MACA,MAAMlC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAAN;IACD;IAED,MAAMC,aAAN;IAEA,KAAK,IAAI8B,CAAC,GAAG,CAAR,EAAWH,MAAM,GAAGE,IAAI,CAACF,MAA9B,EAAsCG,CAAC,GAAGH,MAA1C,EAAkDG,CAAC,EAAnD,EAAuD;MACrD,MAAMjC,aAAN;MAEA,MAAMsC,GAAG,GAAGN,IAAI,CAACC,CAAD,CAAhB;MACA,KAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAGF,GAAG,CAACR,MAA3B,EAAmCS,CAAC,GAAGC,IAAvC,EAA6CD,CAAC,EAA9C,EAAkD;QAChD,MAAMJ,MAAM,GAAGR,OAAO,CAACY,CAAD,CAAtB;QACA,MAAM5B,KAAK,GAAG2B,GAAG,CAACC,CAAD,CAAjB;QAEA,MAAME,KAAK,GAAG;UACZ9B,KAAK,EAAEwB,MAAM,CAAC5B,IAAP,CAAYmC,QAAZ,CAAqB/B,KAArB,EAA4BD,SAAS,CAACiC,SAAtC,CADK;UAEZb,MAAM,EAAEK,MAAM,CAACL,MAFH;UAGZc,KAAK,EAAET,MAAM,CAACS,KAHF;UAIZC,SAAS,EAAEV,MAAM,CAACU;QAJN,CAAd,CAJgD,CAWhD;;QACA,MAAMV,MAAM,CAAC5B,IAAP,CAAYkB,uBAAZ,CAAoCgB,KAApC,EAA2Cf,OAA3C,CAAN;QACA,OAAQS,MAAM,CAAC5B,IAAP,CAAYwB,qBAAZ,CAAkCU,KAAlC,EAAyCf,OAAzC,CAAR;MACD;IACF;IAED,MAAMvB,aAAN;EACD,CA3FmB;EA6FpBuC,QAAQ,EAAE,SAAAA,CAAS/B,KAAT,EAA+B;IACvC,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjB,OAAO,IAAP;IACD;IAED,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAM,IAAImC,SAAJ,CAAc,gBAAd,CAAN;IACD;IAED,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcrC,KAAK,CAACgB,OAApB,CAAL,EAAmC;MACjC,MAAM,IAAImB,SAAJ,CAAc,gBAAd,CAAN;IACD;IAED,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcrC,KAAK,CAACqB,IAApB,CAAL,EAAgC;MAC9B,MAAM,IAAIc,SAAJ,CAAc,gBAAd,CAAN;IACD;IAED,OAAOnC,KAAP;EACD;AA/GmB,CAAtB;eAkHeN,G;;AACf4C,MAAM,CAACC,OAAP,GAAiB7C,GAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}