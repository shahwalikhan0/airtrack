{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\nimport { checkTenantId } from \"../util/checkTenantId\";\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential {\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Azure Active Directory with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(tenantIdOrName, clientId, username, password, options) {\n    checkTenantId(logger, tenantIdOrName);\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes, options) {\n    const {\n      span,\n      updatedOptions: newOptions\n    } = tracingClient.startSpan(\"UsernamePasswordCredential.getToken\", options);\n    try {\n      const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n      const params = new URLSearchParams({\n        response_type: \"token\",\n        grant_type: \"password\",\n        client_id: this.clientId,\n        username: this.username,\n        password: this.password,\n        scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \")\n      });\n      const webResource = createPipelineRequest({\n        url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n        method: \"POST\",\n        body: params.toString(),\n        headers: createHttpHeaders({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }),\n        abortSignal: options && options.abortSignal,\n        tracingOptions: newOptions.tracingOptions\n      });\n      const tokenResponse = await this.identityClient.sendTokenRequest(webResource);\n      logger.getToken.info(formatSuccess(scopes));\n      return tokenResponse && tokenResponse.accessToken || null;\n    } catch (err) {\n      span.setStatus({\n        status: \"error\",\n        error: err\n      });\n      logger.getToken.info(formatError(scopes, err));\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n}","map":{"version":3,"names":["createHttpHeaders","createPipelineRequest","IdentityClient","credentialLogger","formatError","formatSuccess","getIdentityTokenEndpointSuffix","tracingClient","checkTenantId","logger","UsernamePasswordCredential","constructor","tenantIdOrName","clientId","username","password","options","identityClient","tenantId","getToken","scopes","span","updatedOptions","newOptions","startSpan","urlSuffix","params","URLSearchParams","response_type","grant_type","client_id","scope","join","webResource","url","authorityHost","method","body","toString","headers","Accept","abortSignal","tracingOptions","tokenResponse","sendTokenRequest","info","accessToken","err","setStatus","status","error","end"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/identity/src/credentials/usernamePasswordCredential.browser.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\nimport { checkTenantId } from \"../util/checkTenantId\";\n\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private clientId: string;\n  private username: string;\n  private password: string;\n\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Azure Active Directory with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantIdOrName: string,\n    clientId: string,\n    username: string,\n    password: string,\n    options?: TokenCredentialOptions\n  ) {\n    checkTenantId(logger, tenantIdOrName);\n\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options?: GetTokenOptions\n  ): Promise<AccessToken | null> {\n    const { span, updatedOptions: newOptions } = tracingClient.startSpan(\n      \"UsernamePasswordCredential.getToken\",\n      options\n    );\n    try {\n      const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n      const params = new URLSearchParams({\n        response_type: \"token\",\n        grant_type: \"password\",\n        client_id: this.clientId,\n        username: this.username,\n        password: this.password,\n        scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n      });\n      const webResource = createPipelineRequest({\n        url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n        method: \"POST\",\n        body: params.toString(),\n        headers: createHttpHeaders({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        }),\n        abortSignal: options && options.abortSignal,\n        tracingOptions: newOptions.tracingOptions,\n      });\n\n      const tokenResponse = await this.identityClient.sendTokenRequest(webResource);\n      logger.getToken.info(formatSuccess(scopes));\n      return (tokenResponse && tokenResponse.accessToken) || null;\n    } catch (err: any) {\n      span.setStatus({\n        status: \"error\",\n        error: err,\n      });\n      logger.getToken.info(formatError(scopes, err));\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AAGA,SAASA,iBAAiB,EAAEC,qBAAqB,QAAQ,2BAA2B;AACpF,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,iBAAiB;AAC9E,SAASC,8BAA8B,QAAQ,+BAA+B;AAC9E,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,aAAa,QAAQ,uBAAuB;AAErD,MAAMC,MAAM,GAAGN,gBAAgB,CAAC,4BAA4B,CAAC;AAE7D;;;;;;AAMA,OAAM,MAAOO,0BAA0B;EAOrC;;;;;;;;;;;EAWAC,YACEC,cAAsB,EACtBC,QAAgB,EAChBC,QAAgB,EAChBC,QAAgB,EAChBC,OAAgC;IAEhCR,aAAa,CAACC,MAAM,EAAEG,cAAc,CAAC;IAErC,IAAI,CAACK,cAAc,GAAG,IAAIf,cAAc,CAACc,OAAO,CAAC;IACjD,IAAI,CAACE,QAAQ,GAAGN,cAAc;IAC9B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEA;;;;;;;;;;EAUO,MAAMI,QAAQA,CACnBC,MAAyB,EACzBJ,OAAyB;IAEzB,MAAM;MAAEK,IAAI;MAAEC,cAAc,EAAEC;IAAU,CAAE,GAAGhB,aAAa,CAACiB,SAAS,CAClE,qCAAqC,EACrCR,OAAO,CACR;IACD,IAAI;MACF,MAAMS,SAAS,GAAGnB,8BAA8B,CAAC,IAAI,CAACY,QAAQ,CAAC;MAC/D,MAAMQ,MAAM,GAAG,IAAIC,eAAe,CAAC;QACjCC,aAAa,EAAE,OAAO;QACtBC,UAAU,EAAE,UAAU;QACtBC,SAAS,EAAE,IAAI,CAACjB,QAAQ;QACxBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBgB,KAAK,EAAE,OAAOX,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACY,IAAI,CAAC,GAAG;OAC7D,CAAC;MACF,MAAMC,WAAW,GAAGhC,qBAAqB,CAAC;QACxCiC,GAAG,EAAE,GAAG,IAAI,CAACjB,cAAc,CAACkB,aAAa,IAAI,IAAI,CAACjB,QAAQ,IAAIO,SAAS,EAAE;QACzEW,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEX,MAAM,CAACY,QAAQ,EAAE;QACvBC,OAAO,EAAEvC,iBAAiB,CAAC;UACzBwC,MAAM,EAAE,kBAAkB;UAC1B,cAAc,EAAE;SACjB,CAAC;QACFC,WAAW,EAAEzB,OAAO,IAAIA,OAAO,CAACyB,WAAW;QAC3CC,cAAc,EAAEnB,UAAU,CAACmB;OAC5B,CAAC;MAEF,MAAMC,aAAa,GAAG,MAAM,IAAI,CAAC1B,cAAc,CAAC2B,gBAAgB,CAACX,WAAW,CAAC;MAC7ExB,MAAM,CAACU,QAAQ,CAAC0B,IAAI,CAACxC,aAAa,CAACe,MAAM,CAAC,CAAC;MAC3C,OAAQuB,aAAa,IAAIA,aAAa,CAACG,WAAW,IAAK,IAAI;KAC5D,CAAC,OAAOC,GAAQ,EAAE;MACjB1B,IAAI,CAAC2B,SAAS,CAAC;QACbC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAEH;OACR,CAAC;MACFtC,MAAM,CAACU,QAAQ,CAAC0B,IAAI,CAACzC,WAAW,CAACgB,MAAM,EAAE2B,GAAG,CAAC,CAAC;MAC9C,MAAMA,GAAG;KACV,SAAS;MACR1B,IAAI,CAAC8B,GAAG,EAAE;;EAEd"},"metadata":{},"sourceType":"module","externalDependencies":[]}