{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\nconst NVarChar = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n  declaration: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n  resolveLength: function (parameter) {\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return value.length / 2 || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    if (parameter.length <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n    return buffer;\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n    let value = parameter.value;\n    if (parameter.length <= this.maximumLength) {\n      let length;\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    let value = parameter.value;\n    if (parameter.length <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n      yield PLP_TERMINATOR;\n    }\n  },\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n    return value;\n  }\n};\nvar _default = NVarChar;\nexports.default = _default;\nmodule.exports = NVarChar;","map":{"version":3,"names":["MAX","UNKNOWN_PLP_LEN","Buffer","from","PLP_TERMINATOR","NULL_LENGTH","MAX_NULL_LENGTH","NVarChar","id","type","name","maximumLength","declaration","parameter","value","length","toString","output","resolveLength","isBuffer","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","collation","toBuffer","copy","generateParameterLength","options","byteLength","generateParameterData","writeUInt32LE","validate","TypeError","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-types/nvarchar.ts"],"sourcesContent":["import { DataType } from '../data-type';\n\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst NVarChar: { maximumLength: number } & DataType = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return (value.length / 2) || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length! <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length! * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length! <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n    if (parameter.length! <= this.maximumLength) {\n      let length;\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length! <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function(value): null | string {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    return value;\n  }\n};\n\nexport default NVarChar;\nmodule.exports = NVarChar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}