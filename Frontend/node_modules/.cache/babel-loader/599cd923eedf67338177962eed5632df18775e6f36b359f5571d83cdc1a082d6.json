{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeByName = exports.TYPES = exports.TYPE = void 0;\nvar _null = _interopRequireDefault(require(\"./data-types/null\"));\nvar _tinyint = _interopRequireDefault(require(\"./data-types/tinyint\"));\nvar _bit = _interopRequireDefault(require(\"./data-types/bit\"));\nvar _smallint = _interopRequireDefault(require(\"./data-types/smallint\"));\nvar _int = _interopRequireDefault(require(\"./data-types/int\"));\nvar _smalldatetime = _interopRequireDefault(require(\"./data-types/smalldatetime\"));\nvar _real = _interopRequireDefault(require(\"./data-types/real\"));\nvar _money = _interopRequireDefault(require(\"./data-types/money\"));\nvar _datetime = _interopRequireDefault(require(\"./data-types/datetime\"));\nvar _float = _interopRequireDefault(require(\"./data-types/float\"));\nvar _decimal = _interopRequireDefault(require(\"./data-types/decimal\"));\nvar _numeric = _interopRequireDefault(require(\"./data-types/numeric\"));\nvar _smallmoney = _interopRequireDefault(require(\"./data-types/smallmoney\"));\nvar _bigint = _interopRequireDefault(require(\"./data-types/bigint\"));\nvar _image = _interopRequireDefault(require(\"./data-types/image\"));\nvar _text = _interopRequireDefault(require(\"./data-types/text\"));\nvar _uniqueidentifier = _interopRequireDefault(require(\"./data-types/uniqueidentifier\"));\nvar _intn = _interopRequireDefault(require(\"./data-types/intn\"));\nvar _ntext = _interopRequireDefault(require(\"./data-types/ntext\"));\nvar _bitn = _interopRequireDefault(require(\"./data-types/bitn\"));\nvar _decimaln = _interopRequireDefault(require(\"./data-types/decimaln\"));\nvar _numericn = _interopRequireDefault(require(\"./data-types/numericn\"));\nvar _floatn = _interopRequireDefault(require(\"./data-types/floatn\"));\nvar _moneyn = _interopRequireDefault(require(\"./data-types/moneyn\"));\nvar _datetimen = _interopRequireDefault(require(\"./data-types/datetimen\"));\nvar _varbinary = _interopRequireDefault(require(\"./data-types/varbinary\"));\nvar _varchar = _interopRequireDefault(require(\"./data-types/varchar\"));\nvar _binary = _interopRequireDefault(require(\"./data-types/binary\"));\nvar _char = _interopRequireDefault(require(\"./data-types/char\"));\nvar _nvarchar = _interopRequireDefault(require(\"./data-types/nvarchar\"));\nvar _nchar = _interopRequireDefault(require(\"./data-types/nchar\"));\nvar _xml = _interopRequireDefault(require(\"./data-types/xml\"));\nvar _time = _interopRequireDefault(require(\"./data-types/time\"));\nvar _date = _interopRequireDefault(require(\"./data-types/date\"));\nvar _datetime2 = _interopRequireDefault(require(\"./data-types/datetime2\"));\nvar _datetimeoffset = _interopRequireDefault(require(\"./data-types/datetimeoffset\"));\nvar _udt = _interopRequireDefault(require(\"./data-types/udt\"));\nvar _tvp = _interopRequireDefault(require(\"./data-types/tvp\"));\nvar _sqlVariant = _interopRequireDefault(require(\"./data-types/sql-variant\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst TYPE = {\n  [_null.default.id]: _null.default,\n  [_tinyint.default.id]: _tinyint.default,\n  [_bit.default.id]: _bit.default,\n  [_smallint.default.id]: _smallint.default,\n  [_int.default.id]: _int.default,\n  [_smalldatetime.default.id]: _smalldatetime.default,\n  [_real.default.id]: _real.default,\n  [_money.default.id]: _money.default,\n  [_datetime.default.id]: _datetime.default,\n  [_float.default.id]: _float.default,\n  [_decimal.default.id]: _decimal.default,\n  [_numeric.default.id]: _numeric.default,\n  [_smallmoney.default.id]: _smallmoney.default,\n  [_bigint.default.id]: _bigint.default,\n  [_image.default.id]: _image.default,\n  [_text.default.id]: _text.default,\n  [_uniqueidentifier.default.id]: _uniqueidentifier.default,\n  [_intn.default.id]: _intn.default,\n  [_ntext.default.id]: _ntext.default,\n  [_bitn.default.id]: _bitn.default,\n  [_decimaln.default.id]: _decimaln.default,\n  [_numericn.default.id]: _numericn.default,\n  [_floatn.default.id]: _floatn.default,\n  [_moneyn.default.id]: _moneyn.default,\n  [_datetimen.default.id]: _datetimen.default,\n  [_varbinary.default.id]: _varbinary.default,\n  [_varchar.default.id]: _varchar.default,\n  [_binary.default.id]: _binary.default,\n  [_char.default.id]: _char.default,\n  [_nvarchar.default.id]: _nvarchar.default,\n  [_nchar.default.id]: _nchar.default,\n  [_xml.default.id]: _xml.default,\n  [_time.default.id]: _time.default,\n  [_date.default.id]: _date.default,\n  [_datetime2.default.id]: _datetime2.default,\n  [_datetimeoffset.default.id]: _datetimeoffset.default,\n  [_udt.default.id]: _udt.default,\n  [_tvp.default.id]: _tvp.default,\n  [_sqlVariant.default.id]: _sqlVariant.default\n};\n/**\n * <table>\n * <thead>\n *   <tr>\n *     <th>Type</th>\n *     <th>Constant</th>\n *     <th>JavaScript</th>\n *     <th>Result set</th>\n *     <th>Parameter</th>\n *   </tr>\n * </thead>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Exact numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>bit</code></td>\n *     <td><code>[[TYPES.Bit]]</code></td>\n *     <td><code>boolean</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>tinyint</code></td>\n *     <td><code>[[TYPES.TinyInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallint</code></td>\n *     <td><code>[[TYPES.SmallInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>int</code></td>\n *     <td><code>[[TYPES.Int]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>bigint</code><sup>1</sup></td>\n *     <td><code>[[TYPES.BigInt]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>numeric</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Numeric]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>decimal</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Decimal]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallmoney</code></td>\n *     <td><code>[[TYPES.SmallMoney]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>money</code></td>\n *     <td><code>[[TYPES.Money]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Approximate numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>float</code></td>\n *     <td><code>[[TYPES.Float]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>real</code></td>\n *     <td><code>[[TYPES.Real]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Date and Time</th>\n *   </tr>\n *   <tr>\n *     <td><code>smalldatetime</code></td>\n *     <td><code>[[TYPES.SmallDateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime</code></td>\n *     <td><code>[[TYPES.DateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime2</code></td>\n *     <td><code>[[TYPES.DateTime2]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetimeoffset</code></td>\n *     <td><code>[[TYPES.DateTimeOffset]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>time</code></td>\n *     <td><code>[[TYPES.Time]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>date</code></td>\n *     <td><code>[[TYPES.Date]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Character Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>char</code></td>\n *     <td><code>[[TYPES.Char]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.VarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>text</code></td>\n *     <td><code>[[TYPES.Text]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Unicode Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>nchar</code></td>\n *     <td><code>[[TYPES.NChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>nvarchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.NVarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>ntext</code></td>\n *     <td><code>[[TYPES.NText]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Binary Strings<sup>4</sup></th>\n *   </tr>\n *   <tr>\n *     <td><code>binary</code></td>\n *     <td><code>[[TYPES.Binary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varbinary</code></td>\n *     <td><code>[[TYPES.VarBinary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>image</code></td>\n *     <td><code>[[TYPES.Image]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Other Data Types</th>\n *   </tr>\n *   <tr>\n *     <td><code>TVP</code></td>\n *     <td><code>[[TYPES.TVP]]</code></td>\n *     <td><code>Object</code></td>\n *     <td>-</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>UDT</code></td>\n *     <td><code>[[TYPES.UDT]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>uniqueidentifier</code><sup>4</sup></td>\n *     <td><code>[[TYPES.UniqueIdentifier]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>variant</code></td>\n *     <td><code>[[TYPES.Variant]]</code></td>\n *     <td><code>any</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>xml</code></td>\n *     <td><code>[[TYPES.Xml]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * <ol>\n *   <li>\n *     <h4>BigInt</h4>\n *     <p>\n *       Values are returned as a string. This is because values can exceed 53 bits of significant data, which is greater than a\n *       Javascript <code>number</code> type can represent as an integer.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>Numerical, Decimal</h4>\n *     <p>\n *       For input parameters, default precision is 18 and default scale is 0. Maximum supported precision is 19.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>VarChar, NVarChar</h4>\n *     <p>\n *       <code>varchar(max)</code> and <code>nvarchar(max)</code> are also supported.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>UniqueIdentifier</h4>\n *     <p>\n *       Values are returned as a 16 byte hexadecimal string.\n *     </p>\n *     <p>\n *       Note that the order of bytes is not the same as the character representation. See\n *       <a href=\"http://msdn.microsoft.com/en-us/library/ms190215.aspx\">Using uniqueidentifier Data</a>\n *       for an example of the different ordering of bytes.\n *     </p>\n *   </li>\n * </ol>\n */\n\nexports.TYPE = TYPE;\nconst TYPES = {\n  TinyInt: _tinyint.default,\n  Bit: _bit.default,\n  SmallInt: _smallint.default,\n  Int: _int.default,\n  SmallDateTime: _smalldatetime.default,\n  Real: _real.default,\n  Money: _money.default,\n  DateTime: _datetime.default,\n  Float: _float.default,\n  Decimal: _decimal.default,\n  Numeric: _numeric.default,\n  SmallMoney: _smallmoney.default,\n  BigInt: _bigint.default,\n  Image: _image.default,\n  Text: _text.default,\n  UniqueIdentifier: _uniqueidentifier.default,\n  NText: _ntext.default,\n  VarBinary: _varbinary.default,\n  VarChar: _varchar.default,\n  Binary: _binary.default,\n  Char: _char.default,\n  NVarChar: _nvarchar.default,\n  NChar: _nchar.default,\n  Xml: _xml.default,\n  Time: _time.default,\n  Date: _date.default,\n  DateTime2: _datetime2.default,\n  DateTimeOffset: _datetimeoffset.default,\n  UDT: _udt.default,\n  TVP: _tvp.default,\n  Variant: _sqlVariant.default\n};\nexports.TYPES = TYPES;\nconst typeByName = TYPES;\nexports.typeByName = typeByName;","map":{"version":3,"names":["_null","_interopRequireDefault","require","_tinyint","_bit","_smallint","_int","_smalldatetime","_real","_money","_datetime","_float","_decimal","_numeric","_smallmoney","_bigint","_image","_text","_uniqueidentifier","_intn","_ntext","_bitn","_decimaln","_numericn","_floatn","_moneyn","_datetimen","_varbinary","_varchar","_binary","_char","_nvarchar","_nchar","_xml","_time","_date","_datetime2","_datetimeoffset","_udt","_tvp","_sqlVariant","TYPE","default","id","TYPES","TinyInt","Bit","SmallInt","Int","SmallDateTime","Real","Money","DateTime","Float","Decimal","Numeric","SmallMoney","BigInt","Image","Text","UniqueIdentifier","NText","VarBinary","VarChar","Binary","Char","NVarChar","NChar","Xml","Time","Date","DateTime2","DateTimeOffset","UDT","TVP","Variant","typeByName"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-type.ts"],"sourcesContent":["import Null from './data-types/null';\nimport TinyInt from './data-types/tinyint';\nimport Bit from './data-types/bit';\nimport SmallInt from './data-types/smallint';\nimport Int from './data-types/int';\nimport SmallDateTime from './data-types/smalldatetime';\nimport Real from './data-types/real';\nimport Money from './data-types/money';\nimport DateTime from './data-types/datetime';\nimport Float from './data-types/float';\nimport Decimal from './data-types/decimal';\nimport Numeric from './data-types/numeric';\nimport SmallMoney from './data-types/smallmoney';\nimport BigInt from './data-types/bigint';\nimport Image from './data-types/image';\nimport Text from './data-types/text';\nimport UniqueIdentifier from './data-types/uniqueidentifier';\nimport IntN from './data-types/intn';\nimport NText from './data-types/ntext';\nimport BitN from './data-types/bitn';\nimport DecimalN from './data-types/decimaln';\nimport NumericN from './data-types/numericn';\nimport FloatN from './data-types/floatn';\nimport MoneyN from './data-types/moneyn';\nimport DateTimeN from './data-types/datetimen';\nimport VarBinary from './data-types/varbinary';\nimport VarChar from './data-types/varchar';\nimport Binary from './data-types/binary';\nimport Char from './data-types/char';\nimport NVarChar from './data-types/nvarchar';\nimport NChar from './data-types/nchar';\nimport Xml from './data-types/xml';\nimport Time from './data-types/time';\nimport Date from './data-types/date';\nimport DateTime2 from './data-types/datetime2';\nimport DateTimeOffset from './data-types/datetimeoffset';\nimport UDT from './data-types/udt';\nimport TVP from './data-types/tvp';\nimport Variant from './data-types/sql-variant';\nimport { CryptoMetadata } from './always-encrypted/types';\n\nimport { InternalConnectionOptions } from './connection';\nimport { Collation } from './collation';\n\nexport interface Parameter {\n  type: DataType;\n  name: string;\n\n  value: unknown;\n\n  output: boolean;\n  length?: number | undefined;\n  precision?: number | undefined;\n  scale?: number | undefined;\n\n  nullable?: boolean | undefined;\n\n  forceEncrypt?: boolean | undefined;\n  cryptoMetadata?: CryptoMetadata | undefined;\n  encryptedVal?: Buffer | undefined;\n}\n\n\nexport interface ParameterData<T = any> {\n  length?: number | undefined;\n  scale?: number | undefined;\n  precision?: number | undefined;\n\n  collation?: Collation | undefined;\n\n  value: T;\n}\n\nexport interface DataType {\n  id: number;\n  type: string;\n  name: string;\n\n  declaration(parameter: Parameter): string;\n  generateTypeInfo(parameter: ParameterData, options: InternalConnectionOptions): Buffer;\n  generateParameterLength(parameter: ParameterData, options: InternalConnectionOptions): Buffer;\n  generateParameterData(parameter: ParameterData, options: InternalConnectionOptions): Generator<Buffer, void>;\n  validate(value: any, collation: Collation | undefined): any; // TODO: Refactor 'any' and replace with more specific type.\n\n  hasTableName?: boolean;\n\n  resolveLength?: (parameter: Parameter) => number;\n  resolvePrecision?: (parameter: Parameter) => number;\n  resolveScale?: (parameter: Parameter) => number;\n}\n\nexport const TYPE = {\n  [Null.id]: Null,\n  [TinyInt.id]: TinyInt,\n  [Bit.id]: Bit,\n  [SmallInt.id]: SmallInt,\n  [Int.id]: Int,\n  [SmallDateTime.id]: SmallDateTime,\n  [Real.id]: Real,\n  [Money.id]: Money,\n  [DateTime.id]: DateTime,\n  [Float.id]: Float,\n  [Decimal.id]: Decimal,\n  [Numeric.id]: Numeric,\n  [SmallMoney.id]: SmallMoney,\n  [BigInt.id]: BigInt,\n  [Image.id]: Image,\n  [Text.id]: Text,\n  [UniqueIdentifier.id]: UniqueIdentifier,\n  [IntN.id]: IntN,\n  [NText.id]: NText,\n  [BitN.id]: BitN,\n  [DecimalN.id]: DecimalN,\n  [NumericN.id]: NumericN,\n  [FloatN.id]: FloatN,\n  [MoneyN.id]: MoneyN,\n  [DateTimeN.id]: DateTimeN,\n  [VarBinary.id]: VarBinary,\n  [VarChar.id]: VarChar,\n  [Binary.id]: Binary,\n  [Char.id]: Char,\n  [NVarChar.id]: NVarChar,\n  [NChar.id]: NChar,\n  [Xml.id]: Xml,\n  [Time.id]: Time,\n  [Date.id]: Date,\n  [DateTime2.id]: DateTime2,\n  [DateTimeOffset.id]: DateTimeOffset,\n  [UDT.id]: UDT,\n  [TVP.id]: TVP,\n  [Variant.id]: Variant,\n};\n\n/**\n * <table>\n * <thead>\n *   <tr>\n *     <th>Type</th>\n *     <th>Constant</th>\n *     <th>JavaScript</th>\n *     <th>Result set</th>\n *     <th>Parameter</th>\n *   </tr>\n * </thead>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Exact numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>bit</code></td>\n *     <td><code>[[TYPES.Bit]]</code></td>\n *     <td><code>boolean</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>tinyint</code></td>\n *     <td><code>[[TYPES.TinyInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallint</code></td>\n *     <td><code>[[TYPES.SmallInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>int</code></td>\n *     <td><code>[[TYPES.Int]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>bigint</code><sup>1</sup></td>\n *     <td><code>[[TYPES.BigInt]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>numeric</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Numeric]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>decimal</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Decimal]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallmoney</code></td>\n *     <td><code>[[TYPES.SmallMoney]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>money</code></td>\n *     <td><code>[[TYPES.Money]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Approximate numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>float</code></td>\n *     <td><code>[[TYPES.Float]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>real</code></td>\n *     <td><code>[[TYPES.Real]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Date and Time</th>\n *   </tr>\n *   <tr>\n *     <td><code>smalldatetime</code></td>\n *     <td><code>[[TYPES.SmallDateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime</code></td>\n *     <td><code>[[TYPES.DateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime2</code></td>\n *     <td><code>[[TYPES.DateTime2]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetimeoffset</code></td>\n *     <td><code>[[TYPES.DateTimeOffset]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>time</code></td>\n *     <td><code>[[TYPES.Time]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>date</code></td>\n *     <td><code>[[TYPES.Date]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Character Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>char</code></td>\n *     <td><code>[[TYPES.Char]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.VarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>text</code></td>\n *     <td><code>[[TYPES.Text]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Unicode Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>nchar</code></td>\n *     <td><code>[[TYPES.NChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>nvarchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.NVarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>ntext</code></td>\n *     <td><code>[[TYPES.NText]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Binary Strings<sup>4</sup></th>\n *   </tr>\n *   <tr>\n *     <td><code>binary</code></td>\n *     <td><code>[[TYPES.Binary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varbinary</code></td>\n *     <td><code>[[TYPES.VarBinary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>image</code></td>\n *     <td><code>[[TYPES.Image]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Other Data Types</th>\n *   </tr>\n *   <tr>\n *     <td><code>TVP</code></td>\n *     <td><code>[[TYPES.TVP]]</code></td>\n *     <td><code>Object</code></td>\n *     <td>-</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>UDT</code></td>\n *     <td><code>[[TYPES.UDT]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>uniqueidentifier</code><sup>4</sup></td>\n *     <td><code>[[TYPES.UniqueIdentifier]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>variant</code></td>\n *     <td><code>[[TYPES.Variant]]</code></td>\n *     <td><code>any</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>xml</code></td>\n *     <td><code>[[TYPES.Xml]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * <ol>\n *   <li>\n *     <h4>BigInt</h4>\n *     <p>\n *       Values are returned as a string. This is because values can exceed 53 bits of significant data, which is greater than a\n *       Javascript <code>number</code> type can represent as an integer.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>Numerical, Decimal</h4>\n *     <p>\n *       For input parameters, default precision is 18 and default scale is 0. Maximum supported precision is 19.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>VarChar, NVarChar</h4>\n *     <p>\n *       <code>varchar(max)</code> and <code>nvarchar(max)</code> are also supported.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>UniqueIdentifier</h4>\n *     <p>\n *       Values are returned as a 16 byte hexadecimal string.\n *     </p>\n *     <p>\n *       Note that the order of bytes is not the same as the character representation. See\n *       <a href=\"http://msdn.microsoft.com/en-us/library/ms190215.aspx\">Using uniqueidentifier Data</a>\n *       for an example of the different ordering of bytes.\n *     </p>\n *   </li>\n * </ol>\n */\nexport const TYPES = {\n  TinyInt,\n  Bit,\n  SmallInt,\n  Int,\n  SmallDateTime,\n  Real,\n  Money,\n  DateTime,\n  Float,\n  Decimal,\n  Numeric,\n  SmallMoney,\n  BigInt,\n  Image,\n  Text,\n  UniqueIdentifier,\n  NText,\n  VarBinary,\n  VarChar,\n  Binary,\n  Char,\n  NVarChar,\n  NChar,\n  Xml,\n  Time,\n  Date,\n  DateTime2,\n  DateTimeOffset,\n  UDT,\n  TVP,\n  Variant\n};\n\nexport const typeByName = TYPES;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}