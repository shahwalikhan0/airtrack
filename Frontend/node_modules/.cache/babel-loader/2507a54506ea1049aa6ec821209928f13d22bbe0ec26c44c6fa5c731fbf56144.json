{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _classCallCheck = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _possibleConstructorReturn = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\").default;\nvar _assertThisInitialized = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _require = require('events'),\n  EventEmitter = _require.EventEmitter;\nvar debug = require('debug')('mssql:base');\nvar _require2 = require('@tediousjs/connection-string'),\n  parseSqlConnectionString = _require2.parseSqlConnectionString;\nvar tarn = require('tarn');\nvar _require3 = require('../utils'),\n  IDS = _require3.IDS;\nvar ConnectionError = require('../error/connection-error');\nvar shared = require('../shared');\nvar clone = require('rfdc/default');\nvar _require4 = require('../error'),\n  MSSQLError = _require4.MSSQLError;\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\nvar ConnectionPool = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(ConnectionPool, _EventEmitter);\n  var _super = _createSuper(ConnectionPool);\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  function ConnectionPool(config, callback) {\n    var _this;\n    _classCallCheck(this, ConnectionPool);\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'ConnectionPool');\n    debug('pool(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this._connectStack = [];\n    _this._closeStack = [];\n    _this._connected = false;\n    _this._connecting = false;\n    _this._healthy = false;\n    if (typeof config === 'string') {\n      try {\n        _this.config = _this.constructor.parseConnectionString(config);\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return _possibleConstructorReturn(_this, setImmediate(callback, ex));\n        }\n        throw ex;\n      }\n    } else {\n      _this.config = clone(config);\n    }\n\n    // set defaults\n    _this.config.port = _this.config.port || 1433;\n    _this.config.options = _this.config.options || {};\n    _this.config.stream = _this.config.stream || false;\n    _this.config.parseJSON = _this.config.parseJSON || false;\n    _this.config.arrayRowMode = _this.config.arrayRowMode || false;\n    _this.config.validateConnection = 'validateConnection' in _this.config ? _this.config.validateConnection : true;\n    if (/^(.*)\\\\(.*)$/.exec(_this.config.server)) {\n      _this.config.server = RegExp.$1;\n      _this.config.options.instanceName = RegExp.$2;\n    }\n    if (typeof _this.config.options.useColumnNames !== 'undefined' && _this.config.options.useColumnNames !== true) {\n      var ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead');\n      if (typeof callback === 'function') {\n        return _possibleConstructorReturn(_this, setImmediate(callback, ex));\n      }\n      throw ex;\n    }\n    if (typeof callback === 'function') {\n      _this.connect(callback);\n    }\n    return _this;\n  }\n  _createClass(ConnectionPool, [{\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    }\n  }, {\n    key: \"connecting\",\n    get: function get() {\n      return this._connecting;\n    }\n  }, {\n    key: \"healthy\",\n    get: function get() {\n      return this._healthy;\n    }\n  }, {\n    key: \"acquire\",\n    value:\n    /**\n     * Acquire connection from this connection pool.\n     *\n     * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n     * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n     * @return {ConnectionPool|Promise}\n     */\n\n    function acquire(requester, callback) {\n      var _this2 = this;\n      var acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(function (err) {\n        _this2.emit('error', err);\n        throw err;\n      });\n      if (typeof callback === 'function') {\n        acquirePromise.then(function (connection) {\n          return callback(null, connection, _this2.config);\n        }).catch(callback);\n        return this;\n      }\n      return acquirePromise;\n    }\n  }, {\n    key: \"_acquire\",\n    value: function _acquire() {\n      if (!this.pool) {\n        return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'));\n      } else if (this.pool.destroyed) {\n        return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'));\n      }\n      return this.pool.acquire();\n    }\n\n    /**\n     * Release connection back to the pool.\n     *\n     * @param {Connection} connection Previously acquired connection.\n     * @return {ConnectionPool}\n     */\n  }, {\n    key: \"release\",\n    value: function release(connection) {\n      debug('connection(%d): released', IDS.get(connection));\n      if (this.pool) {\n        this.pool.release(connection);\n      }\n      return this;\n    }\n\n    /**\n     * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n     *\n     * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n     * @return {ConnectionPool|Promise}\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(callback) {\n      var _this3 = this;\n      if (typeof callback === 'function') {\n        this._connect(callback);\n        return this;\n      }\n      return new shared.Promise(function (resolve, reject) {\n        return _this3._connect(function (err) {\n          if (err) return reject(err);\n          resolve(_this3);\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {basicCallback} callback\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(callback) {\n      var _this4 = this;\n      if (this._connected) {\n        debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this));\n        return setImmediate(callback, null, this);\n      }\n      this._connectStack.push(callback);\n      if (this._connecting) {\n        return;\n      }\n      this._connecting = true;\n      debug('pool(%d): connecting', IDS.get(this));\n\n      // create one test connection to check if everything is ok\n      this._poolCreate().then(function (connection) {\n        debug('pool(%d): connected', IDS.get(_this4));\n        _this4._healthy = true;\n        return _this4._poolDestroy(connection).then(function () {\n          // prepare pool\n          _this4.pool = new tarn.Pool(Object.assign({\n            create: function create() {\n              return _this4._poolCreate().then(function (connection) {\n                _this4._healthy = true;\n                return connection;\n              }).catch(function (err) {\n                if (_this4.pool.numUsed() + _this4.pool.numFree() <= 0) {\n                  _this4._healthy = false;\n                }\n                throw err;\n              });\n            },\n            validate: _this4._poolValidate.bind(_this4),\n            destroy: _this4._poolDestroy.bind(_this4),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, _this4.config.pool));\n          _this4._connecting = false;\n          _this4._connected = true;\n        });\n      }).then(function () {\n        _this4._connectStack.forEach(function (cb) {\n          setImmediate(cb, null, _this4);\n        });\n      }).catch(function (err) {\n        _this4._connecting = false;\n        _this4._connectStack.forEach(function (cb) {\n          setImmediate(cb, err);\n        });\n      }).then(function () {\n        _this4._connectStack = [];\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates();\n    }\n  }, {\n    key: \"available\",\n    get: function get() {\n      return this.pool.numFree();\n    }\n  }, {\n    key: \"pending\",\n    get: function get() {\n      return this.pool.numPendingAcquires();\n    }\n  }, {\n    key: \"borrowed\",\n    get: function get() {\n      return this.pool.numUsed();\n    }\n\n    /**\n     * Close all active connections in the pool.\n     *\n     * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n     * @return {ConnectionPool|Promise}\n     */\n  }, {\n    key: \"close\",\n    value: function close(callback) {\n      var _this5 = this;\n      if (typeof callback === 'function') {\n        this._close(callback);\n        return this;\n      }\n      return new shared.Promise(function (resolve, reject) {\n        _this5._close(function (err) {\n          if (err) return reject(err);\n          resolve(_this5);\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {basicCallback} callback\n     */\n  }, {\n    key: \"_close\",\n    value: function _close(callback) {\n      var _this6 = this;\n      // we don't allow pools in a connecting state to be closed because it means there are far too many\n      // edge cases to deal with\n      if (this._connecting) {\n        debug('pool(%d): close called while connecting', IDS.get(this));\n        setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'));\n      }\n      if (!this.pool) {\n        debug('pool(%d): already closed, executing close callback immediately', IDS.get(this));\n        return setImmediate(callback, null);\n      }\n      this._closeStack.push(callback);\n      if (this.pool.destroyed) return;\n      this._connecting = this._connected = this._healthy = false;\n      this.pool.destroy().then(function () {\n        debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(_this6));\n        _this6.pool = null;\n        _this6._closeStack.forEach(function (cb) {\n          setImmediate(cb, null);\n        });\n      }).catch(function (err) {\n        _this6.pool = null;\n        _this6._closeStack.forEach(function (cb) {\n          setImmediate(cb, err);\n        });\n      }).then(function () {\n        _this6._closeStack = [];\n      });\n    }\n\n    /**\n     * Returns new request using this connection.\n     *\n     * @return {Request}\n     */\n  }, {\n    key: \"request\",\n    value: function request() {\n      return new shared.driver.Request(this);\n    }\n\n    /**\n     * Returns new transaction using this connection.\n     *\n     * @return {Transaction}\n     */\n  }, {\n    key: \"transaction\",\n    value: function transaction() {\n      return new shared.driver.Transaction(this);\n    }\n\n    /**\n     * Creates a new query using this connection from a tagged template string.\n     *\n     * @variation 1\n     * @param {Array} strings Array of string literals.\n     * @param {...*} keys Values.\n     * @return {Request}\n     */\n\n    /**\n     * Execute the SQL command.\n     *\n     * @variation 2\n     * @param {String} command T-SQL command to be executed.\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"query\",\n    value: function query() {\n      if (typeof arguments[0] === 'string') {\n        return new shared.driver.Request(this).query(arguments[0], arguments[1]);\n      }\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return new shared.driver.Request(this)._template(strings, values, 'query');\n    }\n\n    /**\n     * Creates a new batch using this connection from a tagged template string.\n     *\n     * @variation 1\n     * @param {Array} strings Array of string literals.\n     * @param {...*} keys Values.\n     * @return {Request}\n     */\n\n    /**\n     * Execute the SQL command.\n     *\n     * @variation 2\n     * @param {String} command T-SQL command to be executed.\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      if (typeof arguments[0] === 'string') {\n        return new shared.driver.Request(this).batch(arguments[0], arguments[1]);\n      }\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return new shared.driver.Request(this)._template(strings, values, 'batch');\n    }\n  }], [{\n    key: \"parseConnectionString\",\n    value: function parseConnectionString(connectionString) {\n      return this._parseConnectionString(connectionString);\n    }\n  }, {\n    key: \"_parseConnectionString\",\n    value: function _parseConnectionString(connectionString) {\n      var parsed = parseSqlConnectionString(connectionString, true, true);\n      return Object.entries(parsed).reduce(function (config, _ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        switch (key) {\n          case 'application name':\n            break;\n          case 'applicationintent':\n            Object.assign(config.options, {\n              readOnlyIntent: value === 'readonly'\n            });\n            break;\n          case 'asynchronous processing':\n            break;\n          case 'attachdbfilename':\n            break;\n          case 'authentication':\n            break;\n          case 'column encryption setting':\n            break;\n          case 'connection timeout':\n            Object.assign(config, {\n              connectionTimeout: value * 1000\n            });\n            break;\n          case 'connection lifetime':\n            break;\n          case 'connectretrycount':\n            break;\n          case 'connectretryinterval':\n            Object.assign(config.options, {\n              connectionRetryInterval: value * 1000\n            });\n            break;\n          case 'context connection':\n            break;\n          case 'current language':\n            Object.assign(config.options, {\n              language: value\n            });\n            break;\n          case 'data source':\n            {\n              var server = value;\n              var instanceName;\n              var port = 1433;\n              if (/^np:/i.test(server)) {\n                throw new Error('Connection via Named Pipes is not supported.');\n              }\n              if (/^tcp:/i.test(server)) {\n                server = server.substr(4);\n              }\n              if (/^(.*)\\\\(.*)$/.exec(server)) {\n                server = RegExp.$1;\n                instanceName = RegExp.$2;\n              }\n              if (/^(.*),(.*)$/.exec(server)) {\n                server = RegExp.$1.trim();\n                port = parseInt(RegExp.$2.trim(), 10);\n              }\n              if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n                server = 'localhost';\n              }\n              Object.assign(config, {\n                port: port,\n                server: server\n              });\n              Object.assign(config.options, {\n                instanceName: instanceName\n              });\n              break;\n            }\n          case 'encrypt':\n            Object.assign(config.options, {\n              encrypt: !!value\n            });\n            break;\n          case 'enlist':\n            break;\n          case 'failover partner':\n            break;\n          case 'initial catalog':\n            Object.assign(config, {\n              database: value\n            });\n            break;\n          case 'integrated security':\n            break;\n          case 'max pool size':\n            Object.assign(config.pool, {\n              max: value\n            });\n            break;\n          case 'min pool size':\n            Object.assign(config.pool, {\n              min: value\n            });\n            break;\n          case 'multipleactiveresultsets':\n            break;\n          case 'multisubnetfailover':\n            Object.assign(config.options, {\n              multiSubnetFailover: value\n            });\n            break;\n          case 'network library':\n            break;\n          case 'packet size':\n            Object.assign(config.options, {\n              packetSize: value\n            });\n            break;\n          case 'password':\n            Object.assign(config, {\n              password: value\n            });\n            break;\n          case 'persist security info':\n            break;\n          case 'poolblockingperiod':\n            break;\n          case 'pooling':\n            break;\n          case 'replication':\n            break;\n          case 'transaction binding':\n            Object.assign(config.options, {\n              enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n            });\n            break;\n          case 'transparentnetworkipresolution':\n            break;\n          case 'trustservercertificate':\n            Object.assign(config.options, {\n              trustServerCertificate: value\n            });\n            break;\n          case 'type system version':\n            break;\n          case 'user id':\n            {\n              var user = value;\n              var domain;\n              if (/^(.*)\\\\(.*)$/.exec(user)) {\n                domain = RegExp.$1;\n                user = RegExp.$2;\n              }\n              Object.assign(config, {\n                domain: domain,\n                user: user\n              });\n              break;\n            }\n          case 'user instance':\n            break;\n          case 'workstation id':\n            Object.assign(config.options, {\n              workstationId: value\n            });\n            break;\n          case 'request timeout':\n            Object.assign(config, {\n              requestTimeout: parseInt(value, 10)\n            });\n            break;\n          case 'stream':\n            Object.assign(config, {\n              stream: !!value\n            });\n            break;\n          case 'useutc':\n            Object.assign(config.options, {\n              useUTC: !!value\n            });\n            break;\n          case 'parsejson':\n            Object.assign(config, {\n              parseJSON: !!value\n            });\n            break;\n        }\n        return config;\n      }, {\n        options: {},\n        pool: {}\n      });\n    }\n  }]);\n  return ConnectionPool;\n}(EventEmitter);\nmodule.exports = ConnectionPool;","map":{"version":3,"names":["_slicedToArray","require","default","_classCallCheck","_createClass","_possibleConstructorReturn","_assertThisInitialized","_inherits","_createSuper","_require","EventEmitter","debug","_require2","parseSqlConnectionString","tarn","_require3","IDS","ConnectionError","shared","clone","_require4","MSSQLError","ConnectionPool","_EventEmitter","_super","config","callback","_this","call","add","get","_connectStack","_closeStack","_connected","_connecting","_healthy","constructor","parseConnectionString","ex","setImmediate","port","options","stream","parseJSON","arrayRowMode","validateConnection","exec","server","RegExp","$1","instanceName","$2","useColumnNames","connect","key","value","acquire","requester","_this2","acquirePromise","Promise","resolve","_acquire","promise","catch","err","emit","then","connection","pool","reject","destroyed","release","_this3","_connect","_this4","push","_poolCreate","_poolDestroy","Pool","Object","assign","create","numUsed","numFree","validate","_poolValidate","bind","destroy","max","min","idleTimeoutMillis","propagateCreateError","forEach","cb","numPendingCreates","numPendingAcquires","close","_this5","_close","_this6","request","driver","Request","transaction","Transaction","query","arguments","values","Array","prototype","slice","strings","shift","_template","batch","connectionString","_parseConnectionString","parsed","entries","reduce","_ref","_ref2","readOnlyIntent","connectionTimeout","connectionRetryInterval","language","test","Error","substr","trim","parseInt","toLowerCase","encrypt","database","multiSubnetFailover","packetSize","password","enableImplicitTransactions","trustServerCertificate","user","domain","workstationId","requestTimeout","useUTC","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/connection-pool.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst debug = require('debug')('mssql:base')\nconst { parseSqlConnectionString } = require('@tediousjs/connection-string')\nconst tarn = require('tarn')\nconst { IDS } = require('../utils')\nconst ConnectionError = require('../error/connection-error')\nconst shared = require('../shared')\nconst clone = require('rfdc/default')\nconst { MSSQLError } = require('../error')\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor (config, callback) {\n    super()\n\n    IDS.add(this, 'ConnectionPool')\n    debug('pool(%d): created', IDS.get(this))\n\n    this._connectStack = []\n    this._closeStack = []\n\n    this._connected = false\n    this._connecting = false\n    this._healthy = false\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.constructor.parseConnectionString(config)\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex)\n        }\n        throw ex\n      }\n    } else {\n      this.config = clone(config)\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433\n    this.config.options = this.config.options || {}\n    this.config.stream = this.config.stream || false\n    this.config.parseJSON = this.config.parseJSON || false\n    this.config.arrayRowMode = this.config.arrayRowMode || false\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\n\n    if (/^(.*)\\\\(.*)$/.exec(this.config.server)) {\n      this.config.server = RegExp.$1\n      this.config.options.instanceName = RegExp.$2\n    }\n\n    if (typeof this.config.options.useColumnNames !== 'undefined' && this.config.options.useColumnNames !== true) {\n      const ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead')\n      if (typeof callback === 'function') {\n        return setImmediate(callback, ex)\n      }\n      throw ex\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback)\n    }\n  }\n\n  get connected () {\n    return this._connected\n  }\n\n  get connecting () {\n    return this._connecting\n  }\n\n  get healthy () {\n    return this._healthy\n  }\n\n  static parseConnectionString (connectionString) {\n    return this._parseConnectionString(connectionString)\n  }\n\n  static _parseConnectionString (connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true)\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          })\n          break\n        case 'asynchronous processing':\n          break\n        case 'attachdbfilename':\n          break\n        case 'authentication':\n          break\n        case 'column encryption setting':\n          break\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          })\n          break\n        case 'connection lifetime':\n          break\n        case 'connectretrycount':\n          break\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          })\n          break\n        case 'context connection':\n          break\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          })\n          break\n        case 'data source':\n        {\n          let server = value\n          let instanceName\n          let port = 1433\n          if (/^np:/i.test(server)) {\n            throw new Error('Connection via Named Pipes is not supported.')\n          }\n          if (/^tcp:/i.test(server)) {\n            server = server.substr(4)\n          }\n          if (/^(.*)\\\\(.*)$/.exec(server)) {\n            server = RegExp.$1\n            instanceName = RegExp.$2\n          }\n          if (/^(.*),(.*)$/.exec(server)) {\n            server = RegExp.$1.trim()\n            port = parseInt(RegExp.$2.trim(), 10)\n          }\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n            server = 'localhost'\n          }\n          Object.assign(config, {\n            port,\n            server\n          })\n          Object.assign(config.options, {\n            instanceName\n          })\n          break\n        }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          })\n          break\n        case 'enlist':\n          break\n        case 'failover partner':\n          break\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          })\n          break\n        case 'integrated security':\n          break\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          })\n          break\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          })\n          break\n        case 'multipleactiveresultsets':\n          break\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          })\n          break\n        case 'network library':\n          break\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          })\n          break\n        case 'password':\n          Object.assign(config, {\n            password: value\n          })\n          break\n        case 'persist security info':\n          break\n        case 'poolblockingperiod':\n          break\n        case 'pooling':\n          break\n        case 'replication':\n          break\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          })\n          break\n        case 'transparentnetworkipresolution':\n          break\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          })\n          break\n        case 'type system version':\n          break\n        case 'user id': {\n          let user = value\n          let domain\n          if (/^(.*)\\\\(.*)$/.exec(user)) {\n            domain = RegExp.$1\n            user = RegExp.$2\n          }\n          Object.assign(config, {\n            domain,\n            user\n          })\n          break\n        }\n        case 'user instance':\n          break\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          })\n          break\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          })\n          break\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          })\n          break\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          })\n          break\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          })\n          break\n      }\n      return config\n    }, { options: {}, pool: {} })\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire (requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire().promise).catch(err => {\n      this.emit('error', err)\n      throw err\n    })\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\n      return this\n    }\n\n    return acquirePromise\n  }\n\n  _acquire () {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\n    }\n\n    return this.pool.acquire()\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release (connection) {\n    debug('connection(%d): released', IDS.get(connection))\n\n    if (this.pool) {\n      this.pool.release(connection)\n    }\n    return this\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect (callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect (callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\n      return setImmediate(callback, null, this)\n    }\n\n    this._connectStack.push(callback)\n\n    if (this._connecting) {\n      return\n    }\n\n    this._connecting = true\n    debug('pool(%d): connecting', IDS.get(this))\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then((connection) => {\n      debug('pool(%d): connected', IDS.get(this))\n      this._healthy = true\n\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(\n          Object.assign({\n            create: () => this._poolCreate()\n              .then(connection => {\n                this._healthy = true\n                return connection\n              })\n              .catch(err => {\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                  this._healthy = false\n                }\n                throw err\n              }),\n            validate: this._poolValidate.bind(this),\n            destroy: this._poolDestroy.bind(this),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, this.config.pool)\n        )\n\n        this._connecting = false\n        this._connected = true\n      })\n    }).then(() => {\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, null, this)\n      })\n    }).catch(err => {\n      this._connecting = false\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._connectStack = []\n    })\n  }\n\n  get size () {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\n  }\n\n  get available () {\n    return this.pool.numFree()\n  }\n\n  get pending () {\n    return this.pool.numPendingAcquires()\n  }\n\n  get borrowed () {\n    return this.pool.numUsed()\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close (callback) {\n    if (typeof callback === 'function') {\n      this._close(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close (callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this))\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\n      return setImmediate(callback, null)\n    }\n\n    this._closeStack.push(callback)\n\n    if (this.pool.destroyed) return\n\n    this._connecting = this._connected = this._healthy = false\n\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null)\n      })\n    }).catch(err => {\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._closeStack = []\n    })\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction () {\n    return new shared.driver.Transaction(this)\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'query')\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\n  }\n}\n\nmodule.exports = ConnectionPool\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}