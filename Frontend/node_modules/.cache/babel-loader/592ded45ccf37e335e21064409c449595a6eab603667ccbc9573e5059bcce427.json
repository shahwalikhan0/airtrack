{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _core = require(\"@js-joda/core\");\n\n// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\nconst globalDate = global.Date;\nconst EPOCH_DATE = _core.LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x03]);\nconst Date = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n  declaration: function () {\n    return 'date';\n  },\n  generateTypeInfo: function () {\n    return Buffer.from([this.id]);\n  },\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n    return DATA_LENGTH;\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    const value = parameter.value; // Temporary solution. Remove 'any' later.\n\n    let date;\n    if (options.useUTC) {\n      date = _core.LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = _core.LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n    const days = EPOCH_DATE.until(date, _core.ChronoUnit.DAYS);\n    const buffer = Buffer.alloc(3);\n    buffer.writeUIntLE(days, 0, 3);\n    yield buffer;\n  },\n  // TODO: value is techincally of type 'unknown'.\n  validate: function (value) {\n    if (value == null) {\n      return null;\n    }\n    if (!(value instanceof globalDate)) {\n      value = new globalDate(globalDate.parse(value));\n    }\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n    return value;\n  }\n};\nvar _default = Date;\nexports.default = _default;\nmodule.exports = Date;","map":{"version":3,"names":["_core","require","globalDate","global","Date","EPOCH_DATE","LocalDate","ofYearDay","NULL_LENGTH","Buffer","from","DATA_LENGTH","id","type","name","declaration","generateTypeInfo","generateParameterLength","parameter","options","value","generateParameterData","date","useUTC","of","getUTCFullYear","getUTCMonth","getUTCDate","getFullYear","getMonth","getDate","days","until","ChronoUnit","DAYS","buffer","alloc","writeUIntLE","validate","parse","isNaN","TypeError","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-types/date.ts"],"sourcesContent":["import { DataType } from '../data-type';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\n\n// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\nconst globalDate = global.Date;\nconst EPOCH_DATE = LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x03]);\n\nconst Date: DataType = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n\n  declaration: function() {\n    return 'date';\n  },\n\n  generateTypeInfo: function() {\n    return Buffer.from([this.id]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let date;\n    if (options.useUTC) {\n      date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    const days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n    const buffer = Buffer.alloc(3);\n    buffer.writeUIntLE(days, 0, 3);\n    yield buffer;\n  },\n\n  // TODO: value is techincally of type 'unknown'.\n  validate: function(value): null | Date {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = new globalDate(globalDate.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default Date;\nmodule.exports = Date;\n"],"mappings":";;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;;AAEA;AACA,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAA1B;AACA,MAAMC,UAAU,GAAGL,KAAA,CAAAM,SAAA,CAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAnB;AACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAApB;AACA,MAAMC,WAAW,GAAGF,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,CAAZ,CAApB;AAEA,MAAMN,IAAc,GAAG;EACrBQ,EAAE,EAAE,IADiB;EAErBC,IAAI,EAAE,OAFe;EAGrBC,IAAI,EAAE,MAHe;EAKrBC,WAAW,EAAE,SAAAA,CAAA,EAAW;IACtB,OAAO,MAAP;EACD,CAPoB;EASrBC,gBAAgB,EAAE,SAAAA,CAAA,EAAW;IAC3B,OAAOP,MAAM,CAACC,IAAP,CAAY,CAAC,KAAKE,EAAN,CAAZ,CAAP;EACD,CAXoB;EAarBK,uBAAuBA,CAACC,SAAD,EAAYC,OAAZ,EAAqB;IAC1C,IAAID,SAAS,CAACE,KAAV,IAAmB,IAAvB,EAA6B;MAC3B,OAAOZ,WAAP;IACD;IAED,OAAOG,WAAP;EACD,CAnBoB;EAqBrB,CAAEU,qBAAFA,CAAwBH,SAAxB,EAAmCC,OAAnC,EAA4C;IAC1C,IAAID,SAAS,CAACE,KAAV,IAAmB,IAAvB,EAA6B;MAC3B;IACD;IAED,MAAMA,KAAK,GAAGF,SAAS,CAACE,KAAxB,CAL0C,CAKJ;;IAEtC,IAAIE,IAAJ;IACA,IAAIH,OAAO,CAACI,MAAZ,EAAoB;MAClBD,IAAI,GAAGtB,KAAA,CAAAM,SAAA,CAAUkB,EAAV,CAAaJ,KAAK,CAACK,cAAN,EAAb,EAAqCL,KAAK,CAACM,WAAN,KAAsB,CAA3D,EAA8DN,KAAK,CAACO,UAAN,EAA9D,CAAP;IACD,CAFD,MAEO;MACLL,IAAI,GAAGtB,KAAA,CAAAM,SAAA,CAAUkB,EAAV,CAAaJ,KAAK,CAACQ,WAAN,EAAb,EAAkCR,KAAK,CAACS,QAAN,KAAmB,CAArD,EAAwDT,KAAK,CAACU,OAAN,EAAxD,CAAP;IACD;IAED,MAAMC,IAAI,GAAG1B,UAAU,CAAC2B,KAAX,CAAiBV,IAAjB,EAAuBtB,KAAA,CAAAiC,UAAA,CAAWC,IAAlC,CAAb;IACA,MAAMC,MAAM,GAAG1B,MAAM,CAAC2B,KAAP,CAAa,CAAb,CAAf;IACAD,MAAM,CAACE,WAAP,CAAmBN,IAAnB,EAAyB,CAAzB,EAA4B,CAA5B;IACA,MAAMI,MAAN;EACD,CAvCoB;EAyCrB;EACAG,QAAQ,EAAE,SAAAA,CAASlB,KAAT,EAA6B;IACrC,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjB,OAAO,IAAP;IACD;IAED,IAAI,EAAEA,KAAK,YAAYlB,UAAnB,CAAJ,EAAoC;MAClCkB,KAAK,GAAG,IAAIlB,UAAJ,CAAeA,UAAU,CAACqC,KAAX,CAAiBnB,KAAjB,CAAf,CAAR;IACD;IAED,IAAIoB,KAAK,CAACpB,KAAD,CAAT,EAAkB;MAChB,MAAM,IAAIqB,SAAJ,CAAc,eAAd,CAAN;IACD;IAED,OAAOrB,KAAP;EACD;AAxDoB,CAAvB;eA2DehB,I;;AACfsC,MAAM,CAACC,OAAP,GAAiBvC,IAAjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}