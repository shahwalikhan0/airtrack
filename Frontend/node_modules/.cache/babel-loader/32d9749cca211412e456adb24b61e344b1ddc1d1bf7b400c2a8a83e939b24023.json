{"ast":null,"code":"'use strict';\n\nvar ConnectionPool = require('./connection-pool');\nvar PreparedStatement = require('./prepared-statement');\nvar Request = require('./request');\nvar Transaction = require('./transaction');\nvar _require = require('../error'),\n  ConnectionError = _require.ConnectionError,\n  TransactionError = _require.TransactionError,\n  RequestError = _require.RequestError,\n  PreparedStatementError = _require.PreparedStatementError,\n  MSSQLError = _require.MSSQLError;\nvar shared = require('../shared');\nvar Table = require('../table');\nvar ISOLATION_LEVEL = require('../isolationlevel');\nvar _require2 = require('../datatypes'),\n  TYPES = _require2.TYPES;\nvar _require3 = require('../global-connection'),\n  connect = _require3.connect,\n  close = _require3.close,\n  on = _require3.on,\n  off = _require3.off,\n  removeListener = _require3.removeListener,\n  query = _require3.query,\n  batch = _require3.batch;\nmodule.exports = {\n  ConnectionPool: ConnectionPool,\n  Transaction: Transaction,\n  Request: Request,\n  PreparedStatement: PreparedStatement,\n  ConnectionError: ConnectionError,\n  TransactionError: TransactionError,\n  RequestError: RequestError,\n  PreparedStatementError: PreparedStatementError,\n  MSSQLError: MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError: ConnectionError,\n    TransactionError: TransactionError,\n    RequestError: RequestError,\n    PreparedStatementError: PreparedStatementError,\n    MSSQLError: MSSQLError,\n    Table: Table,\n    ISOLATION_LEVEL: ISOLATION_LEVEL,\n    TYPES: TYPES,\n    MAX: 65535,\n    // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect: connect,\n    close: close,\n    on: on,\n    removeListener: removeListener,\n    off: off,\n    query: query,\n    batch: batch\n  }\n};\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: function get() {\n    return shared.Promise;\n  },\n  set: function set(value) {\n    shared.Promise = value;\n  }\n});\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n});\nfor (var key in TYPES) {\n  var value = TYPES[key];\n  module.exports.exports[key] = value;\n  module.exports.exports[key.toUpperCase()] = value;\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */","map":{"version":3,"names":["ConnectionPool","require","PreparedStatement","Request","Transaction","_require","ConnectionError","TransactionError","RequestError","PreparedStatementError","MSSQLError","shared","Table","ISOLATION_LEVEL","_require2","TYPES","_require3","connect","close","on","off","removeListener","query","batch","module","exports","driver","MAX","map","getTypeByValue","Object","defineProperty","enumerable","get","Promise","set","value","valueHandler","writable","configurable","key","toUpperCase"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/index.js"],"sourcesContent":["'use strict'\n\nconst ConnectionPool = require('./connection-pool')\nconst PreparedStatement = require('./prepared-statement')\nconst Request = require('./request')\nconst Transaction = require('./transaction')\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = require('../error')\nconst shared = require('../shared')\nconst Table = require('../table')\nconst ISOLATION_LEVEL = require('../isolationlevel')\nconst { TYPES } = require('../datatypes')\nconst { connect, close, on, off, removeListener, query, batch } = require('../global-connection')\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535, // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n}\n\nObject.defineProperty(module.exports, 'Promise', {\n  enumerable: true,\n  get: () => {\n    return shared.Promise\n  },\n  set: (value) => {\n    shared.Promise = value\n  }\n})\n\nObject.defineProperty(module.exports, 'valueHandler', {\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n})\n\nfor (const key in TYPES) {\n  const value = TYPES[key]\n  module.exports.exports[key] = value\n  module.exports.exports[key.toUpperCase()] = value\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}