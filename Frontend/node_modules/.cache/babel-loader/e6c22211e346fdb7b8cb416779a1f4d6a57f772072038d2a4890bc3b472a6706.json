{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _bl = _interopRequireDefault(require(\"bl\"));\nvar _stream = require(\"stream\");\nvar _packet = require(\"./packet\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nclass OutgoingMessageStream extends _stream.Duplex {\n  constructor(debug, _ref) {\n    let {\n      packetSize\n    } = _ref;\n    super({\n      writableObjectMode: true\n    });\n    this.packetSize = void 0;\n    this.debug = void 0;\n    this.bl = void 0;\n    this.currentMessage = void 0;\n    this.packetSize = packetSize;\n    this.debug = debug;\n    this.bl = new _bl.default(); // When the writable side is ended, push `null`\n    // to also end the readable side.\n\n    this.on('finish', () => {\n      this.push(null);\n    });\n  }\n  _write(message, _encoding, callback) {\n    const length = this.packetSize - _packet.HEADER_LENGTH;\n    let packetNumber = 0;\n    this.currentMessage = message;\n    this.currentMessage.on('data', data => {\n      if (message.ignore) {\n        return;\n      }\n      this.bl.append(data);\n      while (this.bl.length > length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n        const packet = new _packet.Packet(message.type);\n        packet.packetId(packetNumber += 1);\n        packet.resetConnection(message.resetConnection);\n        packet.addData(data);\n        this.debug.packet('Sent', packet);\n        this.debug.data(packet);\n        if (this.push(packet.buffer) === false) {\n          message.pause();\n        }\n      }\n    });\n    this.currentMessage.on('end', () => {\n      const data = this.bl.slice();\n      this.bl.consume(data.length); // TODO: Get rid of creating `Packet` instances here.\n\n      const packet = new _packet.Packet(message.type);\n      packet.packetId(packetNumber += 1);\n      packet.resetConnection(message.resetConnection);\n      packet.last(true);\n      packet.ignore(message.ignore);\n      packet.addData(data);\n      this.debug.packet('Sent', packet);\n      this.debug.data(packet);\n      this.push(packet.buffer);\n      this.currentMessage = undefined;\n      callback();\n    });\n  }\n  _read(_size) {\n    // If we do have a message, resume it and get data flowing.\n    // Otherwise, there is nothing to do.\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n  }\n}\nvar _default = OutgoingMessageStream;\nexports.default = _default;\nmodule.exports = OutgoingMessageStream;","map":{"version":3,"names":["_bl","_interopRequireDefault","require","_stream","_packet","OutgoingMessageStream","Duplex","constructor","debug","_ref","packetSize","writableObjectMode","bl","currentMessage","default","on","push","_write","message","_encoding","callback","length","HEADER_LENGTH","packetNumber","data","ignore","append","slice","consume","packet","Packet","type","packetId","resetConnection","addData","buffer","pause","last","undefined","_read","_size","resume","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/outgoing-message-stream.ts"],"sourcesContent":["import BufferList from 'bl';\nimport { Duplex } from 'stream';\n\nimport Debug from './debug';\nimport Message from './message';\nimport { Packet, HEADER_LENGTH } from './packet';\n\nclass OutgoingMessageStream extends Duplex {\n  packetSize: number;\n  debug: Debug;\n  bl: any;\n\n  currentMessage: Message | undefined;\n\n  constructor(debug: Debug, { packetSize }: { packetSize: number }) {\n    super({ writableObjectMode: true });\n\n    this.packetSize = packetSize;\n    this.debug = debug;\n    this.bl = new BufferList();\n\n    // When the writable side is ended, push `null`\n    // to also end the readable side.\n    this.on('finish', () => {\n      this.push(null);\n    });\n  }\n\n  _write(message: Message, _encoding: string, callback: (err?: Error | null) => void) {\n    const length = this.packetSize - HEADER_LENGTH;\n    let packetNumber = 0;\n\n    this.currentMessage = message;\n    this.currentMessage.on('data', (data: Buffer) => {\n      if (message.ignore) {\n        return;\n      }\n\n      this.bl.append(data);\n\n      while (this.bl.length > length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length);\n\n        // TODO: Get rid of creating `Packet` instances here.\n        const packet = new Packet(message.type);\n        packet.packetId(packetNumber += 1);\n        packet.resetConnection(message.resetConnection);\n        packet.addData(data);\n\n        this.debug.packet('Sent', packet);\n        this.debug.data(packet);\n\n        if (this.push(packet.buffer) === false) {\n          message.pause();\n        }\n      }\n    });\n\n    this.currentMessage.on('end', () => {\n      const data = this.bl.slice();\n      this.bl.consume(data.length);\n\n      // TODO: Get rid of creating `Packet` instances here.\n      const packet = new Packet(message.type);\n      packet.packetId(packetNumber += 1);\n      packet.resetConnection(message.resetConnection);\n      packet.last(true);\n      packet.ignore(message.ignore);\n      packet.addData(data);\n\n      this.debug.packet('Sent', packet);\n      this.debug.data(packet);\n\n      this.push(packet.buffer);\n\n      this.currentMessage = undefined;\n\n      callback();\n    });\n  }\n\n  _read(_size: number) {\n    // If we do have a message, resume it and get data flowing.\n    // Otherwise, there is nothing to do.\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n  }\n}\n\nexport default OutgoingMessageStream;\nmodule.exports = OutgoingMessageStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}