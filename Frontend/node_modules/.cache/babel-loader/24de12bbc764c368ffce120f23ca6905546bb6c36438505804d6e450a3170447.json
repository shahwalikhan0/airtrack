{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/shahwalikhan/Desktop/my-app/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar debug = require('debug')('mssql:base');\nvar _require = require('events'),\n  EventEmitter = _require.EventEmitter;\nvar _require2 = require('stream'),\n  Readable = _require2.Readable;\nvar _require3 = require('../utils'),\n  IDS = _require3.IDS,\n  objectHasProperty = _require3.objectHasProperty;\nvar globalConnection = require('../global-connection');\nvar _require4 = require('../error'),\n  RequestError = _require4.RequestError,\n  ConnectionError = _require4.ConnectionError;\nvar _require5 = require('../datatypes'),\n  TYPES = _require5.TYPES;\nvar shared = require('../shared');\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\nvar Request = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Request, _EventEmitter);\n  var _super = _createSuper(Request);\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  function Request(parent) {\n    var _this;\n    _classCallCheck(this, Request);\n    _this = _super.call(this);\n    IDS.add(_assertThisInitialized(_this), 'Request');\n    debug('request(%d): created', IDS.get(_assertThisInitialized(_this)));\n    _this.canceled = false;\n    _this._paused = false;\n    _this.parent = parent || globalConnection.pool;\n    _this.parameters = {};\n    _this.stream = null;\n    _this.arrayRowMode = null;\n    return _this;\n  }\n  _createClass(Request, [{\n    key: \"paused\",\n    get: function get() {\n      return this._paused;\n    }\n\n    /**\n     * Generate sql string and set input parameters from tagged template string.\n     *\n     * @param {Template literal} template\n     * @return {String}\n     */\n  }, {\n    key: \"template\",\n    value: function template() {\n      var values = Array.prototype.slice.call(arguments);\n      var strings = values.shift();\n      return this._template(strings, values);\n    }\n\n    /**\n     * Fetch request from tagged template string.\n     *\n     * @private\n     * @param {Array} strings\n     * @param {Array} values\n     * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n     * @return {Request}\n     */\n  }, {\n    key: \"_template\",\n    value: function _template(strings, values, method) {\n      var command = [strings[0]];\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index];\n        // if value is an array, prepare each items as it's own comma separated parameter\n        if (Array.isArray(value)) {\n          for (var parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n            this.input(\"param\".concat(index + 1, \"_\").concat(parameterIndex), value[parameterIndex]);\n            command.push(\"@param\".concat(index + 1, \"_\").concat(parameterIndex));\n            if (parameterIndex < value.length - 1) {\n              command.push(', ');\n            }\n          }\n          command.push(strings[index + 1]);\n        } else {\n          this.input(\"param\".concat(index + 1), value);\n          command.push(\"@param\".concat(index + 1), strings[index + 1]);\n        }\n      }\n      if (method) {\n        return this[method](command.join(''));\n      } else {\n        return command.join('');\n      }\n    }\n\n    /**\n     * Add an input parameter to the request.\n     *\n     * @param {String} name Name of the input parameter without @ char.\n     * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n     * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n     * @return {Request}\n     */\n  }, {\n    key: \"input\",\n    value: function input(name, type, value) {\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new RequestError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n      if (arguments.length < 2) {\n        throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS');\n      } else if (arguments.length === 2) {\n        value = type;\n        type = shared.getTypeByValue(value);\n      }\n\n      // support for custom data types\n      if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n      if (value === undefined) value = null; // undefined to null\n      if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n      if (type instanceof Function) type = type();\n      if (objectHasProperty(this.parameters, name)) {\n        throw new RequestError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 1,\n        value: value,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision,\n        tvpType: type.tvpType\n      };\n      return this;\n    }\n\n    /**\n     * Replace an input parameter on the request.\n     *\n     * @param {String} name Name of the input parameter without @ char.\n     * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n     * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n     * @return {Request}\n     */\n  }, {\n    key: \"replaceInput\",\n    value: function replaceInput(name, type, value) {\n      delete this.parameters[name];\n      return this.input(name, type, value);\n    }\n\n    /**\n     * Add an output parameter to the request.\n     *\n     * @param {String} name Name of the output parameter without @ char.\n     * @param {*} type SQL data type of output parameter.\n     * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n     * @return {Request}\n     */\n  }, {\n    key: \"output\",\n    value: function output(name, type, value) {\n      if (!type) {\n        type = TYPES.NVarChar;\n      }\n      if (/(--| |\\/\\*|\\*\\/|')/.test(name)) {\n        throw new RequestError(\"SQL injection warning for param '\".concat(name, \"'\"), 'EINJECT');\n      }\n      if (type === TYPES.Text || type === TYPES.NText || type === TYPES.Image) {\n        throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED');\n      }\n\n      // support for custom data types\n      if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf();\n      if (value === undefined) value = null; // undefined to null\n      if (typeof value === 'number' && isNaN(value)) value = null; // NaN to null\n      if (type instanceof Function) type = type();\n      if (objectHasProperty(this.parameters, name)) {\n        throw new RequestError(\"The parameter name \".concat(name, \" has already been declared. Parameter names must be unique\"), 'EDUPEPARAM');\n      }\n      this.parameters[name] = {\n        name: name,\n        type: type.type,\n        io: 2,\n        value: value,\n        length: type.length,\n        scale: type.scale,\n        precision: type.precision\n      };\n      return this;\n    }\n\n    /**\n     * Replace an output parameter on the request.\n     *\n     * @param {String} name Name of the output parameter without @ char.\n     * @param {*} type SQL data type of output parameter.\n     * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n     * @return {Request}\n     */\n  }, {\n    key: \"replaceOutput\",\n    value: function replaceOutput(name, type, value) {\n      delete this.parameters[name];\n      return this.output(name, type, value);\n    }\n\n    /**\n     * Execute the SQL batch.\n     *\n     * @param {String} batch T-SQL batch to be executed.\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"batch\",\n    value: function batch(_batch, callback) {\n      var _this2 = this;\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n      if (typeof callback === 'function') {\n        this._batch(_batch, function (err, recordsets, output, rowsAffected) {\n          if (_this2.stream) {\n            if (err) _this2.emit('error', err);\n            err = null;\n            _this2.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n          if (err) return callback(err);\n          callback(null, {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          });\n        });\n        return this;\n      }\n\n      // Check is method was called as tagged template\n      if (typeof _batch === 'object') {\n        var values = Array.prototype.slice.call(arguments);\n        var strings = values.shift();\n        _batch = this._template(strings, values);\n      }\n      return new shared.Promise(function (resolve, reject) {\n        _this2._batch(_batch, function (err, recordsets, output, rowsAffected) {\n          if (_this2.stream) {\n            if (err) _this2.emit('error', err);\n            err = null;\n            _this2.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n          if (err) return reject(err);\n          resolve({\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          });\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {String} batch\n     * @param {Request~requestCallback} callback\n     */\n  }, {\n    key: \"_batch\",\n    value: function _batch(batch, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n      this.canceled = false;\n      setImmediate(callback);\n    }\n\n    /**\n     * Bulk load.\n     *\n     * @param {Table} table SQL table.\n     * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n     * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"bulk\",\n    value: function bulk(table, options, callback) {\n      var _this3 = this;\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      } else if (typeof options === 'undefined') {\n        options = {};\n      }\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      if (this.stream || typeof callback === 'function') {\n        this._bulk(table, options, function (err, rowsAffected) {\n          if (_this3.stream) {\n            if (err) _this3.emit('error', err);\n            return _this3.emit('done', {\n              rowsAffected: rowsAffected\n            });\n          }\n          if (err) return callback(err);\n          callback(null, {\n            rowsAffected: rowsAffected\n          });\n        });\n        return this;\n      }\n      return new shared.Promise(function (resolve, reject) {\n        _this3._bulk(table, options, function (err, rowsAffected) {\n          if (err) return reject(err);\n          resolve({\n            rowsAffected: rowsAffected\n          });\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {Table} table\n     * @param {object} options\n     * @param {Request~bulkCallback} callback\n     */\n  }, {\n    key: \"_bulk\",\n    value: function _bulk(table, options, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n      this.canceled = false;\n      setImmediate(callback);\n    }\n\n    /**\n     * Wrap original request in a Readable stream that supports back pressure and return.\n     * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n     *\n     * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n     * @return {Stream}\n     */\n  }, {\n    key: \"toReadableStream\",\n    value: function toReadableStream() {\n      var _this4 = this;\n      var streamOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.stream = true;\n      this.pause();\n      var readableStream = new Readable(_objectSpread(_objectSpread({}, streamOptions), {}, {\n        objectMode: true,\n        read: function read( /* size */\n        ) {\n          _this4.resume();\n        }\n      }));\n      this.on('row', function (row) {\n        if (!readableStream.push(row)) {\n          _this4.pause();\n        }\n      });\n      this.on('error', function (error) {\n        readableStream.emit('error', error);\n      });\n      this.on('done', function () {\n        readableStream.push(null);\n      });\n      return readableStream;\n    }\n\n    /**\n     * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n     * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n     *\n     * @param {Stream} stream Stream to pipe data into.\n     * @return {Stream}\n     */\n  }, {\n    key: \"pipe\",\n    value: function pipe(writableStream) {\n      var readableStream = this.toReadableStream();\n      return readableStream.pipe(writableStream);\n    }\n\n    /**\n     * Execute the SQL command.\n     *\n     * @param {String} command T-SQL command to be executed.\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"query\",\n    value: function query(command, callback) {\n      var _this5 = this;\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n      if (typeof callback === 'function') {\n        this._query(command, function (err, recordsets, output, rowsAffected, columns) {\n          if (_this5.stream) {\n            if (err) _this5.emit('error', err);\n            err = null;\n            _this5.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n          if (err) return callback(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          };\n          if (_this5.arrayRowMode) result.columns = columns;\n          callback(null, result);\n        });\n        return this;\n      }\n\n      // Check is method was called as tagged template\n      if (typeof command === 'object') {\n        var values = Array.prototype.slice.call(arguments);\n        var strings = values.shift();\n        command = this._template(strings, values);\n      }\n      return new shared.Promise(function (resolve, reject) {\n        _this5._query(command, function (err, recordsets, output, rowsAffected, columns) {\n          if (_this5.stream) {\n            if (err) _this5.emit('error', err);\n            err = null;\n            _this5.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected\n            });\n          }\n          if (err) return reject(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected\n          };\n          if (_this5.arrayRowMode) result.columns = columns;\n          resolve(result);\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {String} command\n     * @param {Request~bulkCallback} callback\n     */\n  }, {\n    key: \"_query\",\n    value: function _query(command, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n      this.canceled = false;\n      setImmediate(callback);\n    }\n\n    /**\n     * Call a stored procedure.\n     *\n     * @param {String} procedure Name of the stored procedure to be executed.\n     * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n     * @return {Request|Promise}\n     */\n  }, {\n    key: \"execute\",\n    value: function execute(command, callback) {\n      var _this6 = this;\n      if (this.stream === null && this.parent) this.stream = this.parent.config.stream;\n      if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode;\n      this.rowsAffected = 0;\n      if (typeof callback === 'function') {\n        this._execute(command, function (err, recordsets, output, returnValue, rowsAffected, columns) {\n          if (_this6.stream) {\n            if (err) _this6.emit('error', err);\n            err = null;\n            _this6.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected,\n              returnValue: returnValue\n            });\n          }\n          if (err) return callback(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected,\n            returnValue: returnValue\n          };\n          if (_this6.arrayRowMode) result.columns = columns;\n          callback(null, result);\n        });\n        return this;\n      }\n      return new shared.Promise(function (resolve, reject) {\n        _this6._execute(command, function (err, recordsets, output, returnValue, rowsAffected, columns) {\n          if (_this6.stream) {\n            if (err) _this6.emit('error', err);\n            err = null;\n            _this6.emit('done', {\n              output: output,\n              rowsAffected: rowsAffected,\n              returnValue: returnValue\n            });\n          }\n          if (err) return reject(err);\n          var result = {\n            recordsets: recordsets,\n            recordset: recordsets && recordsets[0],\n            output: output,\n            rowsAffected: rowsAffected,\n            returnValue: returnValue\n          };\n          if (_this6.arrayRowMode) result.columns = columns;\n          resolve(result);\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @param {String} procedure\n     * @param {Request~bulkCallback} callback\n     */\n  }, {\n    key: \"_execute\",\n    value: function _execute(procedure, callback) {\n      if (!this.parent) {\n        return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'));\n      }\n      if (!this.parent.connected) {\n        return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'));\n      }\n      this.canceled = false;\n      setImmediate(callback);\n    }\n\n    /**\n     * Cancel currently executed request.\n     *\n     * @return {Boolean}\n     */\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      this._cancel();\n      return true;\n    }\n\n    /**\n     * @private\n     */\n  }, {\n    key: \"_cancel\",\n    value: function _cancel() {\n      this.canceled = true;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.stream) {\n        this._pause();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"_pause\",\n    value: function _pause() {\n      this._paused = true;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.stream) {\n        this._resume();\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"_resume\",\n    value: function _resume() {\n      this._paused = false;\n    }\n  }, {\n    key: \"_setCurrentRequest\",\n    value: function _setCurrentRequest(request) {\n      this._currentRequest = request;\n      if (this._paused) {\n        this.pause();\n      }\n      return this;\n    }\n  }]);\n  return Request;\n}(EventEmitter);\nmodule.exports = Request;","map":{"version":3,"names":["_objectSpread","require","default","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_createSuper","debug","_require","EventEmitter","_require2","Readable","_require3","IDS","objectHasProperty","globalConnection","_require4","RequestError","ConnectionError","_require5","TYPES","shared","Request","_EventEmitter","_super","parent","_this","call","add","get","canceled","_paused","pool","parameters","stream","arrayRowMode","key","value","template","values","Array","prototype","slice","arguments","strings","shift","_template","method","command","index","length","isArray","parameterIndex","input","concat","push","join","name","type","test","getTypeByValue","valueOf","Date","undefined","isNaN","Function","io","scale","precision","tvpType","replaceInput","output","NVarChar","Text","NText","Image","replaceOutput","batch","callback","_this2","config","rowsAffected","_batch","err","recordsets","emit","recordset","Promise","resolve","reject","setImmediate","connected","bulk","table","options","_this3","_bulk","toReadableStream","_this4","streamOptions","pause","readableStream","objectMode","read","resume","on","row","error","pipe","writableStream","query","_this5","_query","columns","result","execute","_this6","_execute","returnValue","procedure","cancel","_cancel","_pause","_resume","_setCurrentRequest","request","_currentRequest","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/mssql/lib/base/request.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')('mssql:base')\nconst { EventEmitter } = require('events')\nconst { Readable } = require('stream')\nconst { IDS, objectHasProperty } = require('../utils')\nconst globalConnection = require('../global-connection')\nconst { RequestError, ConnectionError } = require('../error')\nconst { TYPES } = require('../datatypes')\nconst shared = require('../shared')\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\n\nclass Request extends EventEmitter {\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Request')\n    debug('request(%d): created', IDS.get(this))\n\n    this.canceled = false\n    this._paused = false\n    this.parent = parent || globalConnection.pool\n    this.parameters = {}\n    this.stream = null\n    this.arrayRowMode = null\n  }\n\n  get paused () {\n    return this._paused\n  }\n\n  /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */\n  template () {\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n    return this._template(strings, values)\n  }\n\n  /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */\n\n  _template (strings, values, method) {\n    const command = [strings[0]]\n\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index]\n      // if value is an array, prepare each items as it's own comma separated parameter\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\n          command.push(`@param${index + 1}_${parameterIndex}`)\n          if (parameterIndex < value.length - 1) {\n            command.push(', ')\n          }\n        }\n        command.push(strings[index + 1])\n      } else {\n        this.input(`param${index + 1}`, value)\n        command.push(`@param${index + 1}`, strings[index + 1])\n      }\n    }\n\n    if (method) {\n      return this[method](command.join(''))\n    } else {\n      return command.join('')\n    }\n  }\n\n  /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  input (name, type, value) {\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\n    } else if (arguments.length === 2) {\n      value = type\n      type = shared.getTypeByValue(value)\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  output (name, type, value) {\n    if (!type) { type = TYPES.NVarChar }\n\n    if ((/(--| |\\/\\*|\\*\\/|')/).test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  replaceOutput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.output(name, type, value)\n  }\n\n  /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch (batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      batch = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */\n\n  _batch (batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  bulk (table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    } else if (typeof options === 'undefined') {\n      options = {}\n    }\n\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          return this.emit('done', {\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err)\n        resolve({\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */\n\n  _bulk (table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */\n  toReadableStream (streamOptions = {}) {\n    this.stream = true\n    this.pause()\n    const readableStream = new Readable({\n      ...streamOptions,\n      objectMode: true,\n      read: (/* size */) => {\n        this.resume()\n      }\n    })\n    this.on('row', (row) => {\n      if (!readableStream.push(row)) {\n        this.pause()\n      }\n    })\n    this.on('error', (error) => {\n      readableStream.emit('error', error)\n    })\n    this.on('done', () => {\n      readableStream.push(null)\n    })\n    return readableStream\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */\n  pipe (writableStream) {\n    const readableStream = this.toReadableStream()\n    return readableStream.pipe(writableStream)\n  }\n\n  /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      command = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */\n\n  _query (command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */\n\n  _execute (procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */\n\n  cancel () {\n    this._cancel()\n    return true\n  }\n\n  /**\n   * @private\n   */\n\n  _cancel () {\n    this.canceled = true\n  }\n\n  pause () {\n    if (this.stream) {\n      this._pause()\n      return true\n    }\n    return false\n  }\n\n  _pause () {\n    this._paused = true\n  }\n\n  resume () {\n    if (this.stream) {\n      this._resume()\n      return true\n    }\n    return false\n  }\n\n  _resume () {\n    this._paused = false\n  }\n\n  _setCurrentRequest (request) {\n    this._currentRequest = request\n    if (this._paused) {\n      this.pause()\n    }\n    return this\n  }\n}\n\nmodule.exports = Request\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}