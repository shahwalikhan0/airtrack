{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _a;\n  const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request, next) {\n      if (!logger.enabled) {\n        return next(request);\n      }\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n      const response = await next(request);\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n      return response;\n    }\n  };\n}","map":{"version":3,"names":["logger","coreLogger","Sanitizer","logPolicyName","logPolicy","options","arguments","length","undefined","_a","info","sanitizer","additionalAllowedHeaderNames","additionalAllowedQueryParameters","name","sendRequest","request","next","enabled","sanitize","response","status","headers"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/@azure/core-rest-pipeline/src/policies/logPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Debugger } from \"@azure/logger\";\nimport { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces\";\nimport { PipelinePolicy } from \"../pipeline\";\nimport { logger as coreLogger } from \"../log\";\nimport { Sanitizer } from \"../util/sanitizer\";\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n\n/**\n * Options to configure the logPolicy.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n\n  /**\n   * The log function to use for writing pipeline logs.\n   * Defaults to core-http's built-in logger.\n   * Compatible with the `debug` library.\n   */\n  logger?: Debugger;\n}\n\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options: LogPolicyOptions = {}): PipelinePolicy {\n  const logger = options.logger ?? coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!logger.enabled) {\n        return next(request);\n      }\n\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n\n      const response = await next(request);\n\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n\n      return response;\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AAKA,SAASA,MAAM,IAAIC,UAAU,QAAQ,QAAQ;AAC7C,SAASC,SAAS,QAAQ,mBAAmB;AAE7C;;;AAGA,OAAO,MAAMC,aAAa,GAAG,WAAW;AA4BxC;;;;AAIA,OAAM,SAAUC,SAASA,CAAA,EAA+B;EAAA,IAA9BC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAE;;EACtD,MAAMN,MAAM,GAAG,CAAAS,EAAA,GAAAJ,OAAO,CAACL,MAAM,cAAAS,EAAA,cAAAA,EAAA,GAAIR,UAAU,CAACS,IAAI;EAChD,MAAMC,SAAS,GAAG,IAAIT,SAAS,CAAC;IAC9BU,4BAA4B,EAAEP,OAAO,CAACO,4BAA4B;IAClEC,gCAAgC,EAAER,OAAO,CAACQ;GAC3C,CAAC;EACF,OAAO;IACLC,IAAI,EAAEX,aAAa;IACnB,MAAMY,WAAWA,CAACC,OAAwB,EAAEC,IAAiB;MAC3D,IAAI,CAACjB,MAAM,CAACkB,OAAO,EAAE;QACnB,OAAOD,IAAI,CAACD,OAAO,CAAC;;MAGtBhB,MAAM,CAAC,YAAYW,SAAS,CAACQ,QAAQ,CAACH,OAAO,CAAC,EAAE,CAAC;MAEjD,MAAMI,QAAQ,GAAG,MAAMH,IAAI,CAACD,OAAO,CAAC;MAEpChB,MAAM,CAAC,yBAAyBoB,QAAQ,CAACC,MAAM,EAAE,CAAC;MAClDrB,MAAM,CAAC,YAAYW,SAAS,CAACQ,QAAQ,CAACC,QAAQ,CAACE,OAAO,CAAC,EAAE,CAAC;MAE1D,OAAOF,QAAQ;IACjB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}