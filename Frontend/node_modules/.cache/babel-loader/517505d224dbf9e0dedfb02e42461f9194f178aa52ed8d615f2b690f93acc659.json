{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _iconvLite = _interopRequireDefault(require(\"iconv-lite\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst Char = {\n  id: 0xAF,\n  type: 'BIGCHAR',\n  name: 'Char',\n  maximumLength: 8000,\n  declaration: function (parameter) {\n    const value = parameter.value;\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n    if (length < this.maximumLength) {\n      return 'char(' + length + ')';\n    } else {\n      return 'char(' + this.maximumLength + ')';\n    }\n  },\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  resolveLength: function (parameter) {\n    const value = parameter.value;\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length, 1);\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n    return buffer;\n  },\n  generateParameterLength(parameter, options) {\n    const value = parameter.value;\n    if (value == null) {\n      return NULL_LENGTH;\n    }\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(value.length, 0);\n    return buffer;\n  },\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n    yield Buffer.from(parameter.value, 'ascii');\n  },\n  validate: function (value, collation) {\n    if (value == null) {\n      return null;\n    }\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n    return _iconvLite.default.encode(value, collation.codepage);\n  }\n};\nvar _default = Char;\nexports.default = _default;\nmodule.exports = Char;","map":{"version":3,"names":["_iconvLite","_interopRequireDefault","require","NULL_LENGTH","Buffer","from","Char","id","type","name","maximumLength","declaration","parameter","value","length","output","resolveLength","generateTypeInfo","buffer","alloc","writeUInt8","writeUInt16LE","collation","toBuffer","copy","generateParameterLength","options","generateParameterData","validate","TypeError","Error","codepage","default","encode","module","exports"],"sources":["/Users/shahwalikhan/Desktop/my-app/node_modules/tedious/src/data-types/char.ts"],"sourcesContent":["import iconv from 'iconv-lite';\nimport { DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst Char: { maximumLength: number } & DataType = {\n  id: 0xAF,\n  type: 'BIGCHAR',\n  name: 'Char',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length < this.maximumLength) {\n      return 'char(' + length + ')';\n    } else {\n      return 'char(' + this.maximumLength + ')';\n    }\n  },\n\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length!, 1);\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(value.length, 0);\n    return buffer;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value, 'ascii');\n  },\n\n  validate: function(value, collation): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n\n    return iconv.encode(value, collation.codepage);\n  }\n};\n\nexport default Char;\nmodule.exports = Char;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}